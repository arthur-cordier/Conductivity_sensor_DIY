
MELODI_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dcc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ddc1  08013008  08013008  00014008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08030dcc  08030dcc  00031dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08030dd4  08030dd4  00031dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08030dd8  08030dd8  00031dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08030ddc  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c550  200001d4  08030fb0  000321d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000c724  08030fb0  00032724  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000321d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003668c  00000000  00000000  0003220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d81  00000000  00000000  00068896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002120  00000000  00000000  0006e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018a9  00000000  00000000  00070738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c793  00000000  00000000  00071fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003206d  00000000  00000000  000ae774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017943c  00000000  00000000  000e07e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000bc  00000000  00000000  00259c1d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a294  00000000  00000000  00259cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00263f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000036ee  00000000  00000000  00263fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000000d0  00000000  00000000  002676c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	08012fec 	.word	0x08012fec

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	08012fec 	.word	0x08012fec

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <MX_ADC4_Init>:
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00e fd07 	bl	800fa98 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800108a:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <MX_ADC4_Init+0xf0>)
 800108c:	4a37      	ldr	r2, [pc, #220]	@ (800116c <MX_ADC4_Init+0xf4>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001090:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <MX_ADC4_Init+0xf0>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <MX_ADC4_Init+0xf0>)
 8001098:	2204      	movs	r2, #4
 800109a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <MX_ADC4_Init+0xf0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 80010a2:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80010a8:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010ac:	2208      	movs	r2, #8
 80010ae:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T2_TRGO;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010d4:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80010d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_79CYCLES_5;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_79CYCLES_5;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_ADC4_Init+0xf0>)
 80010fe:	2206      	movs	r2, #6
 8001100:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_ADC4_Init+0xf0>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800110a:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_ADC4_Init+0xf0>)
 800110c:	f001 ffc8 	bl	80030a0 <HAL_ADC_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8001116:	f000 ff85 	bl	8002024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_ADC4_Init+0xf8>)
 800111c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_ADC4_Init+0xf0>)
 8001134:	f002 fdf6 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC4_Init+0xca>
  {
    Error_Handler();
 800113e:	f000 ff71 	bl	8002024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_ADC4_Init+0xfc>)
 8001144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001146:	2304      	movs	r3, #4
 8001148:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_ADC4_Init+0xf0>)
 8001150:	f002 fde8 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC4_Init+0xe6>
  {
    Error_Handler();
 800115a:	f000 ff63 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000c20c 	.word	0x2000c20c
 800116c:	46021000 	.word	0x46021000
 8001170:	10000010 	.word	0x10000010
 8001174:	2a000400 	.word	0x2a000400

08001178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0d6      	sub	sp, #344	@ 0x158
 800117c:	af00      	add	r7, sp, #0
 800117e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001182:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001186:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 8001198:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800119c:	226c      	movs	r2, #108	@ 0x6c
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e fc79 	bl	800fa98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011ae:	4618      	mov	r0, r3
 80011b0:	23c0      	movs	r3, #192	@ 0xc0
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f00e fc6f 	bl	800fa98 <memset>
  if(adcHandle->Instance==ADC4)
 80011ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a8d      	ldr	r2, [pc, #564]	@ (80013fc <HAL_ADC_MspInit+0x284>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f040 8111 	bne.w	80013f0 <HAL_ADC_MspInit+0x278>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80011ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011d2:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 80011d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80011e2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011e6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f007 fe20 	bl	8008e3c <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 8001202:	f000 ff0f 	bl	8002024 <Error_Handler>
    }

    /* ADC4 clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001206:	4b7e      	ldr	r3, [pc, #504]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120c:	4a7c      	ldr	r2, [pc, #496]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 800120e:	f043 0320 	orr.w	r3, r3, #32
 8001212:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121c:	f003 0220 	and.w	r2, r3, #32
 8001220:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001224:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800122e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001232:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800123a:	4a71      	ldr	r2, [pc, #452]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001244:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800124a:	f003 0204 	and.w	r2, r3, #4
 800124e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001252:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800125c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001260:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b67      	ldr	r3, [pc, #412]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001268:	4a65      	ldr	r2, [pc, #404]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001272:	4b63      	ldr	r3, [pc, #396]	@ (8001400 <HAL_ADC_MspInit+0x288>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001280:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800128a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800128e:	681b      	ldr	r3, [r3, #0]
    /**ADC4 GPIO Configuration
    PC3     ------> ADC4_IN4
    PA5     ------> ADC4_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001290:	2308      	movs	r3, #8
 8001292:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80012a6:	4619      	mov	r1, r3
 80012a8:	4856      	ldr	r0, [pc, #344]	@ (8001404 <HAL_ADC_MspInit+0x28c>)
 80012aa:	f005 fe41 	bl	8006f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ae:	2320      	movs	r3, #32
 80012b0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80012c4:	4619      	mov	r1, r3
 80012c6:	4850      	ldr	r0, [pc, #320]	@ (8001408 <HAL_ADC_MspInit+0x290>)
 80012c8:	f005 fe32 	bl	8006f30 <HAL_GPIO_Init>

    /* ADC4 DMA Init */
    /* GPDMA1_REQUEST_ADC4 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80012cc:	2321      	movs	r3, #33	@ 0x21
 80012ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC4;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80012ea:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80012ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80012f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001330:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001334:	4935      	ldr	r1, [pc, #212]	@ (800140c <HAL_ADC_MspInit+0x294>)
 8001336:	4618      	mov	r0, r3
 8001338:	f004 ff18 	bl	800616c <HAL_DMAEx_List_BuildNode>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_ADC_MspInit+0x1ce>
    {
      Error_Handler();
 8001342:	f000 fe6f 	bl	8002024 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001346:	4a31      	ldr	r2, [pc, #196]	@ (800140c <HAL_ADC_MspInit+0x294>)
 8001348:	2100      	movs	r1, #0
 800134a:	4831      	ldr	r0, [pc, #196]	@ (8001410 <HAL_ADC_MspInit+0x298>)
 800134c:	f004 ff3a 	bl	80061c4 <HAL_DMAEx_List_InsertNode>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_ADC_MspInit+0x1e2>
    {
      Error_Handler();
 8001356:	f000 fe65 	bl	8002024 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800135a:	482d      	ldr	r0, [pc, #180]	@ (8001410 <HAL_ADC_MspInit+0x298>)
 800135c:	f004 fffb 	bl	8006356 <HAL_DMAEx_List_SetCircularMode>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_ADC_MspInit+0x1f2>
    {
      Error_Handler();
 8001366:	f000 fe5d 	bl	8002024 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 800136c:	4a2a      	ldr	r2, [pc, #168]	@ (8001418 <HAL_ADC_MspInit+0x2a0>)
 800136e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 8001372:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001376:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 800137a:	2200      	movs	r2, #0
 800137c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 8001380:	2200      	movs	r2, #0
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001384:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 8001386:	2200      	movs	r2, #0
 8001388:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 800138c:	2281      	movs	r2, #129	@ 0x81
 800138e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001390:	4820      	ldr	r0, [pc, #128]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 8001392:	f004 fd2b 	bl	8005dec <HAL_DMAEx_List_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_ADC_MspInit+0x228>
    {
      Error_Handler();
 800139c:	f000 fe42 	bl	8002024 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80013a0:	491b      	ldr	r1, [pc, #108]	@ (8001410 <HAL_ADC_MspInit+0x298>)
 80013a2:	481c      	ldr	r0, [pc, #112]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 80013a4:	f005 f838 	bl	8006418 <HAL_DMAEx_List_LinkQ>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_ADC_MspInit+0x23a>
    {
      Error_Handler();
 80013ae:	f000 fe39 	bl	8002024 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 80013b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 80013be:	671a      	str	r2, [r3, #112]	@ 0x70
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 80013c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013ce:	2110      	movs	r1, #16
 80013d0:	4810      	ldr	r0, [pc, #64]	@ (8001414 <HAL_ADC_MspInit+0x29c>)
 80013d2:	f004 fcaa 	bl	8005d2a <HAL_DMA_ConfigChannelAttributes>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_ADC_MspInit+0x268>
    {
      Error_Handler();
 80013dc:	f000 fe22 	bl	8002024 <Error_Handler>
    }

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2071      	movs	r0, #113	@ 0x71
 80013e6:	f003 ff4d 	bl	8005284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 80013ea:	2071      	movs	r0, #113	@ 0x71
 80013ec:	f003 ff64 	bl	80052b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013f0:	bf00      	nop
 80013f2:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	46021000 	.word	0x46021000
 8001400:	46020c00 	.word	0x46020c00
 8001404:	42020800 	.word	0x42020800
 8001408:	42020000 	.word	0x42020000
 800140c:	2000c298 	.word	0x2000c298
 8001410:	2000c2bc 	.word	0x2000c2bc
 8001414:	2000c2d4 	.word	0x2000c2d4
 8001418:	40020050 	.word	0x40020050

0800141c <HAL_ADC_ConvCpltCallback>:
}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC4)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <HAL_ADC_ConvCpltCallback+0x24>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d102      	bne.n	8001434 <HAL_ADC_ConvCpltCallback+0x18>
    {

        fft_ready = 1;
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_ADC_ConvCpltCallback+0x28>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
    }
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	46021000 	.word	0x46021000
 8001444:	200001f0 	.word	0x200001f0

08001448 <ADC_Start>:


void ADC_Start(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800144c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001450:	2100      	movs	r1, #0
 8001452:	4809      	ldr	r0, [pc, #36]	@ (8001478 <ADC_Start+0x30>)
 8001454:	f003 fce0 	bl	8004e18 <HAL_ADCEx_Calibration_Start>
	  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_raw_samples, FFT_SAMPLE_SIZE * 2);
 8001458:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800145c:	4907      	ldr	r1, [pc, #28]	@ (800147c <ADC_Start+0x34>)
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <ADC_Start+0x30>)
 8001460:	f002 f8e8 	bl	8003634 <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start(&htim2);
 8001464:	4806      	ldr	r0, [pc, #24]	@ (8001480 <ADC_Start+0x38>)
 8001466:	f00a f9e1 	bl	800b82c <HAL_TIM_Base_Start>
	  HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE); // ← cette ligne débloque le TRGO
 800146a:	2101      	movs	r1, #1
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <ADC_Start+0x38>)
 800146e:	f00a fa9c 	bl	800b9aa <HAL_TIM_GenerateEvent>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000c20c 	.word	0x2000c20c
 800147c:	2000020c 	.word	0x2000020c
 8001480:	2000c480 	.word	0x2000c480

08001484 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	@ 0x38
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2230      	movs	r2, #48	@ 0x30
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00e fb00 	bl	800fa98 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_DAC1_Init+0x88>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <MX_DAC1_Init+0x8c>)
 80014a0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014a2:	481a      	ldr	r0, [pc, #104]	@ (800150c <MX_DAC1_Init+0x88>)
 80014a4:	f003 ffca 	bl	800543c <HAL_DAC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 80014ae:	f000 fdb9 	bl	8002024 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_DAC1_Init+0x88>)
 80014dc:	f004 f88c 	bl	80055f8 <HAL_DAC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 80014e6:	f000 fd9d 	bl	8002024 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <MX_DAC1_Init+0x88>)
 80014f4:	f004 fa20 	bl	8005938 <HAL_DACEx_SetConfigAutonomousMode>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f000 fd91 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	@ 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000c414 	.word	0x2000c414
 8001510:	46021800 	.word	0x46021800

08001514 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ba      	sub	sp, #232	@ 0xe8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	22c0      	movs	r2, #192	@ 0xc0
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f00e faaf 	bl	800fa98 <memset>
  if(dacHandle->Instance==DAC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <HAL_DAC_MspInit+0xc0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d143      	bne.n	80015cc <HAL_DAC_MspInit+0xb8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8001544:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <HAL_DAC_MspInit+0xc4>)
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800154e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8001556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800155a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4618      	mov	r0, r3
 8001564:	f007 fc6a 	bl	8008e3c <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 800156e:	f000 fd59 	bl	8002024 <Error_Handler>
    }

    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 8001592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_DAC_MspInit+0xc8>)
 80015a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ae:	2310      	movs	r3, #16
 80015b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <HAL_DAC_MspInit+0xcc>)
 80015c8:	f005 fcb2 	bl	8006f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	37e8      	adds	r7, #232	@ 0xe8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	46021800 	.word	0x46021800
 80015d8:	10008000 	.word	0x10008000
 80015dc:	46020c00 	.word	0x46020c00
 80015e0:	42020000 	.word	0x42020000
 80015e4:	00000000 	.word	0x00000000

080015e8 <GenerateSineTable>:
  }
}

/* USER CODE BEGIN 1 */
void GenerateSineTable(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
    const float amplitude_v = 0.25f;  // 0.5V crête à crête
 80015ee:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80015f2:	61bb      	str	r3, [r7, #24]
    const float offset_v = 0.30f;     // centré sur 0.3V pour evité l'écrêtage en bas de la sinusoïde
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <GenerateSineTable+0xb8>)
 80015f6:	617b      	str	r3, [r7, #20]
    const float vref = 3.3f;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <GenerateSineTable+0xbc>)
 80015fa:	613b      	str	r3, [r7, #16]
    const float dac_max = 4095.0f;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <GenerateSineTable+0xc0>)
 80015fe:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < DAC_BUFFER_SIZE; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e03e      	b.n	8001684 <GenerateSineTable+0x9c>
        float angle = 2.0f * M_PI * i / DAC_BUFFER_SIZE;
 8001606:	69f8      	ldr	r0, [r7, #28]
 8001608:	f7fe ff90 	bl	800052c <__aeabi_i2d>
 800160c:	a322      	add	r3, pc, #136	@ (adr r3, 8001698 <GenerateSineTable+0xb0>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fff5 	bl	8000600 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <GenerateSineTable+0xc4>)
 8001624:	f7ff f916 	bl	8000854 <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fade 	bl	8000bf0 <__aeabi_d2f>
 8001634:	4603      	mov	r3, r0
 8001636:	60bb      	str	r3, [r7, #8]
        float val = sinf(angle) * amplitude_v + offset_v;
 8001638:	ed97 0a02 	vldr	s0, [r7, #8]
 800163c:	f00c fbf2 	bl	800de24 <sinf>
 8001640:	eeb0 7a40 	vmov.f32	s14, s0
 8001644:	edd7 7a06 	vldr	s15, [r7, #24]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a01 	vstr	s15, [r7, #4]
        sine_wave[i] = (uint16_t)((val / vref) * dac_max);
 8001658:	edd7 6a01 	vldr	s13, [r7, #4]
 800165c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001664:	edd7 7a03 	vldr	s15, [r7, #12]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001670:	ee17 3a90 	vmov	r3, s15
 8001674:	b299      	uxth	r1, r3
 8001676:	4a0e      	ldr	r2, [pc, #56]	@ (80016b0 <GenerateSineTable+0xc8>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < DAC_BUFFER_SIZE; i++) {
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b63      	cmp	r3, #99	@ 0x63
 8001688:	ddbd      	ble.n	8001606 <GenerateSineTable+0x1e>
    }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	54442d18 	.word	0x54442d18
 800169c:	401921fb 	.word	0x401921fb
 80016a0:	3e99999a 	.word	0x3e99999a
 80016a4:	40533333 	.word	0x40533333
 80016a8:	457ff000 	.word	0x457ff000
 80016ac:	40590000 	.word	0x40590000
 80016b0:	2000c34c 	.word	0x2000c34c

080016b4 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <MX_GPDMA1_Init+0x3c>)
 80016bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <MX_GPDMA1_Init+0x3c>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_GPDMA1_Init+0x3c>)
 80016cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	201d      	movs	r0, #29
 80016de:	f003 fdd1 	bl	8005284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80016e2:	201d      	movs	r0, #29
 80016e4:	f003 fde8 	bl	80052b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	46020c00 	.word	0x46020c00

080016f4 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	@ 0x30
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	4b8a      	ldr	r3, [pc, #552]	@ (8001934 <MX_GPIO_Init+0x240>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001710:	4a88      	ldr	r2, [pc, #544]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171a:	4b86      	ldr	r3, [pc, #536]	@ (8001934 <MX_GPIO_Init+0x240>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <MX_GPIO_Init+0x240>)
 800172a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172e:	4a81      	ldr	r2, [pc, #516]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001738:	4b7e      	ldr	r3, [pc, #504]	@ (8001934 <MX_GPIO_Init+0x240>)
 800173a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	4b7b      	ldr	r3, [pc, #492]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174c:	4a79      	ldr	r2, [pc, #484]	@ (8001934 <MX_GPIO_Init+0x240>)
 800174e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001752:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001756:	4b77      	ldr	r3, [pc, #476]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b73      	ldr	r3, [pc, #460]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176a:	4a72      	ldr	r2, [pc, #456]	@ (8001934 <MX_GPIO_Init+0x240>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001774:	4b6f      	ldr	r3, [pc, #444]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b6c      	ldr	r3, [pc, #432]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001788:	4a6a      	ldr	r2, [pc, #424]	@ (8001934 <MX_GPIO_Init+0x240>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001792:	4b68      	ldr	r3, [pc, #416]	@ (8001934 <MX_GPIO_Init+0x240>)
 8001794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b64      	ldr	r3, [pc, #400]	@ (8001934 <MX_GPIO_Init+0x240>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a6:	4a63      	ldr	r2, [pc, #396]	@ (8001934 <MX_GPIO_Init+0x240>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b0:	4b60      	ldr	r3, [pc, #384]	@ (8001934 <MX_GPIO_Init+0x240>)
 80017b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2160      	movs	r1, #96	@ 0x60
 80017c2:	485d      	ldr	r0, [pc, #372]	@ (8001938 <MX_GPIO_Init+0x244>)
 80017c4:	f005 fd8c 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_EXT_8_GPIO_Port, GPIO_EXT_8_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2101      	movs	r1, #1
 80017cc:	485b      	ldr	r0, [pc, #364]	@ (800193c <MX_GPIO_Init+0x248>)
 80017ce:	f005 fd87 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_EXT_5_GPIO_Port, GPIO_EXT_5_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d8:	4859      	ldr	r0, [pc, #356]	@ (8001940 <MX_GPIO_Init+0x24c>)
 80017da:	f005 fd81 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_EXT_7_Pin|GPIO_EXT_6_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2160      	movs	r1, #96	@ 0x60
 80017e2:	4858      	ldr	r0, [pc, #352]	@ (8001944 <MX_GPIO_Init+0x250>)
 80017e4:	f005 fd7c 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_EXT_4_GPIO_Port, GPIO_EXT_4_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2108      	movs	r1, #8
 80017ec:	4856      	ldr	r0, [pc, #344]	@ (8001948 <MX_GPIO_Init+0x254>)
 80017ee:	f005 fd77 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_EXT_3_Pin|GPIO_EXT_2_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80017f8:	4854      	ldr	r0, [pc, #336]	@ (800194c <MX_GPIO_Init+0x258>)
 80017fa:	f005 fd71 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_EXT_1_GPIO_Port, GPIO_EXT_1_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2101      	movs	r1, #1
 8001802:	484d      	ldr	r0, [pc, #308]	@ (8001938 <MX_GPIO_Init+0x244>)
 8001804:	f005 fd6c 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001808:	2360      	movs	r3, #96	@ 0x60
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4846      	ldr	r0, [pc, #280]	@ (8001938 <MX_GPIO_Init+0x244>)
 8001820:	f005 fb86 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001824:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182a:	4b49      	ldr	r3, [pc, #292]	@ (8001950 <MX_GPIO_Init+0x25c>)
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800182e:	2302      	movs	r3, #2
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4840      	ldr	r0, [pc, #256]	@ (800193c <MX_GPIO_Init+0x248>)
 800183a:	f005 fb79 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXT_8_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_8_Pin;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_EXT_8_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4839      	ldr	r0, [pc, #228]	@ (800193c <MX_GPIO_Init+0x248>)
 8001856:	f005 fb6b 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXT_5_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_5_Pin;
 800185a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_EXT_5_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4833      	ldr	r0, [pc, #204]	@ (8001940 <MX_GPIO_Init+0x24c>)
 8001874:	f005 fb5c 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDCARD_DETECT_Pin;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDCARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	482e      	ldr	r0, [pc, #184]	@ (8001944 <MX_GPIO_Init+0x250>)
 800188c:	f005 fb50 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXT_7_Pin GPIO_EXT_6_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_7_Pin|GPIO_EXT_6_Pin;
 8001890:	2360      	movs	r3, #96	@ 0x60
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4827      	ldr	r0, [pc, #156]	@ (8001944 <MX_GPIO_Init+0x250>)
 80018a8:	f005 fb42 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXT_4_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_4_Pin;
 80018ac:	2308      	movs	r3, #8
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_EXT_4_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4821      	ldr	r0, [pc, #132]	@ (8001948 <MX_GPIO_Init+0x254>)
 80018c4:	f005 fb34 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXT_3_Pin GPIO_EXT_2_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_3_Pin|GPIO_EXT_2_Pin;
 80018c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	481a      	ldr	r0, [pc, #104]	@ (800194c <MX_GPIO_Init+0x258>)
 80018e2:	f005 fb25 	bl	8006f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXT_1_Pin */
  GPIO_InitStruct.Pin = GPIO_EXT_1_Pin;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_EXT_1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	480e      	ldr	r0, [pc, #56]	@ (8001938 <MX_GPIO_Init+0x244>)
 80018fe:	f005 fb17 	bl	8006f30 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_GPIO_Init+0x260>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a13      	ldr	r2, [pc, #76]	@ (8001954 <MX_GPIO_Init+0x260>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800190c:	6053      	str	r3, [r2, #4]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_GPIO_Init+0x260>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a10      	ldr	r2, [pc, #64]	@ (8001954 <MX_GPIO_Init+0x260>)
 8001914:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001918:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2101      	movs	r1, #1
 800191e:	2018      	movs	r0, #24
 8001920:	f003 fcb0 	bl	8005284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001924:	2018      	movs	r0, #24
 8001926:	f003 fcc7 	bl	80052b8 <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	@ 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	46020c00 	.word	0x46020c00
 8001938:	42021000 	.word	0x42021000
 800193c:	42020800 	.word	0x42020800
 8001940:	42020000 	.word	0x42020000
 8001944:	42020c00 	.word	0x42020c00
 8001948:	42021c00 	.word	0x42021c00
 800194c:	42020400 	.word	0x42020400
 8001950:	10110000 	.word	0x10110000
 8001954:	46000400 	.word	0x46000400

08001958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <MX_I2C1_Init+0x74>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <MX_I2C1_Init+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <MX_I2C1_Init+0x7c>)
 8001966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001970:	2201      	movs	r2, #1
 8001972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_I2C1_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <MX_I2C1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	@ (80019cc <MX_I2C1_Init+0x74>)
 8001994:	f005 fcf8 	bl	8007388 <HAL_I2C_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800199e:	f000 fb41 	bl	8002024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <MX_I2C1_Init+0x74>)
 80019a6:	f005 fd8a 	bl	80074be <HAL_I2CEx_ConfigAnalogFilter>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019b0:	f000 fb38 	bl	8002024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_I2C1_Init+0x74>)
 80019b8:	f005 fdcc 	bl	8007554 <HAL_I2CEx_ConfigDigitalFilter>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f000 fb2f 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000c428 	.word	0x2000c428
 80019d0:	40005400 	.word	0x40005400
 80019d4:	20a0c4df 	.word	0x20a0c4df

080019d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0ba      	sub	sp, #232	@ 0xe8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	22c0      	movs	r2, #192	@ 0xc0
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00e f84d 	bl	800fa98 <memset>
  if(i2cHandle->Instance==I2C1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a26      	ldr	r2, [pc, #152]	@ (8001a9c <HAL_I2C_MspInit+0xc4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d144      	bne.n	8001a92 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a08:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f007 fa0d 	bl	8008e3c <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001a28:	f000 fafc 	bl	8002024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_EXT_SCL_Pin|I2C_EXT_SDA_Pin;
 8001a4a:	23c0      	movs	r3, #192	@ 0xc0
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a50:	2312      	movs	r3, #18
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a62:	2304      	movs	r3, #4
 8001a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <HAL_I2C_MspInit+0xcc>)
 8001a70:	f005 fa5e 	bl	8006f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_I2C_MspInit+0xc8>)
 8001a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	37e8      	adds	r7, #232	@ 0xe8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	46020c00 	.word	0x46020c00
 8001aa4:	42020400 	.word	0x42020400

08001aa8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aac:	f3bf 8f4f 	dsb	sy
}
 8001ab0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <__NVIC_SystemReset+0x24>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aba:	4904      	ldr	r1, [pc, #16]	@ (8001acc <__NVIC_SystemReset+0x24>)
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <__NVIC_SystemReset+0x28>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac2:	f3bf 8f4f 	dsb	sy
}
 8001ac6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <__NVIC_SystemReset+0x20>
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	05fa0004 	.word	0x05fa0004

08001ad4 <Calcul_Conductivite>:

    return S;
}


float Calcul_Conductivite(float U1, float U4) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b08b      	sub	sp, #44	@ 0x2c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ade:	edc7 0a00 	vstr	s1, [r7]

    //const float Rs = 75.0f;                  	// Résistance de rétroaction en ohms (valeur mesurée)
    const float Rs = 84.0f;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <Calcul_Conductivite+0x84>)
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
	const float N1 = 10.0f;						// Nombres de tours sur bobine 1
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <Calcul_Conductivite+0x88>)
 8001ae8:	623b      	str	r3, [r7, #32]
    const float N4 = 10.0f;						// Nombres de tours sur bobine 2
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <Calcul_Conductivite+0x88>)
 8001aec:	61fb      	str	r3, [r7, #28]
    const float L = 0.0045f;                   	// Distance entre bobines (en mètres)
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <Calcul_Conductivite+0x8c>)
 8001af0:	61bb      	str	r3, [r7, #24]
    //const float S = 0.00014741;            	    // Surface de contact (section du tube ou passe l'eau) → π*r^2 avec r=6.85mm, S = 147 mm^2
    const float S = 0.000141;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <Calcul_Conductivite+0x90>)
 8001af4:	617b      	str	r3, [r7, #20]

    float I4 = U4 / Rs;                         // Courant (loi d'Ohm)
 8001af6:	edd7 6a00 	vldr	s13, [r7]
 8001afa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b02:	edc7 7a04 	vstr	s15, [r7, #16]

    float G = (I4 * N1 * N4) / U1;              // Conductance (Siemens)
 8001b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	edc7 7a03 	vstr	s15, [r7, #12]
    float sigma = G * (L / S);                  // Conductivité en S/m
 8001b26:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	edc7 7a02 	vstr	s15, [r7, #8]

    return sigma * 10.0f;                      // Conversion en mS/cm
 8001b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b42:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	372c      	adds	r7, #44	@ 0x2c
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	42a80000 	.word	0x42a80000
 8001b5c:	41200000 	.word	0x41200000
 8001b60:	3b9374bc 	.word	0x3b9374bc
 8001b64:	3913d966 	.word	0x3913d966

08001b68 <AmplitudeToVoltage>:

float AmplitudeToVoltage(float amplitude_fft, uint16_t N, float vref)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b72:	4603      	mov	r3, r0
 8001b74:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b78:	817b      	strh	r3, [r7, #10]
    float Ak = (2.0f / (float)N) * amplitude_fft;
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	edc7 7a05 	vstr	s15, [r7, #20]
    float tension = ((Ak * vref ) / 4096.0f) * 2;
 8001b98:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001bcc <AmplitudeToVoltage+0x64>
 8001ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc7 7a04 	vstr	s15, [r7, #16]

    return tension * 2;
 8001bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	45800000 	.word	0x45800000

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b091      	sub	sp, #68	@ 0x44
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd6:	f000 fdf9 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001bda:	f000 f9e5 	bl	8001fa8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f96f 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f7ff fd87 	bl	80016f4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001be6:	f7ff fd65 	bl	80016b4 <MX_GPDMA1_Init>
  MX_I2C1_Init();
 8001bea:	f7ff feb5 	bl	8001958 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001bee:	f000 fc43 	bl	8002478 <MX_USART1_UART_Init>
  //MX_ICACHE_Init();
  MX_DAC1_Init();
 8001bf2:	f7ff fc47 	bl	8001484 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001bf6:	f000 fb69 	bl	80022cc <MX_TIM2_Init>
  MX_ADC4_Init();
 8001bfa:	f7ff fa3d 	bl	8001078 <MX_ADC4_Init>
  //MX_DCACHE1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_RTC_Init();
  MX_TIM15_Init();
 8001bfe:	f000 fbb1 	bl	8002364 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  printf(" >> Demarrage...\r\n");
 8001c02:	489f      	ldr	r0, [pc, #636]	@ (8001e80 <main+0x2b0>)
 8001c04:	f00d fe46 	bl	800f894 <puts>
  _fx_system_initialize();
 8001c08:	f00b f808 	bl	800cc1c <_fx_system_initialize>
  //MX_USB_DEVICE_Init();

  // Initialisation FFT CMSIS
  arm_rfft_fast_init_f32(&fft_instance, FFT_SAMPLE_SIZE);
 8001c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c10:	489c      	ldr	r0, [pc, #624]	@ (8001e84 <main+0x2b4>)
 8001c12:	f00b f905 	bl	800ce20 <arm_rfft_fast_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // Phase 1 : génération sinusoïde
	    GenerateSineTable();
 8001c16:	f7ff fce7 	bl	80015e8 <GenerateSineTable>
	    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	489a      	ldr	r0, [pc, #616]	@ (8001e88 <main+0x2b8>)
 8001c1e:	f003 fc2f 	bl	8005480 <HAL_DAC_Start>
	    HAL_TIM_Base_Start(&htim15);
 8001c22:	489a      	ldr	r0, [pc, #616]	@ (8001e8c <main+0x2bc>)
 8001c24:	f009 fe02 	bl	800b82c <HAL_TIM_Base_Start>

	    uint32_t start_tick = HAL_GetTick();
 8001c28:	f000 fe8a 	bl	8002940 <HAL_GetTick>
 8001c2c:	6338      	str	r0, [r7, #48]	@ 0x30
	    uint32_t last_tick = __HAL_TIM_GET_COUNTER(&htim15);
 8001c2e:	4b97      	ldr	r3, [pc, #604]	@ (8001e8c <main+0x2bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    uint16_t i = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	877b      	strh	r3, [r7, #58]	@ 0x3a

	    while ((HAL_GetTick() - start_tick) < 1000) // 100 ms = 1000 périodes
 8001c3a:	e020      	b.n	8001c7e <main+0xae>
	    {
	        uint32_t now = __HAL_TIM_GET_COUNTER(&htim15);
 8001c3c:	4b93      	ldr	r3, [pc, #588]	@ (8001e8c <main+0x2bc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	607b      	str	r3, [r7, #4]
	        if ((now - last_tick) >= 1)
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d018      	beq.n	8001c7e <main+0xae>
	        {
	            last_tick = now;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	            HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_wave[i]);
 8001c50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001c52:	4a8f      	ldr	r2, [pc, #572]	@ (8001e90 <main+0x2c0>)
 8001c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	488a      	ldr	r0, [pc, #552]	@ (8001e88 <main+0x2b8>)
 8001c5e:	f003 fc9d 	bl	800559c <HAL_DAC_SetValue>
	            i = (i + 1) % DAC_BUFFER_SIZE;
 8001c62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a8b      	ldr	r2, [pc, #556]	@ (8001e94 <main+0x2c4>)
 8001c68:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6c:	1151      	asrs	r1, r2, #5
 8001c6e:	17da      	asrs	r2, r3, #31
 8001c70:	1a8a      	subs	r2, r1, r2
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	fb01 f202 	mul.w	r2, r1, r2
 8001c78:	1a9a      	subs	r2, r3, r2
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	    while ((HAL_GetTick() - start_tick) < 1000) // 100 ms = 1000 périodes
 8001c7e:	f000 fe5f 	bl	8002940 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c8c:	d3d6      	bcc.n	8001c3c <main+0x6c>
	        }
	    }

	    // Phase 2 : démarrage acquisition ADC pendant que la sinusoïde continue
	    ADC_Start();
 8001c8e:	f7ff fbdb 	bl	8001448 <ADC_Start>

	    i = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	877b      	strh	r3, [r7, #58]	@ 0x3a
	    fft_ready = 0;
 8001c96:	4b80      	ldr	r3, [pc, #512]	@ (8001e98 <main+0x2c8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

	    while (fft_ready == 0)
 8001c9c:	e020      	b.n	8001ce0 <main+0x110>
	    {
	        uint32_t now = __HAL_TIM_GET_COUNTER(&htim15);
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <main+0x2bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	60bb      	str	r3, [r7, #8]
	        if ((now - last_tick) >= 1)
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d018      	beq.n	8001ce0 <main+0x110>
	        {
	            last_tick = now;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	            HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_wave[i]);
 8001cb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001cb4:	4a76      	ldr	r2, [pc, #472]	@ (8001e90 <main+0x2c0>)
 8001cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4872      	ldr	r0, [pc, #456]	@ (8001e88 <main+0x2b8>)
 8001cc0:	f003 fc6c 	bl	800559c <HAL_DAC_SetValue>
	            i = (i + 1) % DAC_BUFFER_SIZE;
 8001cc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4a72      	ldr	r2, [pc, #456]	@ (8001e94 <main+0x2c4>)
 8001cca:	fb82 1203 	smull	r1, r2, r2, r3
 8001cce:	1151      	asrs	r1, r2, #5
 8001cd0:	17da      	asrs	r2, r3, #31
 8001cd2:	1a8a      	subs	r2, r1, r2
 8001cd4:	2164      	movs	r1, #100	@ 0x64
 8001cd6:	fb01 f202 	mul.w	r2, r1, r2
 8001cda:	1a9a      	subs	r2, r3, r2
 8001cdc:	4613      	mov	r3, r2
 8001cde:	877b      	strh	r3, [r7, #58]	@ 0x3a
	    while (fft_ready == 0)
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e98 <main+0x2c8>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0d9      	beq.n	8001c9e <main+0xce>
	        }
	    }

	    // Phase 3 : arrêt sinusoïde une fois acquisition DMA terminée
        HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4866      	ldr	r0, [pc, #408]	@ (8001e88 <main+0x2b8>)
 8001cee:	f003 fc33 	bl	8005558 <HAL_DAC_Stop>
        HAL_TIM_Base_Stop(&htim15);
 8001cf2:	4866      	ldr	r0, [pc, #408]	@ (8001e8c <main+0x2bc>)
 8001cf4:	f009 fe32 	bl	800b95c <HAL_TIM_Base_Stop>
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_wave[0]);
 8001cf8:	4b65      	ldr	r3, [pc, #404]	@ (8001e90 <main+0x2c0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4861      	ldr	r0, [pc, #388]	@ (8001e88 <main+0x2b8>)
 8001d02:	f003 fc4b 	bl	800559c <HAL_DAC_SetValue>

        // Phase 4 : traitement FFT
        for (uint16_t i = 0; i < FFT_SAMPLE_SIZE; i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001d0a:	e021      	b.n	8001d50 <main+0x180>
            adc4_in_f32[i] = (float32_t)adc4_raw_samples[2*i];
 8001d0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4a62      	ldr	r2, [pc, #392]	@ (8001e9c <main+0x2cc>)
 8001d12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d18:	ee07 2a90 	vmov	s15, r2
 8001d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea0 <main+0x2d0>)
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	edc3 7a00 	vstr	s15, [r3]
            adc4_out_f32[i] = (float32_t)adc4_raw_samples[2*i + 1];
 8001d2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a5a      	ldr	r2, [pc, #360]	@ (8001e9c <main+0x2cc>)
 8001d32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d36:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d38:	ee07 2a90 	vmov	s15, r2
 8001d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d40:	4a58      	ldr	r2, [pc, #352]	@ (8001ea4 <main+0x2d4>)
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t i = 0; i < FFT_SAMPLE_SIZE; i++) {
 8001d4a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001d50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d56:	d3d9      	bcc.n	8001d0c <main+0x13c>
        }

        arm_rfft_fast_f32(&fft_instance, adc4_in_f32, fft_output_in, 0);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ea8 <main+0x2d8>)
 8001d5c:	4950      	ldr	r1, [pc, #320]	@ (8001ea0 <main+0x2d0>)
 8001d5e:	4849      	ldr	r0, [pc, #292]	@ (8001e84 <main+0x2b4>)
 8001d60:	f00b f94c 	bl	800cffc <arm_rfft_fast_f32>
        arm_rfft_fast_f32(&fft_instance, adc4_out_f32, fft_output_out, 0);
 8001d64:	2300      	movs	r3, #0
 8001d66:	4a51      	ldr	r2, [pc, #324]	@ (8001eac <main+0x2dc>)
 8001d68:	494e      	ldr	r1, [pc, #312]	@ (8001ea4 <main+0x2d4>)
 8001d6a:	4846      	ldr	r0, [pc, #280]	@ (8001e84 <main+0x2b4>)
 8001d6c:	f00b f946 	bl	800cffc <arm_rfft_fast_f32>

        for (uint16_t i = 0; i < FFT_SAMPLE_SIZE / 2; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001d74:	e04c      	b.n	8001e10 <main+0x240>
        {
            float re_in = fft_output_in[2*i];
 8001d76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea8 <main+0x2d8>)
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	61bb      	str	r3, [r7, #24]
            float im_in = fft_output_in[2*i + 1];
 8001d84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a47      	ldr	r2, [pc, #284]	@ (8001ea8 <main+0x2d8>)
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]
            fft_amplitude_in[i] = sqrtf(re_in * re_in + im_in * im_in);
 8001d94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d98:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 8001daa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dae:	f00c f81b 	bl	800dde8 <sqrtf>
 8001db2:	eef0 7a40 	vmov.f32	s15, s0
 8001db6:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <main+0x2e0>)
 8001db8:	00a3      	lsls	r3, r4, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	edc3 7a00 	vstr	s15, [r3]

            float re_out = fft_output_out[2*i];
 8001dc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4a39      	ldr	r2, [pc, #228]	@ (8001eac <main+0x2dc>)
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
            float im_out = fft_output_out[2*i + 1];
 8001dce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a35      	ldr	r2, [pc, #212]	@ (8001eac <main+0x2dc>)
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
            fft_amplitude_out[i] = sqrtf(re_out*re_out + im_out*im_out);
 8001dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 8001df4:	eeb0 0a67 	vmov.f32	s0, s15
 8001df8:	f00b fff6 	bl	800dde8 <sqrtf>
 8001dfc:	eef0 7a40 	vmov.f32	s15, s0
 8001e00:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb4 <main+0x2e4>)
 8001e02:	00a3      	lsls	r3, r4, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t i = 0; i < FFT_SAMPLE_SIZE / 2; i++)
 8001e0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001e10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e16:	d3ae      	bcc.n	8001d76 <main+0x1a6>
        }

        // Extraction de l'amplitude à 10 kHz (index 330 si F=30kHz, N=2048)
        float amp_in = fft_amplitude_in[330];
 8001e18:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <main+0x2e0>)
 8001e1a:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        float amp_out = fft_amplitude_out[330];
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <main+0x2e4>)
 8001e24:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28

        float u1 = AmplitudeToVoltage(amp_in, FFT_SAMPLE_SIZE, VREF);
 8001e2c:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001eb8 <main+0x2e8>
 8001e30:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e34:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001e38:	f7ff fe96 	bl	8001b68 <AmplitudeToVoltage>
 8001e3c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float u4 = AmplitudeToVoltage(amp_out, FFT_SAMPLE_SIZE, VREF);
 8001e40:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001eb8 <main+0x2e8>
 8001e44:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e48:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001e4c:	f7ff fe8c 	bl	8001b68 <AmplitudeToVoltage>
 8001e50:	ed87 0a08 	vstr	s0, [r7, #32]
        //printf("U1 = %.4f mV | U4 = %.4f mV\r\n", u1 * 1000.0f, u4 * 1000.0f);

        float cond = Calcul_Conductivite(u1, u4);
 8001e54:	edd7 0a08 	vldr	s1, [r7, #32]
 8001e58:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001e5c:	f7ff fe3a 	bl	8001ad4 <Calcul_Conductivite>
 8001e60:	ed87 0a07 	vstr	s0, [r7, #28]
        printf("Conductivite = %.3f mS/cm\r\n", cond);
 8001e64:	69f8      	ldr	r0, [r7, #28]
 8001e66:	f7fe fb73 	bl	8000550 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4813      	ldr	r0, [pc, #76]	@ (8001ebc <main+0x2ec>)
 8001e70:	f00d fca8 	bl	800f7c4 <iprintf>

        // Attente entre deux acquisitions
        HAL_Delay(500); // attente avant prochaine mesure
 8001e74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e78:	f000 fd6e 	bl	8002958 <HAL_Delay>
  {
 8001e7c:	e6cb      	b.n	8001c16 <main+0x46>
 8001e7e:	bf00      	nop
 8001e80:	08013038 	.word	0x08013038
 8001e84:	200001f4 	.word	0x200001f4
 8001e88:	2000c414 	.word	0x2000c414
 8001e8c:	2000c4cc 	.word	0x2000c4cc
 8001e90:	2000c34c 	.word	0x2000c34c
 8001e94:	51eb851f 	.word	0x51eb851f
 8001e98:	200001f0 	.word	0x200001f0
 8001e9c:	2000020c 	.word	0x2000020c
 8001ea0:	2000220c 	.word	0x2000220c
 8001ea4:	2000420c 	.word	0x2000420c
 8001ea8:	2000620c 	.word	0x2000620c
 8001eac:	2000820c 	.word	0x2000820c
 8001eb0:	2000a20c 	.word	0x2000a20c
 8001eb4:	2000b20c 	.word	0x2000b20c
 8001eb8:	40533333 	.word	0x40533333
 8001ebc:	0801304c 	.word	0x0801304c

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09e      	sub	sp, #120	@ 0x78
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	2260      	movs	r2, #96	@ 0x60
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00d fde2 	bl	800fa98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ee4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001ee8:	f005 fc0e 	bl	8007708 <HAL_PWREx_ControlVoltageScaling>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001ef2:	f000 f897 	bl	8002024 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ef6:	f005 fb79 	bl	80075ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001efa:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <SystemClock_Config+0xe4>)
 8001efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f00:	4a28      	ldr	r2, [pc, #160]	@ (8001fa4 <SystemClock_Config+0xe4>)
 8001f02:	f023 0318 	bic.w	r3, r3, #24
 8001f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001f0a:	231e      	movs	r3, #30
 8001f0c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f0e:	2381      	movs	r3, #129	@ 0x81
 8001f10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f18:	2310      	movs	r3, #16
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f1c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f22:	2301      	movs	r3, #1
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f26:	2310      	movs	r3, #16
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f32:	2302      	movs	r3, #2
 8001f34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f36:	2301      	movs	r3, #1
 8001f38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001f3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001f40:	2303      	movs	r3, #3
 8001f42:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001f44:	2310      	movs	r3, #16
 8001f46:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 3;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001f54:	230c      	movs	r3, #12
 8001f56:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fcbd 	bl	80078e0 <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001f6c:	f000 f85a 	bl	8002024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f70:	231f      	movs	r3, #31
 8001f72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	2303      	movs	r3, #3
 8001f76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f006 fb81 	bl	8008694 <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001f98:	f000 f844 	bl	8002024 <Error_Handler>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3778      	adds	r7, #120	@ 0x78
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	46020c00 	.word	0x46020c00

08001fa8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8001fb6:	23c0      	movs	r3, #192	@ 0xc0
 8001fb8:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f005 fb23 	bl	800760c <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8001fc6:	f005 fb8f 	bl	80076e8 <HAL_PWR_EnablePVD>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f005 fc28 	bl	8007820 <HAL_PWREx_ConfigSupply>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemPower_Config+0x32>
  {
    Error_Handler();
 8001fd6:	f000 f825 	bl	8002024 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e00a      	b.n	800200c <_write+0x28>
  {
//    ITM_SendChar(*ptr++);
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr++, 1, 100);
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	1c4b      	adds	r3, r1, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	2364      	movs	r3, #100	@ 0x64
 8001ffe:	2201      	movs	r2, #1
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <_write+0x3c>)
 8002002:	f00a f8a9 	bl	800c158 <HAL_UART_Transmit>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf0      	blt.n	8001ff6 <_write+0x12>
  }
  return len;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000c518 	.word	0x2000c518

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  NVIC_SystemReset();
 800202c:	f7ff fd3c 	bl	8001aa8 <__NVIC_SystemReset>

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_MspInit+0x34>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203c:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_MspInit+0x34>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <HAL_MspInit+0x34>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002054:	f005 fc34 	bl	80078c0 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8002058:	f005 fc32 	bl	80078c0 <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	46020c00 	.word	0x46020c00

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <NMI_Handler+0x4>

08002070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <MemManage_Handler+0x4>

08002080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <UsageFault_Handler+0x4>

08002090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020be:	f000 fc2b 	bl	8002918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80020ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020ce:	f005 f91f 	bl	8007310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80020dc:	4803      	ldr	r0, [pc, #12]	@ (80020ec <GPDMA1_Channel0_IRQHandler+0x14>)
 80020de:	f003 fcc3 	bl	8005a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */
  fft_ready = 1;
 80020e2:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <GPDMA1_Channel0_IRQHandler+0x18>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000c2d4 	.word	0x2000c2d4
 80020f0:	200001f0 	.word	0x200001f0

080020f4 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 (12bits) global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <ADC4_IRQHandler+0x10>)
 80020fa:	f001 fba5 	bl	8003848 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000c20c 	.word	0x2000c20c

08002108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_kill>:

int _kill(int pid, int sig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002122:	f00d fd1b 	bl	800fb5c <__errno>
 8002126:	4603      	mov	r3, r0
 8002128:	2216      	movs	r2, #22
 800212a:	601a      	str	r2, [r3, #0]
  return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_exit>:

void _exit (int status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffe7 	bl	8002118 <_kill>
  while (1) {}    /* Make sure we hang here */
 800214a:	bf00      	nop
 800214c:	e7fd      	b.n	800214a <_exit+0x12>

0800214e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002160:	f3af 8000 	nop.w
 8002164:	4601      	mov	r1, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf0      	blt.n	8002160 <_read+0x12>
  }

  return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	605a      	str	r2, [r3, #4]
  return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_isatty>:

int _isatty(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	@ (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f00d fc9c 	bl	800fb5c <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200c0000 	.word	0x200c0000
 8002250:	00000400 	.word	0x00000400
 8002254:	2000c47c 	.word	0x2000c47c
 8002258:	2000c728 	.word	0x2000c728

0800225c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002260:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <SystemInit+0x68>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	4a17      	ldr	r2, [pc, #92]	@ (80022c4 <SystemInit+0x68>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <SystemInit+0x6c>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <SystemInit+0x6c>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <SystemInit+0x6c>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <SystemInit+0x6c>)
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <SystemInit+0x6c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <SystemInit+0x6c>)
 800228e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002292:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002296:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <SystemInit+0x6c>)
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <SystemInit+0x6c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <SystemInit+0x6c>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <SystemInit+0x6c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <SystemInit+0x68>)
 80022b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022b6:	609a      	str	r2, [r3, #8]
  #endif
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	46020c00 	.word	0x46020c00

080022cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <MX_TIM2_Init+0x94>)
 80022ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <MX_TIM2_Init+0x94>)
 80022f4:	224f      	movs	r2, #79	@ 0x4f
 80022f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <MX_TIM2_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25;
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <MX_TIM2_Init+0x94>)
 8002300:	2219      	movs	r2, #25
 8002302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <MX_TIM2_Init+0x94>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <MX_TIM2_Init+0x94>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002310:	4813      	ldr	r0, [pc, #76]	@ (8002360 <MX_TIM2_Init+0x94>)
 8002312:	f009 fa33 	bl	800b77c <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800231c:	f7ff fe82 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4619      	mov	r1, r3
 800232c:	480c      	ldr	r0, [pc, #48]	@ (8002360 <MX_TIM2_Init+0x94>)
 800232e:	f009 fb63 	bl	800b9f8 <HAL_TIM_ConfigClockSource>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002338:	f7ff fe74 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800233c:	2320      	movs	r3, #32
 800233e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	@ (8002360 <MX_TIM2_Init+0x94>)
 800234a:	f009 fdf3 	bl	800bf34 <HAL_TIMEx_MasterConfigSynchronization>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002354:	f7ff fe66 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000c480 	.word	0x2000c480

08002364 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002382:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <MX_TIM15_Init+0x9c>)
 8002384:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <MX_TIM15_Init+0xa0>)
 8002386:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 128-1;
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <MX_TIM15_Init+0x9c>)
 800238a:	227f      	movs	r2, #127	@ 0x7f
 800238c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <MX_TIM15_Init+0x9c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002394:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <MX_TIM15_Init+0x9c>)
 8002396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800239a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <MX_TIM15_Init+0x9c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80023a2:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <MX_TIM15_Init+0x9c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <MX_TIM15_Init+0x9c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80023ae:	4814      	ldr	r0, [pc, #80]	@ (8002400 <MX_TIM15_Init+0x9c>)
 80023b0:	f009 f9e4 	bl	800b77c <HAL_TIM_Base_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80023ba:	f7ff fe33 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	@ (8002400 <MX_TIM15_Init+0x9c>)
 80023cc:	f009 fb14 	bl	800b9f8 <HAL_TIM_ConfigClockSource>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80023d6:	f7ff fe25 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	@ (8002400 <MX_TIM15_Init+0x9c>)
 80023e8:	f009 fda4 	bl	800bf34 <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80023f2:	f7ff fe17 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000c4cc 	.word	0x2000c4cc
 8002404:	40014000 	.word	0x40014000

08002408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002418:	d10f      	bne.n	800243a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 800241c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002420:	4a13      	ldr	r2, [pc, #76]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800242a:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 800242c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002438:	e013      	b.n	8002462 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a0d      	ldr	r2, [pc, #52]	@ (8002474 <HAL_TIM_Base_MspInit+0x6c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d10e      	bne.n	8002462 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 8002446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002450:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_TIM_Base_MspInit+0x68>)
 8002456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	46020c00 	.word	0x46020c00
 8002474:	40014000 	.word	0x40014000

08002478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <MX_USART1_UART_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024c2:	f009 fdf9 	bl	800c0b8 <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7ff fdaa 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024d4:	f00a fad8 	bl	800ca88 <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7ff fda1 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024e6:	f00a fb0d 	bl	800cb04 <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7ff fd98 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <MX_USART1_UART_Init+0x90>)
 80024f6:	f00a fa8e 	bl	800ca16 <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002500:	f7ff fd90 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000c518 	.word	0x2000c518
 800250c:	40013800 	.word	0x40013800

08002510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0ba      	sub	sp, #232	@ 0xe8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	22c0      	movs	r2, #192	@ 0xc0
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00d fab1 	bl	800fa98 <memset>
  if(uartHandle->Instance==USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a26      	ldr	r2, [pc, #152]	@ (80025d4 <HAL_UART_MspInit+0xc4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d145      	bne.n	80025cc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002540:	f04f 0201 	mov.w	r2, #1
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800254c:	2302      	movs	r3, #2
 800254e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f006 fc71 	bl	8008e3c <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002560:	f7ff fd60 	bl	8002024 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 8002566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 8002576:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800257a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002588:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_UART_MspInit+0xc8>)
 8002594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|USART1_RX_Pin;
 80025a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ba:	2307      	movs	r3, #7
 80025bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4805      	ldr	r0, [pc, #20]	@ (80025dc <HAL_UART_MspInit+0xcc>)
 80025c8:	f004 fcb2 	bl	8006f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025cc:	bf00      	nop
 80025ce:	37e8      	adds	r7, #232	@ 0xe8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013800 	.word	0x40013800
 80025d8:	46020c00 	.word	0x46020c00
 80025dc:	42020000 	.word	0x42020000

080025e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002618 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e4:	f7ff fe3a 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025ea:	e003      	b.n	80025f4 <LoopCopyDataInit>

080025ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025f2:	3104      	adds	r1, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025f4:	480a      	ldr	r0, [pc, #40]	@ (8002620 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025fc:	d3f6      	bcc.n	80025ec <CopyDataInit>
	ldr	r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002600:	e002      	b.n	8002608 <LoopFillZerobss>

08002602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:

	movs	r3, #0
 8002602:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002604:	f842 3b04 	str.w	r3, [r2], #4

08002608 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <LoopForever+0x16>)
	cmp	r2, r3
 800260a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800260c:	d3f9      	bcc.n	8002602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260e:	f00d faab 	bl	800fb68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002612:	f7ff fadd 	bl	8001bd0 <main>

08002616 <LoopForever>:

LoopForever:
    b LoopForever
 8002616:	e7fe      	b.n	8002616 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002618:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800261c:	08030ddc 	.word	0x08030ddc
	ldr	r0, =_sdata
 8002620:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002624:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002628:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 800262c:	2000c724 	.word	0x2000c724

08002630 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC1_IRQHandler>

08002632 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002640:	b672      	cpsid	i
}
 8002642:	bf00      	nop
 8002644:	f7ff fcee 	bl	8002024 <Error_Handler>
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <stm32_lock_init+0x16>
  lock->flag = 0;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	705a      	strb	r2, [r3, #1]
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002668:	f3ef 8310 	mrs	r3, PRIMASK
 800266c:	60bb      	str	r3, [r7, #8]
  return(result);
 800266e:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800267c:	f3bf 8f4f 	dsb	sy
}
 8002680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002682:	f3bf 8f6f 	isb	sy
}
 8002686:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800268e:	b672      	cpsid	i
}
 8002690:	bf00      	nop
 8002692:	f7ff fcc7 	bl	8002024 <Error_Handler>
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e009      	b.n	80026be <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2bff      	cmp	r3, #255	@ 0xff
 80026b0:	d105      	bne.n	80026be <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 80026b2:	b672      	cpsid	i
}
 80026b4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80026b6:	f7ff fcb5 	bl	8002024 <Error_Handler>
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	3301      	adds	r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	705a      	strb	r2, [r3, #1]
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
 80026e4:	f7ff fc9e 	bl	8002024 <Error_Handler>
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80026f8:	f7ff fc94 	bl	8002024 <Error_Handler>
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	3b01      	subs	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <stm32_lock_release+0x4e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 800271c:	b662      	cpsie	i
}
 800271e:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002736:	f00d fa11 	bl	800fb5c <__errno>
 800273a:	4603      	mov	r3, r0
 800273c:	2216      	movs	r2, #22
 800273e:	601a      	str	r2, [r3, #0]
    return;
 8002740:	e016      	b.n	8002770 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002742:	2002      	movs	r0, #2
 8002744:	f00c f860 	bl	800e808 <malloc>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff68 	bl	8002632 <stm32_lock_init>
    return;
 8002762:	e005      	b.n	8002770 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002768:	f7ff fc5c 	bl	8002024 <Error_Handler>
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <__retarget_lock_init_recursive+0x44>
}
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
 8002788:	f7ff fc4c 	bl	8002024 <Error_Handler>
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff64 	bl	8002660 <stm32_lock_acquire>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80027ae:	b672      	cpsid	i
}
 80027b0:	bf00      	nop
 80027b2:	f7ff fc37 	bl	8002024 <Error_Handler>
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff88 	bl	80026d2 <stm32_lock_release>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_Init+0x50>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a11      	ldr	r2, [pc, #68]	@ (800281c <HAL_Init+0x50>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f002 fd46 	bl	800526e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027e2:	f006 f949 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <HAL_Init+0x54>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <HAL_Init+0x58>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002828 <HAL_Init+0x5c>)
 80027fa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027fc:	2004      	movs	r0, #4
 80027fe:	f002 fd8b 	bl	8005318 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f812 	bl	800282c <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e002      	b.n	8002818 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7ff fc0d 	bl	8002030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40022000 	.word	0x40022000
 8002820:	46020c00 	.word	0x46020c00
 8002824:	08013068 	.word	0x08013068
 8002828:	20000000 	.word	0x20000000

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002838:	4b33      	ldr	r3, [pc, #204]	@ (8002908 <HAL_InitTick+0xdc>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e05c      	b.n	80028fe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <HAL_InitTick+0xe0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d10c      	bne.n	800286a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002850:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <HAL_InitTick+0xe4>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b2c      	ldr	r3, [pc, #176]	@ (8002908 <HAL_InitTick+0xdc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e037      	b.n	80028da <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800286a:	f002 fdad 	bl	80053c8 <HAL_SYSTICK_GetCLKSourceConfig>
 800286e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d023      	beq.n	80028be <HAL_InitTick+0x92>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d82d      	bhi.n	80028d8 <HAL_InitTick+0xac>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_InitTick+0x5e>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d00d      	beq.n	80028a4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002888:	e026      	b.n	80028d8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800288a:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <HAL_InitTick+0xe4>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_InitTick+0xdc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002898:	fbb3 f3f1 	udiv	r3, r3, r1
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	e01a      	b.n	80028da <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028a4:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_InitTick+0xdc>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80028b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	60fb      	str	r3, [r7, #12]
        break;
 80028bc:	e00d      	b.n	80028da <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_InitTick+0xdc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	60fb      	str	r3, [r7, #12]
        break;
 80028d6:	e000      	b.n	80028da <HAL_InitTick+0xae>
        break;
 80028d8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f002 fcfa 	bl	80052d4 <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e009      	b.n	80028fe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ea:	2200      	movs	r2, #0
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	f04f 30ff 	mov.w	r0, #4294967295
 80028f2:	f002 fcc7 	bl	8005284 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_InitTick+0xe8>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008
 800290c:	e000e010 	.word	0xe000e010
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_IncTick+0x20>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_IncTick+0x24>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4413      	add	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	@ (800293c <HAL_IncTick+0x24>)
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000008 	.word	0x20000008
 800293c:	2000c5b4 	.word	0x2000c5b4

08002940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return uwTick;
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <HAL_GetTick+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	2000c5b4 	.word	0x2000c5b4

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff ffee 	bl	8002940 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d005      	beq.n	800297e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_Delay+0x44>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297e:	bf00      	nop
 8002980:	f7ff ffde 	bl	8002940 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f7      	bhi.n	8002980 <HAL_Delay+0x28>
  {
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <HAL_GetREVID+0x18>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b29b      	uxth	r3, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e0044000 	.word	0xe0044000

080029bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <LL_ADC_SetResolution+0x3c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d104      	bne.n	8002a44 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f023 020c 	bic.w	r2, r3, #12
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	46021000 	.word	0x46021000

08002a64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3360      	adds	r3, #96	@ 0x60
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	430b      	orrs	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3360      	adds	r3, #96	@ 0x60
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0edb      	lsrs	r3, r3, #27
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d807      	bhi.n	8002ae0 <LL_ADC_GetOffsetChannel+0x3a>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	069a      	lsls	r2, r3, #26
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	4313      	orrs	r3, r2
 8002ade:	e008      	b.n	8002af2 <LL_ADC_GetOffsetChannel+0x4c>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	069a      	lsls	r2, r3, #26
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3360      	adds	r3, #96	@ 0x60
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3360      	adds	r3, #96	@ 0x60
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3360      	adds	r3, #96	@ 0x60
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d002      	beq.n	8002bd2 <LL_ADC_SetGainCompensation+0x32>
 8002bcc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bd0:	e000      	b.n	8002bd4 <LL_ADC_SetGainCompensation+0x34>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d08 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d020      	beq.n	8002ca2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3330      	adds	r3, #48	@ 0x30
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	211f      	movs	r1, #31
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	f003 011f 	and.w	r1, r3, #31
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002ca0:	e02b      	b.n	8002cfa <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	210f      	movs	r1, #15
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	e010      	b.n	8002cec <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	613b      	str	r3, [r7, #16]
  return result;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	f001 011f 	and.w	r1, r1, #31
 8002cf2:	408b      	lsls	r3, r1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	46021000 	.word	0x46021000

08002d0c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2201      	movs	r2, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	e015      	b.n	8002d5c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
  return result;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2201      	movs	r2, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b08b      	sub	sp, #44	@ 0x2c
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d042      	beq.n	8002e7e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <LL_ADC_SetChannelSamplingTime+0x28>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e011      	b.n	8002e30 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	617b      	str	r3, [r7, #20]
  return result;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e003      	b.n	8002e2e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	1ad2      	subs	r2, r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0e5b      	lsrs	r3, r3, #25
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	4413      	add	r3, r2
 8002e5c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2107      	movs	r1, #7
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	431a      	orrs	r2, r3
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002e7c:	e00e      	b.n	8002e9c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0219      	lsls	r1, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	400b      	ands	r3, r1
 8002e92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	615a      	str	r2, [r3, #20]
}
 8002e9c:	bf00      	nop
 8002e9e:	372c      	adds	r7, #44	@ 0x2c
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	46021000 	.word	0x46021000

08002eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0318 	and.w	r3, r3, #24
 8002ece:	4908      	ldr	r1, [pc, #32]	@ (8002ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ed0:	40d9      	lsrs	r1, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	000fffff 	.word	0x000fffff

08002ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6093      	str	r3, [r2, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f7c:	d101      	bne.n	8002f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fcc:	f043 0202 	orr.w	r2, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <LL_ADC_IsEnabled+0x18>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_ADC_IsEnabled+0x1a>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d101      	bne.n	800301e <LL_ADC_IsDisableOngoing+0x18>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsDisableOngoing+0x1a>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003040:	f043 0204 	orr.w	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b04      	cmp	r3, #4
 8003066:	d101      	bne.n	800306c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d101      	bne.n	8003092 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e2b3      	b.n	8003628 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a8b      	ldr	r2, [pc, #556]	@ (80032fc <HAL_ADC_Init+0x25c>)
 80030ce:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f84d 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff11 	bl	8002f18 <LL_ADC_IsDeepPowerDownEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fef7 	bl	8002ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff2c 	bl	8002f68 <LL_ADC_IsInternalRegulatorEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff10 	bl	8002f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003120:	4b77      	ldr	r3, [pc, #476]	@ (8003300 <HAL_ADC_Init+0x260>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a77      	ldr	r2, [pc, #476]	@ (8003304 <HAL_ADC_Init+0x264>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003134:	e002      	b.n	800313c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff0e 	bl	8002f68 <LL_ADC_IsInternalRegulatorEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff6d 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 800317a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 8244 	bne.w	8003612 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8240 	bne.w	8003612 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003196:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800319a:	f043 0202 	orr.w	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff1a 	bl	8002fe0 <LL_ADC_IsEnabled>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d140      	bne.n	8003234 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a51      	ldr	r2, [pc, #324]	@ (80032fc <HAL_ADC_Init+0x25c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d028      	beq.n	800320e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a51      	ldr	r2, [pc, #324]	@ (8003308 <HAL_ADC_Init+0x268>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d109      	bne.n	80031da <HAL_ADC_Init+0x13a>
 80031c6:	4850      	ldr	r0, [pc, #320]	@ (8003308 <HAL_ADC_Init+0x268>)
 80031c8:	f7ff ff0a 	bl	8002fe0 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e008      	b.n	80031ec <HAL_ADC_Init+0x14c>
 80031da:	4848      	ldr	r0, [pc, #288]	@ (80032fc <HAL_ADC_Init+0x25c>)
 80031dc:	f7ff ff00 	bl	8002fe0 <LL_ADC_IsEnabled>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d021      	beq.n	8003234 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a44      	ldr	r2, [pc, #272]	@ (8003308 <HAL_ADC_Init+0x268>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x15e>
 80031fa:	4a44      	ldr	r2, [pc, #272]	@ (800330c <HAL_ADC_Init+0x26c>)
 80031fc:	e000      	b.n	8003200 <HAL_ADC_Init+0x160>
 80031fe:	4a44      	ldr	r2, [pc, #272]	@ (8003310 <HAL_ADC_Init+0x270>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7ff fbd8 	bl	80029bc <LL_ADC_SetCommonClock>
 800320c:	e012      	b.n	8003234 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f7ff fc03 	bl	8002a24 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800321e:	4b3c      	ldr	r3, [pc, #240]	@ (8003310 <HAL_ADC_Init+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800322e:	4938      	ldr	r1, [pc, #224]	@ (8003310 <HAL_ADC_Init+0x270>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a30      	ldr	r2, [pc, #192]	@ (80032fc <HAL_ADC_Init+0x25c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d010      	beq.n	8003260 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003244:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800324a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003250:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003258:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800325a:	4313      	orrs	r3, r2
 800325c:	623b      	str	r3, [r7, #32]
 800325e:	e030      	b.n	80032c2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7f1b      	ldrb	r3, [r3, #28]
 8003264:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800326c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800326e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003274:	2a00      	cmp	r2, #0
 8003276:	d002      	beq.n	800327e <HAL_ADC_Init+0x1de>
 8003278:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800327c:	e000      	b.n	8003280 <HAL_ADC_Init+0x1e0>
 800327e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003280:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003286:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da04      	bge.n	800329a <HAL_ADC_Init+0x1fa>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003298:	e001      	b.n	800329e <HAL_ADC_Init+0x1fe>
 800329a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800329e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4918      	ldr	r1, [pc, #96]	@ (8003308 <HAL_ADC_Init+0x268>)
 80032a6:	428b      	cmp	r3, r1
 80032a8:	d103      	bne.n	80032b2 <HAL_ADC_Init+0x212>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b0:	e003      	b.n	80032ba <HAL_ADC_Init+0x21a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80032ba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	4313      	orrs	r3, r2
 80032c0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d12f      	bne.n	800332c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_ADC_Init+0x25c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	3b01      	subs	r3, #1
 80032dc:	045b      	lsls	r3, r3, #17
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	e022      	b.n	800332c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	623b      	str	r3, [r7, #32]
 80032f8:	e018      	b.n	800332c <HAL_ADC_Init+0x28c>
 80032fa:	bf00      	nop
 80032fc:	46021000 	.word	0x46021000
 8003300:	20000000 	.word	0x20000000
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	42028000 	.word	0x42028000
 800330c:	42028308 	.word	0x42028308
 8003310:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a92      	ldr	r2, [pc, #584]	@ (800357c <HAL_ADC_Init+0x4dc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	4313      	orrs	r3, r2
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	4313      	orrs	r3, r2
 8003350:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b89      	ldr	r3, [pc, #548]	@ (8003580 <HAL_ADC_Init+0x4e0>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	430b      	orrs	r3, r1
 8003364:	60d3      	str	r3, [r2, #12]
 8003366:	e031      	b.n	80033cc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	4313      	orrs	r3, r2
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	4313      	orrs	r3, r2
 8003382:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b7e      	ldr	r3, [pc, #504]	@ (8003584 <HAL_ADC_Init+0x4e4>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6a39      	ldr	r1, [r7, #32]
 8003394:	430b      	orrs	r3, r1
 8003396:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	@ (800357c <HAL_ADC_Init+0x4dc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f000 8093 	beq.w	80034fe <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fe39 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 80033e2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fe46 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 80033ee:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d161      	bne.n	80034ba <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d15e      	bne.n	80034ba <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7f1b      	ldrb	r3, [r3, #28]
 8003400:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4960      	ldr	r1, [pc, #384]	@ (8003588 <HAL_ADC_Init+0x4e8>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d102      	bne.n	8003412 <HAL_ADC_Init+0x372>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	e002      	b.n	8003418 <HAL_ADC_Init+0x378>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003418:	4313      	orrs	r3, r2
 800341a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	6a39      	ldr	r1, [r7, #32]
 8003430:	430b      	orrs	r3, r1
 8003432:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7ff fbaa 	bl	8002ba0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003452:	2b01      	cmp	r3, #1
 8003454:	d11e      	bne.n	8003494 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <HAL_ADC_Init+0x4ec>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800346a:	0411      	lsls	r1, r2, #16
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003482:	0892      	lsrs	r2, r2, #2
 8003484:	430a      	orrs	r2, r1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	e007      	b.n	80034a4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10c      	bne.n	80034dc <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f023 010f 	bic.w	r1, r3, #15
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80034da:	e007      	b.n	80034ec <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020f 	bic.w	r2, r2, #15
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034f0:	f023 0303 	bic.w	r3, r3, #3
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034fc:	e092      	b.n	8003624 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003504:	2b01      	cmp	r3, #1
 8003506:	d111      	bne.n	800352c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003510:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003516:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800351c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	4313      	orrs	r3, r2
 8003522:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <HAL_ADC_Init+0x4f0>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	69f9      	ldr	r1, [r7, #28]
 800353c:	430b      	orrs	r3, r1
 800353e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003548:	461a      	mov	r2, r3
 800354a:	2100      	movs	r1, #0
 800354c:	f7ff fb4b 	bl	8002be6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003558:	461a      	mov	r2, r3
 800355a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800355e:	f7ff fb42 	bl	8002be6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d114      	bne.n	8003594 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f062 020f 	orn	r2, r2, #15
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28
 800357a:	e024      	b.n	80035c6 <HAL_ADC_Init+0x526>
 800357c:	46021000 	.word	0x46021000
 8003580:	fff0c013 	.word	0xfff0c013
 8003584:	ffde800d 	.word	0xffde800d
 8003588:	42028000 	.word	0x42028000
 800358c:	fc00f81e 	.word	0xfc00f81e
 8003590:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800359c:	d113      	bne.n	80035c6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	f003 031c 	and.w	r3, r3, #28
 80035b0:	f06f 020f 	mvn.w	r2, #15
 80035b4:	fa02 f103 	lsl.w	r1, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <HAL_ADC_Init+0x590>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10b      	bne.n	80035ee <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e0:	f023 0303 	bic.w	r3, r3, #3
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035ec:	e01a      	b.n	8003624 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f2:	f023 0312 	bic.w	r3, r3, #18
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003610:	e008      	b.n	8003624 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003628:	4618      	mov	r0, r3
 800362a:	3728      	adds	r7, #40	@ 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	833ffff3 	.word	0x833ffff3

08003634 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b0a2      	sub	sp, #136	@ 0x88
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fd05 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 80e9 	bne.w	8003824 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_ADC_Start_DMA+0x2c>
 800365c:	2302      	movs	r3, #2
 800365e:	e0e6      	b.n	800382e <HAL_ADC_Start_DMA+0x1fa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f001 fa33 	bl	8004ad4 <ADC_Enable>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003674:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003678:	2b00      	cmp	r3, #0
 800367a:	f040 80ce 	bne.w	800381a <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003682:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a68      	ldr	r2, [pc, #416]	@ (8003838 <HAL_ADC_Start_DMA+0x204>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d010      	beq.n	80036be <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ac:	f023 0206 	bic.w	r2, r3, #6
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036b4:	e006      	b.n	80036c4 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036bc:	e002      	b.n	80036c4 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	4a5c      	ldr	r2, [pc, #368]	@ (800383c <HAL_ADC_Start_DMA+0x208>)
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <HAL_ADC_Start_DMA+0x20c>)
 80036d2:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003844 <HAL_ADC_Start_DMA+0x210>)
 80036da:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	221c      	movs	r2, #28
 80036e2:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0210 	orr.w	r2, r2, #16
 80036fa:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a4d      	ldr	r2, [pc, #308]	@ (8003838 <HAL_ADC_Start_DMA+0x204>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d107      	bne.n	8003716 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d04f      	beq.n	80037c4 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	2b00      	cmp	r3, #0
 800372c:	d046      	beq.n	80037bc <HAL_ADC_Start_DMA+0x188>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d040      	beq.n	80037bc <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f002 fd25 	bl	8006198 <HAL_DMAEx_List_GetNodeConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e06a      	b.n	800382e <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	2b02      	cmp	r3, #2
 800375c:	d104      	bne.n	8003768 <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003766:	e00a      	b.n	800377e <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d104      	bne.n	8003778 <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003776:	e002      	b.n	800377e <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800378a:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fc48 	bl	8006044 <HAL_DMAEx_List_Start_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80037ba:	e028      	b.n	800380e <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80037c2:	e024      	b.n	800380e <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d104      	bne.n	80037d8 <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037d6:	e00c      	b.n	80037f2 <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d104      	bne.n	80037ec <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037ea:	e002      	b.n	80037f2 <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3340      	adds	r3, #64	@ 0x40
 80037fc:	4619      	mov	r1, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003804:	f002 f8d0 	bl	80059a8 <HAL_DMA_Start_IT>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fc0a 	bl	800302c <LL_ADC_REG_StartConversion>
 8003818:	e007      	b.n	800382a <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003822:	e002      	b.n	800382a <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 800382a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800382e:	4618      	mov	r0, r3
 8003830:	3788      	adds	r7, #136	@ 0x88
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	46021000 	.word	0x46021000
 800383c:	08004c73 	.word	0x08004c73
 8003840:	08004d4b 	.word	0x08004d4b
 8003844:	08004d67 	.word	0x08004d67

08003848 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_ADC_IRQHandler+0x56>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003888:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 fc35 	bl	8005100 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2202      	movs	r2, #2
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x6a>
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a4 	beq.w	8003a06 <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 809e 	beq.w	8003a06 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3d      	ldr	r2, [pc, #244]	@ (80039dc <HAL_ADC_IRQHandler+0x194>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d047      	beq.n	800397c <HAL_ADC_IRQHandler+0x134>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f997 	bl	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d07d      	beq.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
        }
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d174      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d16d      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fb97 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11a      	bne.n	8003962 <HAL_ADC_IRQHandler+0x11a>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 020c 	bic.w	r2, r2, #12
 800393a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003940:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800394c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d151      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003960:	e04a      	b.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	67da      	str	r2, [r3, #124]	@ 0x7c
 800397a:	e03d      	b.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff f94f 	bl	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d035      	beq.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d130      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d129      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fb53 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <HAL_ADC_IRQHandler+0x198>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020c 	bic.w	r2, r2, #12
 80039c2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	679a      	str	r2, [r3, #120]	@ 0x78
 80039d8:	e00e      	b.n	80039f8 <HAL_ADC_IRQHandler+0x1b0>
 80039da:	bf00      	nop
 80039dc:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fd0f 	bl	800141c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	220c      	movs	r2, #12
 8003a04:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bc0 <HAL_ADC_IRQHandler+0x378>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d06f      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x2a8>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x1dc>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_ADC_IRQHandler+0x1f0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d060      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x2a8>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05b      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x2a8>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x208>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f9b2 	bl	8002dbe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a5a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f8df 	bl	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a66:	60b8      	str	r0, [r7, #8]
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	613b      	str	r3, [r7, #16]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d035      	beq.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x248>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02d      	beq.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d128      	bne.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d121      	bne.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fae9 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003abc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ac2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_ADC_IRQHandler+0x29a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f001 faee 	bl	80050c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2260      	movs	r2, #96	@ 0x60
 8003aee:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d011      	beq.n	8003b1e <HAL_ADC_IRQHandler+0x2d6>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8d5 	bl	8003cc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x306>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x306>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f001 faca 	bl	80050d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x336>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x336>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f001 fabc 	bl	80050ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03d      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x3bc>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d038      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x3bc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x358>
    {
      overrun_error = 1UL;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e01b      	b.n	8003bd8 <HAL_ADC_IRQHandler+0x390>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	@ (8003bc0 <HAL_ADC_IRQHandler+0x378>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_ADC_IRQHandler+0x37c>
            overrun_error = 1UL;
          }
        }
#else
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	e00c      	b.n	8003bd8 <HAL_ADC_IRQHandler+0x390>
 8003bbe:	bf00      	nop
 8003bc0:	46021000 	.word	0x46021000
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff f8ea 	bl	8002da2 <LL_ADC_REG_GetDMATransfer>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10e      	bne.n	8003bfc <HAL_ADC_IRQHandler+0x3b4>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f86c 	bl	8003cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2210      	movs	r2, #16
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x3fe>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_ADC_IRQHandler+0x3e8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f86d 	bl	8003d10 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_ADC_IRQHandler+0x460>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d126      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x456>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x42c>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x42c>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f83f 	bl	8003ce8 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00f      	beq.n	8003c9e <HAL_ADC_IRQHandler+0x456>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_ADC_IRQHandler+0x456>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f837 	bl	8003cfc <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c9c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	46021000 	.word	0x46021000

08003cac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0bc      	sub	sp, #240	@ 0xf0
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa8      	ldr	r2, [pc, #672]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d103      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x36>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f000 beb5 	b.w	8004ac4 <HAL_ADC_ConfigChannel+0xda0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f974 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 8695 	bne.w	8004a9e <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a99      	ldr	r2, [pc, #612]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f000 83ea 	beq.w	8004554 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x7a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	e01d      	b.n	8003dda <HAL_ADC_ConfigChannel+0xb6>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8003db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 8003dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e004      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	69d1      	ldr	r1, [r2, #28]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f7fe ff29 	bl	8002c4c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f928 	bl	8003054 <LL_ADC_REG_IsConversionOngoing>
 8003e04:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f934 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 8003e12:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 81ed 	bne.w	80041fa <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 81e8 	bne.w	80041fa <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7fe ffd4 	bl	8002de4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d046      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	f7fe fdf9 	bl	8002a64 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6919      	ldr	r1, [r3, #16]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f7fe fe3d 	bl	8002afe <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7e9b      	ldrb	r3, [r3, #26]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11e      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x17e>
 8003e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ea0:	e000      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x180>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f7fe fe60 	bl	8002b6a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x19c>
 8003eba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003ebe:	e000      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x19e>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fe fe36 	bl	8002b34 <LL_ADC_SetOffsetSignedSaturation>
 8003ec8:	e197      	b.n	80041fa <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fe fe48 	bl	8002b6a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fe fe25 	bl	8002b34 <LL_ADC_SetOffsetSignedSaturation>
 8003eea:	e186      	b.n	80041fa <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fdd7 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1f4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fdcc 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	0e9b      	lsrs	r3, r3, #26
 8003f12:	f003 021f 	and.w	r2, r3, #31
 8003f16:	e01e      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x232>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fdc1 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8003f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003f46:	2320      	movs	r3, #32
 8003f48:	e004      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x24a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0e9b      	lsrs	r3, r3, #26
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	e018      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x27c>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003f92:	2320      	movs	r3, #32
 8003f94:	e004      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d107      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2300      	movs	r3, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f7fe fd58 	bl	8002a64 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fd73 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x2c0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fd68 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	0e9b      	lsrs	r3, r3, #26
 8003fda:	f003 021f 	and.w	r2, r3, #31
 8003fde:	e020      	b.n	8004022 <HAL_ADC_ConfigChannel+0x2fe>
 8003fe0:	46021000 	.word	0x46021000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fd5b 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800400a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e004      	b.n	8004020 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_ADC_ConfigChannel+0x316>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	e018      	b.n	800406c <HAL_ADC_ConfigChannel+0x348>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800404e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e004      	b.n	800406c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800406c:	429a      	cmp	r2, r3
 800406e:	d107      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	2101      	movs	r1, #1
 800407c:	f7fe fcf2 	bl	8002a64 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fd0d 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x388>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fd02 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	f003 021f 	and.w	r2, r3, #31
 80040aa:	e01e      	b.n	80040ea <HAL_ADC_ConfigChannel+0x3c6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fcf7 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80040ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80040d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80040da:	2320      	movs	r3, #32
 80040dc:	e004      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80040de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x3de>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	e018      	b.n	8004134 <HAL_ADC_ConfigChannel+0x410>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004116:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800411a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800411e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e004      	b.n	8004134 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2300      	movs	r3, #0
 8004142:	2102      	movs	r1, #2
 8004144:	f7fe fc8e 	bl	8002a64 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2103      	movs	r1, #3
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fca9 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x450>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2103      	movs	r1, #3
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fc9e 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 800416a:	4603      	mov	r3, r0
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	f003 021f 	and.w	r2, r3, #31
 8004172:	e01a      	b.n	80041aa <HAL_ADC_ConfigChannel+0x486>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2103      	movs	r1, #3
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fc93 	bl	8002aa6 <LL_ADC_GetOffsetChannel>
 8004180:	4603      	mov	r3, r0
 8004182:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800418c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800418e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004192:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 800419a:	2320      	movs	r3, #32
 800419c:	e004      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 800419e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x49e>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	e011      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x4c2>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80041d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80041da:	2320      	movs	r3, #32
 80041dc:	e003      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80041de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d107      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2103      	movs	r1, #3
 80041f6:	f7fe fc35 	bl	8002a64 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe feee 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 8456 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	461a      	mov	r2, r3
 800421a:	f7fe fe47 	bl	8002eac <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004226:	f040 80d6 	bne.w	80043d6 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_ADC_ConfigChannel+0x52a>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	0e9b      	lsrs	r3, r3, #26
 800423c:	3301      	adds	r3, #1
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2b09      	cmp	r3, #9
 8004244:	bf94      	ite	ls
 8004246:	2301      	movls	r3, #1
 8004248:	2300      	movhi	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e019      	b.n	8004282 <HAL_ADC_ConfigChannel+0x55e>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800425c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800425e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8004266:	2320      	movs	r3, #32
 8004268:	e003      	b.n	8004272 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800426a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2b09      	cmp	r3, #9
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04d      	beq.n	8004322 <HAL_ADC_ConfigChannel+0x5fe>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x57e>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	3301      	adds	r3, #1
 800429a:	069b      	lsls	r3, r3, #26
 800429c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a0:	e015      	b.n	80042ce <HAL_ADC_ConfigChannel+0x5aa>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e003      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80042be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042c0:	fab3 f383 	clz	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	069b      	lsls	r3, r3, #26
 80042ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x5ca>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	3301      	adds	r3, #1
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2101      	movs	r1, #1
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	e017      	b.n	800431e <HAL_ADC_ConfigChannel+0x5fa>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8004306:	2320      	movs	r3, #32
 8004308:	e003      	b.n	8004312 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800430a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430c:	fab3 f383 	clz	r3, r3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3301      	adds	r3, #1
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	4313      	orrs	r3, r2
 8004320:	e04e      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x69c>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_ADC_ConfigChannel+0x61a>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	0e9b      	lsrs	r3, r3, #26
 8004334:	3301      	adds	r3, #1
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800433c:	e015      	b.n	800436a <HAL_ADC_ConfigChannel+0x646>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800434c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8004356:	2320      	movs	r3, #32
 8004358:	e003      	b.n	8004362 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800435a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	3301      	adds	r3, #1
 8004364:	069b      	lsls	r3, r3, #26
 8004366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <HAL_ADC_ConfigChannel+0x666>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	3301      	adds	r3, #1
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	e017      	b.n	80043ba <HAL_ADC_ConfigChannel+0x696>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800439c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e003      	b.n	80043ae <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80043d2:	f7fe fd07 	bl	8002de4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f280 836c 	bge.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a97      	ldr	r2, [pc, #604]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x6ca>
 80043ea:	4b97      	ldr	r3, [pc, #604]	@ (8004648 <HAL_ADC_ConfigChannel+0x924>)
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x6cc>
 80043ee:	4b97      	ldr	r3, [pc, #604]	@ (800464c <HAL_ADC_ConfigChannel+0x928>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fb09 	bl	8002a08 <LL_ADC_GetCommonPathInternalCh>
 80043f6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a91      	ldr	r2, [pc, #580]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d109      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x6f4>
 8004404:	488f      	ldr	r0, [pc, #572]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 8004406:	f7fe fdeb 	bl	8002fe0 <LL_ADC_IsEnabled>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e008      	b.n	800442a <HAL_ADC_ConfigChannel+0x706>
 8004418:	488d      	ldr	r0, [pc, #564]	@ (8004650 <HAL_ADC_ConfigChannel+0x92c>)
 800441a:	f7fe fde1 	bl	8002fe0 <LL_ADC_IsEnabled>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8088 	beq.w	8004540 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a87      	ldr	r2, [pc, #540]	@ (8004654 <HAL_ADC_ConfigChannel+0x930>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d132      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d12c      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7e      	ldr	r2, [pc, #504]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d005      	beq.n	800445c <HAL_ADC_ConfigChannel+0x738>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7e      	ldr	r2, [pc, #504]	@ (8004650 <HAL_ADC_ConfigChannel+0x92c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f040 832b 	bne.w	8004ab2 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a78      	ldr	r2, [pc, #480]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_ADC_ConfigChannel+0x746>
 8004466:	4a78      	ldr	r2, [pc, #480]	@ (8004648 <HAL_ADC_ConfigChannel+0x924>)
 8004468:	e000      	b.n	800446c <HAL_ADC_ConfigChannel+0x748>
 800446a:	4a78      	ldr	r2, [pc, #480]	@ (800464c <HAL_ADC_ConfigChannel+0x928>)
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe fab3 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800447c:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <HAL_ADC_ConfigChannel+0x934>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	4a76      	ldr	r2, [pc, #472]	@ (800465c <HAL_ADC_ConfigChannel+0x938>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800448e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004490:	e002      	b.n	8004498 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3b01      	subs	r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f9      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800449e:	e308      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004660 <HAL_ADC_ConfigChannel+0x93c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d121      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11b      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a62      	ldr	r2, [pc, #392]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d005      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x7a8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a62      	ldr	r2, [pc, #392]	@ (8004650 <HAL_ADC_ConfigChannel+0x92c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f040 82f5 	bne.w	8004ab6 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x7b6>
 80044d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004648 <HAL_ADC_ConfigChannel+0x924>)
 80044d8:	e000      	b.n	80044dc <HAL_ADC_ConfigChannel+0x7b8>
 80044da:	4a5c      	ldr	r2, [pc, #368]	@ (800464c <HAL_ADC_ConfigChannel+0x928>)
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7fe fa7b 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ec:	e2e3      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004664 <HAL_ADC_ConfigChannel+0x940>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	f040 82df 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 82d8 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a4d      	ldr	r2, [pc, #308]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d005      	beq.n	800451e <HAL_ADC_ConfigChannel+0x7fa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4e      	ldr	r2, [pc, #312]	@ (8004650 <HAL_ADC_ConfigChannel+0x92c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	f040 82cd 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a48      	ldr	r2, [pc, #288]	@ (8004644 <HAL_ADC_ConfigChannel+0x920>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x808>
 8004528:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <HAL_ADC_ConfigChannel+0x924>)
 800452a:	e000      	b.n	800452e <HAL_ADC_ConfigChannel+0x80a>
 800452c:	4a47      	ldr	r2, [pc, #284]	@ (800464c <HAL_ADC_ConfigChannel+0x928>)
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7fe fa52 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 800453e:	e2bb      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8004552:	e2b1      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 800455c:	f7fe fa20 	bl	80029a0 <HAL_GetREVID>
 8004560:	4603      	mov	r3, r0
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d130      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3e      	ldr	r2, [pc, #248]	@ (8004668 <HAL_ADC_ConfigChannel+0x944>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d103      	bne.n	800457a <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <HAL_ADC_ConfigChannel+0x948>)
 8004574:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004578:	e027      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <HAL_ADC_ConfigChannel+0x94c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d103      	bne.n	800458c <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <HAL_ADC_ConfigChannel+0x950>)
 8004586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800458a:	e01e      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a39      	ldr	r2, [pc, #228]	@ (8004678 <HAL_ADC_ConfigChannel+0x954>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d103      	bne.n	800459e <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8004596:	4b39      	ldr	r3, [pc, #228]	@ (800467c <HAL_ADC_ConfigChannel+0x958>)
 8004598:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800459c:	e015      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a37      	ldr	r2, [pc, #220]	@ (8004680 <HAL_ADC_ConfigChannel+0x95c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80045a8:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <HAL_ADC_ConfigChannel+0x960>)
 80045aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045ae:	e00c      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_ADC_ConfigChannel+0x964>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d103      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 80045ba:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_ADC_ConfigChannel+0x95c>)
 80045bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045c0:	e003      	b.n	80045ca <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	f000 81a2 	beq.w	8004918 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045dc:	d004      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80045e2:	4a2a      	ldr	r2, [pc, #168]	@ (800468c <HAL_ADC_ConfigChannel+0x968>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d107      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fb8b 	bl	8002d0c <LL_ADC_REG_SetSequencerChAdd>
 80045f6:	e0c1      	b.n	800477c <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	210f      	movs	r1, #15
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004614:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x904>
 800461c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	e037      	b.n	8004698 <HAL_ADC_ConfigChannel+0x974>
 8004628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d127      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e029      	b.n	8004698 <HAL_ADC_ConfigChannel+0x974>
 8004644:	42028000 	.word	0x42028000
 8004648:	42028308 	.word	0x42028308
 800464c:	46021308 	.word	0x46021308
 8004650:	46021000 	.word	0x46021000
 8004654:	ce080000 	.word	0xce080000
 8004658:	20000000 	.word	0x20000000
 800465c:	053e2d63 	.word	0x053e2d63
 8004660:	ca040000 	.word	0xca040000
 8004664:	80000001 	.word	0x80000001
 8004668:	b6002000 	.word	0xb6002000
 800466c:	da400000 	.word	0xda400000
 8004670:	ba004000 	.word	0xba004000
 8004674:	de800000 	.word	0xde800000
 8004678:	b2001000 	.word	0xb2001000
 800467c:	81000001 	.word	0x81000001
 8004680:	d6200000 	.word	0xd6200000
 8004684:	d2100000 	.word	0xd2100000
 8004688:	d7200000 	.word	0xd7200000
 800468c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6849      	ldr	r1, [r1, #4]
 800469c:	f001 011f 	and.w	r1, r1, #31
 80046a0:	408b      	lsls	r3, r1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d860      	bhi.n	800477c <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80046ba:	f7fe f971 	bl	80029a0 <HAL_GetREVID>
 80046be:	4603      	mov	r3, r0
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c4:	d851      	bhi.n	800476a <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80046c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80046ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x9c4>
 80046d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80046d6:	0e9b      	lsrs	r3, r3, #26
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b13      	cmp	r3, #19
 80046de:	bf8c      	ite	hi
 80046e0:	2301      	movhi	r3, #1
 80046e2:	2300      	movls	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e016      	b.n	8004716 <HAL_ADC_ConfigChannel+0x9f2>
 80046e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80046ec:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	61bb      	str	r3, [r7, #24]
  return result;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8004700:	2320      	movs	r3, #32
 8004702:	e003      	b.n	800470c <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b13      	cmp	r3, #19
 800470e:	bf8c      	ite	hi
 8004710:	2301      	movhi	r3, #1
 8004712:	2300      	movls	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d027      	beq.n	800476a <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800471a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800471e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_ADC_ConfigChannel+0xa16>
 8004726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800472a:	0e9b      	lsrs	r3, r3, #26
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	3b09      	subs	r3, #9
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	e015      	b.n	8004766 <HAL_ADC_ConfigChannel+0xa42>
 800473a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800473e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	60fb      	str	r3, [r7, #12]
  return result;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8004752:	2320      	movs	r3, #32
 8004754:	e003      	b.n	800475e <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3b09      	subs	r3, #9
 8004760:	2201      	movs	r2, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004776:	4619      	mov	r1, r3
 8004778:	f7fe fa68 	bl	8002c4c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800478a:	f7fe fb2b 	bl	8002de4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f280 8190 	bge.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a97      	ldr	r2, [pc, #604]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0xa82>
 80047a2:	4b97      	ldr	r3, [pc, #604]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80047a4:	e000      	b.n	80047a8 <HAL_ADC_ConfigChannel+0xa84>
 80047a6:	4b97      	ldr	r3, [pc, #604]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe f92d 	bl	8002a08 <LL_ADC_GetCommonPathInternalCh>
 80047ae:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a94      	ldr	r2, [pc, #592]	@ (8004a08 <HAL_ADC_ConfigChannel+0xce4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d126      	bne.n	800480a <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d120      	bne.n	800480a <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a8b      	ldr	r2, [pc, #556]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0xab2>
 80047d2:	4a8b      	ldr	r2, [pc, #556]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80047d4:	e000      	b.n	80047d8 <HAL_ADC_ConfigChannel+0xab4>
 80047d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fe f8fd 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80047e8:	4b88      	ldr	r3, [pc, #544]	@ (8004a0c <HAL_ADC_ConfigChannel+0xce8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	4a88      	ldr	r2, [pc, #544]	@ (8004a10 <HAL_ADC_ConfigChannel+0xcec>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80047fa:	e002      	b.n	8004802 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3b01      	subs	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f9      	bne.n	80047fc <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004808:	e067      	b.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a81      	ldr	r2, [pc, #516]	@ (8004a14 <HAL_ADC_ConfigChannel+0xcf0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d116      	bne.n	8004842 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a75      	ldr	r2, [pc, #468]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0xb0a>
 800482a:	4a75      	ldr	r2, [pc, #468]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 800482c:	e000      	b.n	8004830 <HAL_ADC_ConfigChannel+0xb0c>
 800482e:	4a75      	ldr	r2, [pc, #468]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7fe f8d1 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 8004840:	e04b      	b.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a74      	ldr	r2, [pc, #464]	@ (8004a18 <HAL_ADC_ConfigChannel+0xcf4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d116      	bne.n	800487a <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a67      	ldr	r2, [pc, #412]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0xb42>
 8004862:	4a67      	ldr	r2, [pc, #412]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 8004864:	e000      	b.n	8004868 <HAL_ADC_ConfigChannel+0xb44>
 8004866:	4a67      	ldr	r2, [pc, #412]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7fe f8b5 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 8004878:	e02f      	b.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a67      	ldr	r2, [pc, #412]	@ (8004a1c <HAL_ADC_ConfigChannel+0xcf8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d12a      	bne.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d124      	bne.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a62      	ldr	r2, [pc, #392]	@ (8004a20 <HAL_ADC_ConfigChannel+0xcfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d11f      	bne.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a57      	ldr	r2, [pc, #348]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0xb84>
 80048a4:	4a56      	ldr	r2, [pc, #344]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80048a6:	e000      	b.n	80048aa <HAL_ADC_ConfigChannel+0xb86>
 80048a8:	4a56      	ldr	r2, [pc, #344]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe f894 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80048ba:	f7fe f871 	bl	80029a0 <HAL_GetREVID>
 80048be:	4603      	mov	r3, r0
 80048c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c4:	d809      	bhi.n	80048da <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80048da:	f7fe f861 	bl	80029a0 <HAL_GetREVID>
 80048de:	4603      	mov	r3, r0
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e4:	f040 80e8 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004a24 <HAL_ADC_ConfigChannel+0xd00>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f040 80e2 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 80db 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004916:	e0cf      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004920:	d004      	beq.n	800492c <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004926:	4a40      	ldr	r2, [pc, #256]	@ (8004a28 <HAL_ADC_ConfigChannel+0xd04>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d106      	bne.n	800493a <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fa1c 	bl	8002d72 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f280 80ba 	bge.w	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2c      	ldr	r2, [pc, #176]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_ADC_ConfigChannel+0xc2e>
 800494e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 8004950:	e000      	b.n	8004954 <HAL_ADC_ConfigChannel+0xc30>
 8004952:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe f857 	bl	8002a08 <LL_ADC_GetCommonPathInternalCh>
 800495a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	@ (8004a2c <HAL_ADC_ConfigChannel+0xd08>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d110      	bne.n	800498a <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a23      	ldr	r2, [pc, #140]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0xc52>
 8004972:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 8004974:	e000      	b.n	8004978 <HAL_ADC_ConfigChannel+0xc54>
 8004976:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7fe f82d 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 8004988:	e06d      	b.n	8004a66 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a28      	ldr	r2, [pc, #160]	@ (8004a30 <HAL_ADC_ConfigChannel+0xd0c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d110      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0xc7e>
 800499e:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80049a0:	e000      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xc80>
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fe f817 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 80049b4:	e057      	b.n	8004a66 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_ADC_ConfigChannel+0xcf4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d110      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0xcaa>
 80049ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80049cc:	e000      	b.n	80049d0 <HAL_ADC_ConfigChannel+0xcac>
 80049ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004a04 <HAL_ADC_ConfigChannel+0xce0>)
 80049d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe f801 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 80049e0:	e041      	b.n	8004a66 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <HAL_ADC_ConfigChannel+0xcf8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d13c      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a02      	ldr	r2, [pc, #8]	@ (80049fc <HAL_ADC_ConfigChannel+0xcd8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d11e      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0xd10>
 80049f6:	4a02      	ldr	r2, [pc, #8]	@ (8004a00 <HAL_ADC_ConfigChannel+0xcdc>)
 80049f8:	e01d      	b.n	8004a36 <HAL_ADC_ConfigChannel+0xd12>
 80049fa:	bf00      	nop
 80049fc:	42028000 	.word	0x42028000
 8004a00:	42028308 	.word	0x42028308
 8004a04:	46021308 	.word	0x46021308
 8004a08:	b6002000 	.word	0xb6002000
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	053e2d63 	.word	0x053e2d63
 8004a14:	ba004000 	.word	0xba004000
 8004a18:	80000001 	.word	0x80000001
 8004a1c:	b2001000 	.word	0xb2001000
 8004a20:	46021000 	.word	0x46021000
 8004a24:	d7200000 	.word	0xd7200000
 8004a28:	80000010 	.word	0x80000010
 8004a2c:	ce080000 	.word	0xce080000
 8004a30:	ca040000 	.word	0xca040000
 8004a34:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <HAL_ADC_ConfigChannel+0xda8>)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fd ffce 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004a46:	f7fd ffab 	bl	80029a0 <HAL_GetREVID>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a50:	d809      	bhi.n	8004a66 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8004a66:	f7fd ff9b 	bl	80029a0 <HAL_GetREVID>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a70:	d122      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xdac>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d11d      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d117      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004a9c:	e00c      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8004ab0:	e002      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ab6:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004ac0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	37f0      	adds	r7, #240	@ 0xf0
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	46021308 	.word	0x46021308
 8004ad0:	d7200000 	.word	0xd7200000

08004ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fa7d 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d15a      	bne.n	8004ba2 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <ADC_Enable+0xd8>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004afe:	f043 0210 	orr.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e046      	b.n	8004ba4 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fa34 	bl	8002f90 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <ADC_Enable+0x66>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <ADC_Enable+0xdc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d033      	beq.n	8004ba2 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b3a:	f7fd ff01 	bl	8002940 <HAL_GetTick>
 8004b3e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b40:	e028      	b.n	8004b94 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fa4a 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fa1a 	bl	8002f90 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b5c:	f7fd fef0 	bl	8002940 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d914      	bls.n	8004b94 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d00d      	beq.n	8004b94 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7c:	f043 0210 	orr.w	r2, r3, #16
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e007      	b.n	8004ba4 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d1cf      	bne.n	8004b42 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	8000003f 	.word	0x8000003f
 8004bb0:	46021000 	.word	0x46021000

08004bb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fa20 	bl	8003006 <LL_ADC_IsDisableOngoing>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe fa07 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d047      	beq.n	8004c68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d144      	bne.n	8004c68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030d 	and.w	r3, r3, #13
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10c      	bne.n	8004c06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe f9e1 	bl	8002fb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fe9f 	bl	8002940 <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c04:	e029      	b.n	8004c5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e023      	b.n	8004c6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c22:	f7fd fe8d 	bl	8002940 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d914      	bls.n	8004c5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1dc      	bne.n	8004c22 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d14b      	bne.n	8004d24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d021      	beq.n	8004cea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd ffba 	bl	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d032      	beq.n	8004d1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d12b      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11f      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	679a      	str	r2, [r3, #120]	@ 0x78
 8004ce8:	e018      	b.n	8004d1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d14:	f043 0201 	orr.w	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7fc fb7d 	bl	800141c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d22:	e00e      	b.n	8004d42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7fe ffcf 	bl	8003cd4 <HAL_ADC_ErrorCallback>
}
 8004d36:	e004      	b.n	8004d42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7fe ffa7 	bl	8003cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7fe ffa1 	bl	8003cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <LL_ADC_StartCalibration>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a0f      	ldr	r2, [pc, #60]	@ (8004de8 <LL_ADC_StartCalibration+0x4c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00c      	beq.n	8004dc8 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <LL_ADC_StartCalibration+0x50>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	e009      	b.n	8004ddc <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	46021000 	.word	0x46021000
 8004dec:	7ffeffc0 	.word	0x7ffeffc0

08004df0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e04:	d101      	bne.n	8004e0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	@ 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_ADCEx_Calibration_Start+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e138      	b.n	80050a8 <HAL_ADCEx_Calibration_Start+0x290>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff feb8 	bl	8004bb4 <ADC_Disable>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 811e 	bne.w	8005090 <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e5c:	f023 0302 	bic.w	r3, r3, #2
 8004e60:	f043 0202 	orr.w	r2, r3, #2
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a90      	ldr	r2, [pc, #576]	@ (80050b0 <HAL_ADCEx_Calibration_Start+0x298>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d150      	bne.n	8004f14 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0203 	bic.w	r2, r2, #3
 8004e98:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff73 	bl	8004d9c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004eb6:	e014      	b.n	8004ee2 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80050b4 <HAL_ADCEx_Calibration_Start+0x29c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d90d      	bls.n	8004ee2 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eca:	f023 0312 	bic.w	r3, r3, #18
 8004ece:	f043 0210 	orr.w	r2, r3, #16
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0e2      	b.n	80050a8 <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff ff82 	bl	8004df0 <LL_ADC_IsCalibrationOnGoing>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e2      	bne.n	8004eb8 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68d9      	ldr	r1, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f12:	e0b4      	b.n	800507e <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_ADCEx_Calibration_Start+0x2a0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8004f1e:	4b66      	ldr	r3, [pc, #408]	@ (80050b8 <HAL_ADCEx_Calibration_Start+0x2a0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f240 4255 	movw	r2, #1109	@ 0x455
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d012      	beq.n	8004f58 <HAL_ADCEx_Calibration_Start+0x140>
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f240 4276 	movw	r2, #1142	@ 0x476
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00d      	beq.n	8004f58 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f240 4281 	movw	r2, #1153	@ 0x481
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_ADCEx_Calibration_Start+0x138>
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f240 4282 	movw	r2, #1154	@ 0x482
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d172      	bne.n	8005036 <HAL_ADCEx_Calibration_Start+0x21e>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f56:	d36e      	bcc.n	8005036 <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fdbb 	bl	8004ad4 <ADC_Enable>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 8004f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 8088 	bne.w	800507e <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 8004f80:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f82:	f3bf 8f5f 	dmb	sy
}
 8004f86:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f90:	b2d9      	uxtb	r1, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b49      	ldr	r3, [pc, #292]	@ (80050bc <HAL_ADCEx_Calibration_Start+0x2a4>)
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 8004f9e:	f3bf 8f5f 	dmb	sy
}
 8004fa2:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004fb4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fdfb 	bl	8004bb4 <ADC_Disable>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8004fca:	d109      	bne.n	8004fe0 <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <HAL_ADCEx_Calibration_Start+0x2a8>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fde:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff6:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ff8:	e014      	b.n	8005024 <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4a2c      	ldr	r2, [pc, #176]	@ (80050b4 <HAL_ADCEx_Calibration_Start+0x29c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d90d      	bls.n	8005024 <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800500c:	f023 0312 	bic.w	r3, r3, #18
 8005010:	f043 0210 	orr.w	r2, r3, #16
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e041      	b.n	80050a8 <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fee1 	bl	8004df0 <LL_ADC_IsCalibrationOnGoing>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e2      	bne.n	8004ffa <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 8005034:	e023      	b.n	800507e <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fead 	bl	8004d9c <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005042:	e014      	b.n	800506e <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3301      	adds	r3, #1
 8005048:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_ADCEx_Calibration_Start+0x29c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d90d      	bls.n	800506e <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005056:	f023 0312 	bic.w	r3, r3, #18
 800505a:	f043 0210 	orr.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e01c      	b.n	80050a8 <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff febc 	bl	8004df0 <LL_ADC_IsCalibrationOnGoing>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e2      	bne.n	8005044 <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	679a      	str	r2, [r3, #120]	@ 0x78
 800508e:	e005      	b.n	800509c <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005094:	f043 0210 	orr.w	r2, r3, #16
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80050a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3728      	adds	r7, #40	@ 0x28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	46021000 	.word	0x46021000
 80050b4:	022b6b7f 	.word	0x022b6b7f
 80050b8:	e0044000 	.word	0xe0044000
 80050bc:	03021100 	.word	0x03021100
 80050c0:	7ffeffc0 	.word	0x7ffeffc0

080050c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <__NVIC_SetPriorityGrouping>:
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800513c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	60d3      	str	r3, [r2, #12]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_GetPriorityGrouping>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <__NVIC_GetPriorityGrouping+0x18>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 0307 	and.w	r3, r3, #7
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_EnableIRQ>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	2b00      	cmp	r3, #0
 8005188:	db0b      	blt.n	80051a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	f003 021f 	and.w	r2, r3, #31
 8005190:	4907      	ldr	r1, [pc, #28]	@ (80051b0 <__NVIC_EnableIRQ+0x38>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2001      	movs	r0, #1
 800519a:	fa00 f202 	lsl.w	r2, r0, r2
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e100 	.word	0xe000e100

080051b4 <__NVIC_SetPriority>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	db0a      	blt.n	80051de <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	490c      	ldr	r1, [pc, #48]	@ (8005200 <__NVIC_SetPriority+0x4c>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	440b      	add	r3, r1
 80051d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051dc:	e00a      	b.n	80051f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4908      	ldr	r1, [pc, #32]	@ (8005204 <__NVIC_SetPriority+0x50>)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	3b04      	subs	r3, #4
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	440b      	add	r3, r1
 80051f2:	761a      	strb	r2, [r3, #24]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000e100 	.word	0xe000e100
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <NVIC_EncodePriority>:
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	@ 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf28      	it	cs
 8005226:	2304      	movcs	r3, #4
 8005228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3304      	adds	r3, #4
 800522e:	2b06      	cmp	r3, #6
 8005230:	d902      	bls.n	8005238 <NVIC_EncodePriority+0x30>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3b03      	subs	r3, #3
 8005236:	e000      	b.n	800523a <NVIC_EncodePriority+0x32>
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	401a      	ands	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005250:	f04f 31ff 	mov.w	r1, #4294967295
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	43d9      	mvns	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	4313      	orrs	r3, r2
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ff4c 	bl	8005114 <__NVIC_SetPriorityGrouping>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005292:	f7ff ff63 	bl	800515c <__NVIC_GetPriorityGrouping>
 8005296:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	f7ff ffb3 	bl	8005208 <NVIC_EncodePriority>
 80052a2:	4602      	mov	r2, r0
 80052a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff82 	bl	80051b4 <__NVIC_SetPriority>
}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff56 	bl	8005178 <__NVIC_EnableIRQ>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e4:	d301      	bcc.n	80052ea <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00d      	b.n	8005306 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80052ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a05      	ldr	r2, [pc, #20]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052fe:	f043 0303 	orr.w	r3, r3, #3
 8005302:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000e010 	.word	0xe000e010

08005318 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d844      	bhi.n	80053b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005326:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	0800534f 	.word	0x0800534f
 8005330:	0800536d 	.word	0x0800536d
 8005334:	0800538f 	.word	0x0800538f
 8005338:	080053b1 	.word	0x080053b1
 800533c:	08005341 	.word	0x08005341
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005340:	4b1f      	ldr	r3, [pc, #124]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6013      	str	r3, [r2, #0]
      break;
 800534c:	e031      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800535a:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800535c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005360:	4a18      	ldr	r2, [pc, #96]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005362:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005366:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800536a:	e022      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800537a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005382:	4a10      	ldr	r2, [pc, #64]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800538c:	e011      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800538e:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a0b      	ldr	r2, [pc, #44]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800539a:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053a4:	4a07      	ldr	r2, [pc, #28]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80053b0:	bf00      	nop
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010
 80053c4:	46020c00 	.word	0x46020c00

080053c8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053ce:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80053da:	2304      	movs	r3, #4
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	e021      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80053e0:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80053ea:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053f2:	d011      	beq.n	8005418 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053fa:	d810      	bhi.n	800541e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005408:	d003      	beq.n	8005412 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800540a:	e008      	b.n	800541e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800540c:	2300      	movs	r3, #0
 800540e:	607b      	str	r3, [r7, #4]
        break;
 8005410:	e008      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005412:	2301      	movs	r3, #1
 8005414:	607b      	str	r3, [r7, #4]
        break;
 8005416:	e005      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005418:	2302      	movs	r3, #2
 800541a:	607b      	str	r3, [r7, #4]
        break;
 800541c:	e002      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
        break;
 8005422:	bf00      	nop
    }
  }
  return systick_source;
 8005424:	687b      	ldr	r3, [r7, #4]
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000e010 	.word	0xe000e010
 8005438:	46020c00 	.word	0x46020c00

0800543c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e014      	b.n	8005478 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc f858 	bl	8001514 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e056      	b.n	8005542 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	795b      	ldrb	r3, [r3, #5]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_DAC_Start+0x20>
 800549c:	2302      	movs	r3, #2
 800549e:	e050      	b.n	8005542 <HAL_DAC_Start+0xc2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2201      	movs	r2, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054c4:	4b22      	ldr	r3, [pc, #136]	@ (8005550 <HAL_DAC_Start+0xd0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	099b      	lsrs	r3, r3, #6
 80054ca:	4a22      	ldr	r2, [pc, #136]	@ (8005554 <HAL_DAC_Start+0xd4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054d6:	e002      	b.n	80054de <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f9      	bne.n	80054d8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d11d      	bne.n	8005534 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	e014      	b.n	8005534 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2102      	movs	r1, #2
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	429a      	cmp	r2, r3
 8005522:	d107      	bne.n	8005534 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0202 	orr.w	r2, r2, #2
 8005532:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000000 	.word	0x20000000
 8005554:	053e2d63 	.word	0x053e2d63

08005558 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e011      	b.n	8005590 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2201      	movs	r2, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43da      	mvns	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	400a      	ands	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e018      	b.n	80055ea <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3308      	adds	r3, #8
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e004      	b.n	80055e0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	3314      	adds	r3, #20
 80055de:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	461a      	mov	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	@ 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_DAC_ConfigChannel+0x1c>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e187      	b.n	8005928 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	795b      	ldrb	r3, [r3, #5]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_DAC_ConfigChannel+0x32>
 8005626:	2302      	movs	r3, #2
 8005628:	e17e      	b.n	8005928 <HAL_DAC_ConfigChannel+0x330>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2202      	movs	r2, #2
 8005634:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d17a      	bne.n	8005734 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800563e:	f7fd f97f 	bl	8002940 <HAL_GetTick>
 8005642:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d13d      	bne.n	80056c6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800564a:	e018      	b.n	800567e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800564c:	f7fd f978 	bl	8002940 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d911      	bls.n	800567e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f043 0208 	orr.w	r2, r3, #8
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2203      	movs	r2, #3
 8005678:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e154      	b.n	8005928 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1df      	bne.n	800564c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005694:	641a      	str	r2, [r3, #64]	@ 0x40
 8005696:	e020      	b.n	80056da <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005698:	f7fd f952 	bl	8002940 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d90f      	bls.n	80056c6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da0a      	bge.n	80056c6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f043 0208 	orr.w	r2, r3, #8
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2203      	movs	r2, #3
 80056c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e130      	b.n	8005928 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dbe3      	blt.n	8005698 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	ea02 0103 	and.w	r1, r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	409a      	lsls	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	21ff      	movs	r1, #255	@ 0xff
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	ea02 0103 	and.w	r1, r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d11d      	bne.n	800578e <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	221f      	movs	r2, #31
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	4013      	ands	r3, r2
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005782:	4313      	orrs	r3, r2
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2207      	movs	r2, #7
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a6:	4013      	ands	r3, r2
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d102      	bne.n	80057b8 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	e00f      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d102      	bne.n	80057c6 <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80057c0:	2301      	movs	r3, #1
 80057c2:	623b      	str	r3, [r7, #32]
 80057c4:	e008      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80057ce:	2301      	movs	r3, #1
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e001      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	6a3a      	ldr	r2, [r7, #32]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fa:	4013      	ands	r3, r2
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	7a1b      	ldrb	r3, [r3, #8]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d102      	bne.n	800580c <HAL_DAC_ConfigChannel+0x214>
 8005806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800580a:	e000      	b.n	800580e <HAL_DAC_ConfigChannel+0x216>
 800580c:	2300      	movs	r3, #0
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005826:	4013      	ands	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	7a5b      	ldrb	r3, [r3, #9]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d102      	bne.n	8005838 <HAL_DAC_ConfigChannel+0x240>
 8005832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005836:	e000      	b.n	800583a <HAL_DAC_ConfigChannel+0x242>
 8005838:	2300      	movs	r3, #0
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d114      	bne.n	800587a <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005850:	f003 fa18 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8005854:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4a35      	ldr	r2, [pc, #212]	@ (8005930 <HAL_DAC_ConfigChannel+0x338>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d904      	bls.n	8005868 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
 8005866:	e00f      	b.n	8005888 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4a32      	ldr	r2, [pc, #200]	@ (8005934 <HAL_DAC_ConfigChannel+0x33c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d90a      	bls.n	8005886 <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
 8005878:	e006      	b.n	8005888 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005880:	4313      	orrs	r3, r2
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
 8005884:	e000      	b.n	8005888 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005886:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005896:	4313      	orrs	r3, r2
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6819      	ldr	r1, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	400a      	ands	r2, r1
 80058be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058da:	4013      	ands	r3, r2
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	4313      	orrs	r3, r2
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	22c0      	movs	r2, #192	@ 0xc0
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43da      	mvns	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	400a      	ands	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005926:	7ffb      	ldrb	r3, [r7, #31]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	@ 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	09896800 	.word	0x09896800
 8005934:	04c4b400 	.word	0x04c4b400

08005938 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e024      	b.n	800599c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	791b      	ldrb	r3, [r3, #4]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d11e      	bne.n	800599a <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	795b      	ldrb	r3, [r3, #5]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8005964:	2302      	movs	r3, #2
 8005966:	e019      	b.n	800599c <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597a:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e04f      	b.n	8005a60 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_DMA_Start_IT+0x26>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e048      	b.n	8005a60 <HAL_DMA_Start_IT+0xb8>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d136      	bne.n	8005a50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f9d3 	bl	8005da2 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005a0a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a22:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a3a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e007      	b.n	8005a60 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2240      	movs	r2, #64	@ 0x40
 8005a54:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005a78:	f023 030f 	bic.w	r3, r3, #15
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a86:	3b50      	subs	r3, #80	@ 0x50
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 813b 	beq.w	8005d1e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005acc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d011      	beq.n	8005b0c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005afe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b04:	f043 0202 	orr.w	r2, r3, #2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b30:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	f043 0204 	orr.w	r2, r3, #4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d011      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b62:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f043 0208 	orr.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d013      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b94:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d04c      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d045      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005bca:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d12e      	bne.n	8005c36 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005be6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0202 	orr.w	r2, r2, #2
 8005bf6:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c10:	2201      	movs	r2, #1
 8005c12:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d07a      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4798      	blx	r3
        }

        return;
 8005c34:	e075      	b.n	8005d22 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2205      	movs	r2, #5
 8005c3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d039      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d032      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d111      	bne.n	8005cae <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c96:	2201      	movs	r2, #1
 8005c98:	731a      	strb	r2, [r3, #12]
 8005c9a:	e008      	b.n	8005cae <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005cb6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d025      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0202 	orr.w	r2, r2, #2
 8005ce6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d00:	2201      	movs	r2, #1
 8005d02:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
 8005d1c:	e002      	b.n	8005d24 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005d22:	bf00      	nop
    }
  }
}
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e02b      	b.n	8005d96 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005d46:	f023 030f 	bic.w	r3, r3, #15
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d54:	3b50      	subs	r3, #80	@ 0x50
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f003 0311 	and.w	r3, r3, #17
 8005d74:	2b11      	cmp	r3, #17
 8005d76:	d106      	bne.n	8005d86 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	e006      	b.n	8005d94 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	b291      	uxth	r1, r2
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005dce:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005df4:	f7fc fda4 	bl	8002940 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0db      	b.n	8005fbc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc4 <HAL_DMAEx_List_Init+0x1d8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f000 809f 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a6c      	ldr	r2, [pc, #432]	@ (8005fc8 <HAL_DMAEx_List_Init+0x1dc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	f000 8099 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6a      	ldr	r2, [pc, #424]	@ (8005fcc <HAL_DMAEx_List_Init+0x1e0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	f000 8093 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	@ (8005fd0 <HAL_DMAEx_List_Init+0x1e4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	f000 808d 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a66      	ldr	r2, [pc, #408]	@ (8005fd4 <HAL_DMAEx_List_Init+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f000 8087 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a64      	ldr	r2, [pc, #400]	@ (8005fd8 <HAL_DMAEx_List_Init+0x1ec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	f000 8081 	beq.w	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a62      	ldr	r2, [pc, #392]	@ (8005fdc <HAL_DMAEx_List_Init+0x1f0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d07b      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a61      	ldr	r2, [pc, #388]	@ (8005fe0 <HAL_DMAEx_List_Init+0x1f4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d076      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe4 <HAL_DMAEx_List_Init+0x1f8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d071      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005fe8 <HAL_DMAEx_List_Init+0x1fc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d06c      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a5c      	ldr	r2, [pc, #368]	@ (8005fec <HAL_DMAEx_List_Init+0x200>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d067      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a5b      	ldr	r2, [pc, #364]	@ (8005ff0 <HAL_DMAEx_List_Init+0x204>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d062      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a59      	ldr	r2, [pc, #356]	@ (8005ff4 <HAL_DMAEx_List_Init+0x208>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d05d      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a58      	ldr	r2, [pc, #352]	@ (8005ff8 <HAL_DMAEx_List_Init+0x20c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d058      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a56      	ldr	r2, [pc, #344]	@ (8005ffc <HAL_DMAEx_List_Init+0x210>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d053      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a55      	ldr	r2, [pc, #340]	@ (8006000 <HAL_DMAEx_List_Init+0x214>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d04e      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a53      	ldr	r2, [pc, #332]	@ (8006004 <HAL_DMAEx_List_Init+0x218>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d049      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a52      	ldr	r2, [pc, #328]	@ (8006008 <HAL_DMAEx_List_Init+0x21c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d044      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a50      	ldr	r2, [pc, #320]	@ (800600c <HAL_DMAEx_List_Init+0x220>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d03f      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a4f      	ldr	r2, [pc, #316]	@ (8006010 <HAL_DMAEx_List_Init+0x224>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d03a      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a4d      	ldr	r2, [pc, #308]	@ (8006014 <HAL_DMAEx_List_Init+0x228>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d035      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4c      	ldr	r2, [pc, #304]	@ (8006018 <HAL_DMAEx_List_Init+0x22c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d030      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800601c <HAL_DMAEx_List_Init+0x230>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a49      	ldr	r2, [pc, #292]	@ (8006020 <HAL_DMAEx_List_Init+0x234>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d026      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a47      	ldr	r2, [pc, #284]	@ (8006024 <HAL_DMAEx_List_Init+0x238>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d021      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a46      	ldr	r2, [pc, #280]	@ (8006028 <HAL_DMAEx_List_Init+0x23c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d01c      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a44      	ldr	r2, [pc, #272]	@ (800602c <HAL_DMAEx_List_Init+0x240>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a43      	ldr	r2, [pc, #268]	@ (8006030 <HAL_DMAEx_List_Init+0x244>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d012      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a41      	ldr	r2, [pc, #260]	@ (8006034 <HAL_DMAEx_List_Init+0x248>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00d      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a40      	ldr	r2, [pc, #256]	@ (8006038 <HAL_DMAEx_List_Init+0x24c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d008      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a3e      	ldr	r2, [pc, #248]	@ (800603c <HAL_DMAEx_List_Init+0x250>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <HAL_DMAEx_List_Init+0x162>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006040 <HAL_DMAEx_List_Init+0x254>)
 8005f4c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0206 	orr.w	r2, r2, #6
 8005f6c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005f6e:	e00f      	b.n	8005f90 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005f70:	f7fc fce6 	bl	8002940 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d908      	bls.n	8005f90 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2210      	movs	r2, #16
 8005f82:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2203      	movs	r2, #3
 8005f88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e015      	b.n	8005fbc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e8      	bne.n	8005f70 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fad0 	bl	8006544 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40020050 	.word	0x40020050
 8005fc8:	50020050 	.word	0x50020050
 8005fcc:	400200d0 	.word	0x400200d0
 8005fd0:	500200d0 	.word	0x500200d0
 8005fd4:	40020150 	.word	0x40020150
 8005fd8:	50020150 	.word	0x50020150
 8005fdc:	400201d0 	.word	0x400201d0
 8005fe0:	500201d0 	.word	0x500201d0
 8005fe4:	40020250 	.word	0x40020250
 8005fe8:	50020250 	.word	0x50020250
 8005fec:	400202d0 	.word	0x400202d0
 8005ff0:	500202d0 	.word	0x500202d0
 8005ff4:	40020350 	.word	0x40020350
 8005ff8:	50020350 	.word	0x50020350
 8005ffc:	400203d0 	.word	0x400203d0
 8006000:	500203d0 	.word	0x500203d0
 8006004:	40020450 	.word	0x40020450
 8006008:	50020450 	.word	0x50020450
 800600c:	400204d0 	.word	0x400204d0
 8006010:	500204d0 	.word	0x500204d0
 8006014:	40020550 	.word	0x40020550
 8006018:	50020550 	.word	0x50020550
 800601c:	400205d0 	.word	0x400205d0
 8006020:	500205d0 	.word	0x500205d0
 8006024:	40020650 	.word	0x40020650
 8006028:	50020650 	.word	0x50020650
 800602c:	400206d0 	.word	0x400206d0
 8006030:	500206d0 	.word	0x500206d0
 8006034:	40020750 	.word	0x40020750
 8006038:	50020750 	.word	0x50020750
 800603c:	400207d0 	.word	0x400207d0
 8006040:	500207d0 	.word	0x500207d0

08006044 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_DMAEx_List_Start_IT+0x16>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e082      	b.n	8006164 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006064:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006070:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d005      	beq.n	8006084 <HAL_DMAEx_List_Start_IT+0x40>
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d16a      	bne.n	8006154 <HAL_DMAEx_List_Start_IT+0x110>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d067      	beq.n	8006154 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d157      	bne.n	8006140 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_DMAEx_List_Start_IT+0x5a>
 800609a:	2302      	movs	r3, #2
 800609c:	e062      	b.n	8006164 <HAL_DMAEx_List_Start_IT+0x120>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	2202      	movs	r2, #2
 80060b4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c0:	2200      	movs	r2, #0
 80060c2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80060d2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ea:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d007      	beq.n	8006104 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006102:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f107 010c 	add.w	r1, r7, #12
 800610e:	2200      	movs	r2, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fe3d 	bl	8006d90 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4619      	mov	r1, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	0c0b      	lsrs	r3, r1, #16
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006134:	4013      	ands	r3, r2
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	430b      	orrs	r3, r1
 800613e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e007      	b.n	8006164 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_DMAEx_List_BuildNode+0x16>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e004      	b.n	8006190 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fb33 	bl	80067f4 <DMA_List_BuildNode>

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_DMAEx_List_GetNodeConfig+0x16>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e004      	b.n	80061bc <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fc75 	bl	8006aa4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	@ 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_DMAEx_List_InsertNode+0x18>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0b6      	b.n	800634e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d104      	bne.n	80061f2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2204      	movs	r2, #4
 80061ec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0ad      	b.n	800634e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fd5c 	bl	8006cb8 <DMA_List_CheckNodesBaseAddresses>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2205      	movs	r2, #5
 800620a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e09e      	b.n	800634e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fd7d 	bl	8006d18 <DMA_List_CheckNodesTypes>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2204      	movs	r2, #4
 8006228:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e08f      	b.n	800634e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2202      	movs	r2, #2
 8006232:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800623a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800623e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fda3 	bl	8006d90 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11a      	bne.n	8006288 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	609a      	str	r2, [r3, #8]
 8006264:	e06c      	b.n	8006340 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006272:	4013      	ands	r3, r2
 8006274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006278:	4319      	orrs	r1, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2202      	movs	r2, #2
 8006284:	609a      	str	r2, [r3, #8]
 8006286:	e05b      	b.n	8006340 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006298:	4013      	ands	r3, r2
 800629a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800629c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800629e:	4319      	orrs	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e043      	b.n	8006336 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80062b2:	f107 0314 	add.w	r3, r7, #20
 80062b6:	461a      	mov	r2, r3
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fd98 	bl	8006df0 <DMA_List_FindNode>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d132      	bne.n	800632c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d11a      	bne.n	8006306 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	461a      	mov	r2, r3
 80062de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062e2:	4013      	ands	r3, r2
 80062e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062e8:	4319      	orrs	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062f6:	4013      	ands	r3, r2
 80062f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062fc:	4319      	orrs	r1, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006304:	e017      	b.n	8006336 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800631c:	4013      	ands	r3, r2
 800631e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006322:	4319      	orrs	r1, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800632a:	e004      	b.n	8006336 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2206      	movs	r2, #6
 8006330:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e00b      	b.n	800634e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3730      	adds	r7, #48	@ 0x30
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08a      	sub	sp, #40	@ 0x28
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e052      	b.n	800640e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e049      	b.n	800640e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d101      	bne.n	8006392 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e03d      	b.n	800640e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2204      	movs	r2, #4
 8006396:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e038      	b.n	800640e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d104      	bne.n	80063ae <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2204      	movs	r2, #4
 80063a8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02f      	b.n	800640e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f107 0220 	add.w	r2, r7, #32
 80063c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fce2 	bl	8006d90 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80063d0:	f107 030c 	add.w	r3, r7, #12
 80063d4:	461a      	mov	r2, r3
 80063d6:	2100      	movs	r1, #0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fd09 	bl	8006df0 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063e8:	4013      	ands	r3, r2
 80063ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4610      	mov	r0, r2
 80063f0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80063f2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80063f4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	@ 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_DMAEx_List_LinkQ+0x16>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e072      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006438:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d002      	beq.n	800644c <HAL_DMAEx_List_LinkQ+0x34>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b05      	cmp	r3, #5
 800644a:	d108      	bne.n	800645e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2240      	movs	r2, #64	@ 0x40
 8006450:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e05c      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	7b1b      	ldrb	r3, [r3, #12]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d104      	bne.n	8006472 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e052      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2b      	ldr	r2, [pc, #172]	@ (8006524 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a29      	ldr	r2, [pc, #164]	@ (8006528 <HAL_DMAEx_List_LinkQ+0x110>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01d      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a28      	ldr	r2, [pc, #160]	@ (800652c <HAL_DMAEx_List_LinkQ+0x114>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <HAL_DMAEx_List_LinkQ+0x118>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a25      	ldr	r2, [pc, #148]	@ (8006534 <HAL_DMAEx_List_LinkQ+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a23      	ldr	r2, [pc, #140]	@ (8006538 <HAL_DMAEx_List_LinkQ+0x120>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a22      	ldr	r2, [pc, #136]	@ (800653c <HAL_DMAEx_List_LinkQ+0x124>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_DMAEx_List_LinkQ+0xaa>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a20      	ldr	r2, [pc, #128]	@ (8006540 <HAL_DMAEx_List_LinkQ+0x128>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d101      	bne.n	80064c6 <HAL_DMAEx_List_LinkQ+0xae>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <HAL_DMAEx_List_LinkQ+0xb0>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2203      	movs	r2, #3
 80064de:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e019      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	2b81      	cmp	r3, #129	@ 0x81
 80064ea:	d108      	bne.n	80064fe <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10d      	bne.n	8006510 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2204      	movs	r2, #4
 80064f8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00c      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2204      	movs	r2, #4
 800650a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e003      	b.n	8006518 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40020650 	.word	0x40020650
 8006528:	50020650 	.word	0x50020650
 800652c:	400206d0 	.word	0x400206d0
 8006530:	500206d0 	.word	0x500206d0
 8006534:	40020750 	.word	0x40020750
 8006538:	50020750 	.word	0x50020750
 800653c:	400207d0 	.word	0x400207d0
 8006540:	500207d0 	.word	0x500207d0

08006544 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a85      	ldr	r2, [pc, #532]	@ (8006774 <DMA_List_Init+0x230>)
 800655e:	4293      	cmp	r3, r2
 8006560:	f000 80a0 	beq.w	80066a4 <DMA_List_Init+0x160>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a83      	ldr	r2, [pc, #524]	@ (8006778 <DMA_List_Init+0x234>)
 800656a:	4293      	cmp	r3, r2
 800656c:	f000 809a 	beq.w	80066a4 <DMA_List_Init+0x160>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a81      	ldr	r2, [pc, #516]	@ (800677c <DMA_List_Init+0x238>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f000 8094 	beq.w	80066a4 <DMA_List_Init+0x160>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a7f      	ldr	r2, [pc, #508]	@ (8006780 <DMA_List_Init+0x23c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f000 808e 	beq.w	80066a4 <DMA_List_Init+0x160>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7d      	ldr	r2, [pc, #500]	@ (8006784 <DMA_List_Init+0x240>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f000 8088 	beq.w	80066a4 <DMA_List_Init+0x160>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7b      	ldr	r2, [pc, #492]	@ (8006788 <DMA_List_Init+0x244>)
 800659a:	4293      	cmp	r3, r2
 800659c:	f000 8082 	beq.w	80066a4 <DMA_List_Init+0x160>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a79      	ldr	r2, [pc, #484]	@ (800678c <DMA_List_Init+0x248>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d07c      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a78      	ldr	r2, [pc, #480]	@ (8006790 <DMA_List_Init+0x24c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d077      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a76      	ldr	r2, [pc, #472]	@ (8006794 <DMA_List_Init+0x250>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d072      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a75      	ldr	r2, [pc, #468]	@ (8006798 <DMA_List_Init+0x254>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d06d      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a73      	ldr	r2, [pc, #460]	@ (800679c <DMA_List_Init+0x258>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d068      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a72      	ldr	r2, [pc, #456]	@ (80067a0 <DMA_List_Init+0x25c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d063      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a70      	ldr	r2, [pc, #448]	@ (80067a4 <DMA_List_Init+0x260>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d05e      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6f      	ldr	r2, [pc, #444]	@ (80067a8 <DMA_List_Init+0x264>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d059      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6d      	ldr	r2, [pc, #436]	@ (80067ac <DMA_List_Init+0x268>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d054      	beq.n	80066a4 <DMA_List_Init+0x160>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6c      	ldr	r2, [pc, #432]	@ (80067b0 <DMA_List_Init+0x26c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04f      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6a      	ldr	r2, [pc, #424]	@ (80067b4 <DMA_List_Init+0x270>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d04a      	beq.n	80066a4 <DMA_List_Init+0x160>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a69      	ldr	r2, [pc, #420]	@ (80067b8 <DMA_List_Init+0x274>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d045      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a67      	ldr	r2, [pc, #412]	@ (80067bc <DMA_List_Init+0x278>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d040      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a66      	ldr	r2, [pc, #408]	@ (80067c0 <DMA_List_Init+0x27c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d03b      	beq.n	80066a4 <DMA_List_Init+0x160>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a64      	ldr	r2, [pc, #400]	@ (80067c4 <DMA_List_Init+0x280>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d036      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a63      	ldr	r2, [pc, #396]	@ (80067c8 <DMA_List_Init+0x284>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d031      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a61      	ldr	r2, [pc, #388]	@ (80067cc <DMA_List_Init+0x288>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d02c      	beq.n	80066a4 <DMA_List_Init+0x160>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a60      	ldr	r2, [pc, #384]	@ (80067d0 <DMA_List_Init+0x28c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d027      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a5e      	ldr	r2, [pc, #376]	@ (80067d4 <DMA_List_Init+0x290>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d022      	beq.n	80066a4 <DMA_List_Init+0x160>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a5d      	ldr	r2, [pc, #372]	@ (80067d8 <DMA_List_Init+0x294>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d01d      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a5b      	ldr	r2, [pc, #364]	@ (80067dc <DMA_List_Init+0x298>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d018      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a5a      	ldr	r2, [pc, #360]	@ (80067e0 <DMA_List_Init+0x29c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <DMA_List_Init+0x160>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a58      	ldr	r2, [pc, #352]	@ (80067e4 <DMA_List_Init+0x2a0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00e      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a57      	ldr	r2, [pc, #348]	@ (80067e8 <DMA_List_Init+0x2a4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d009      	beq.n	80066a4 <DMA_List_Init+0x160>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a55      	ldr	r2, [pc, #340]	@ (80067ec <DMA_List_Init+0x2a8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <DMA_List_Init+0x160>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a54      	ldr	r2, [pc, #336]	@ (80067f0 <DMA_List_Init+0x2ac>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <DMA_List_Init+0x164>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <DMA_List_Init+0x166>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2200      	movs	r2, #0
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a36      	ldr	r2, [pc, #216]	@ (80067d4 <DMA_List_Init+0x290>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <DMA_List_Init+0x202>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a34      	ldr	r2, [pc, #208]	@ (80067d8 <DMA_List_Init+0x294>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <DMA_List_Init+0x202>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a33      	ldr	r2, [pc, #204]	@ (80067dc <DMA_List_Init+0x298>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <DMA_List_Init+0x202>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a31      	ldr	r2, [pc, #196]	@ (80067e0 <DMA_List_Init+0x29c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <DMA_List_Init+0x202>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a30      	ldr	r2, [pc, #192]	@ (80067e4 <DMA_List_Init+0x2a0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <DMA_List_Init+0x202>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2e      	ldr	r2, [pc, #184]	@ (80067e8 <DMA_List_Init+0x2a4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <DMA_List_Init+0x202>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2d      	ldr	r2, [pc, #180]	@ (80067ec <DMA_List_Init+0x2a8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <DMA_List_Init+0x202>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2b      	ldr	r2, [pc, #172]	@ (80067f0 <DMA_List_Init+0x2ac>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d101      	bne.n	800674a <DMA_List_Init+0x206>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <DMA_List_Init+0x208>
 800674a:	2300      	movs	r3, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40020050 	.word	0x40020050
 8006778:	50020050 	.word	0x50020050
 800677c:	400200d0 	.word	0x400200d0
 8006780:	500200d0 	.word	0x500200d0
 8006784:	40020150 	.word	0x40020150
 8006788:	50020150 	.word	0x50020150
 800678c:	400201d0 	.word	0x400201d0
 8006790:	500201d0 	.word	0x500201d0
 8006794:	40020250 	.word	0x40020250
 8006798:	50020250 	.word	0x50020250
 800679c:	400202d0 	.word	0x400202d0
 80067a0:	500202d0 	.word	0x500202d0
 80067a4:	40020350 	.word	0x40020350
 80067a8:	50020350 	.word	0x50020350
 80067ac:	400203d0 	.word	0x400203d0
 80067b0:	500203d0 	.word	0x500203d0
 80067b4:	40020450 	.word	0x40020450
 80067b8:	50020450 	.word	0x50020450
 80067bc:	400204d0 	.word	0x400204d0
 80067c0:	500204d0 	.word	0x500204d0
 80067c4:	40020550 	.word	0x40020550
 80067c8:	50020550 	.word	0x50020550
 80067cc:	400205d0 	.word	0x400205d0
 80067d0:	500205d0 	.word	0x500205d0
 80067d4:	40020650 	.word	0x40020650
 80067d8:	50020650 	.word	0x50020650
 80067dc:	400206d0 	.word	0x400206d0
 80067e0:	500206d0 	.word	0x500206d0
 80067e4:	40020750 	.word	0x40020750
 80067e8:	50020750 	.word	0x50020750
 80067ec:	400207d0 	.word	0x400207d0
 80067f0:	500207d0 	.word	0x500207d0

080067f4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006806:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800680c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006812:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006818:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d017      	beq.n	800685a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	051b      	lsls	r3, r3, #20
 8006840:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006844:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	3b01      	subs	r3, #1
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006852:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006854:	431a      	orrs	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6859      	ldr	r1, [r3, #4]
 8006862:	f240 237f 	movw	r3, #639	@ 0x27f
 8006866:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006868:	431a      	orrs	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006876:	d10c      	bne.n	8006892 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d011      	beq.n	80068a8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	e00a      	b.n	80068a8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800689a:	d105      	bne.n	80068a8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00f      	beq.n	80068d0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068bc:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c2:	041b      	lsls	r3, r3, #16
 80068c4:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80068c8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80068ca:	431a      	orrs	r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d04e      	beq.n	8006984 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ee:	3b01      	subs	r3, #1
 80068f0:	0419      	lsls	r1, r3, #16
 80068f2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a9c <DMA_List_BuildNode+0x2a8>)
 80068f4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80068f6:	431a      	orrs	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006900:	2b00      	cmp	r3, #0
 8006902:	da06      	bge.n	8006912 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	e005      	b.n	800691e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006922:	2b00      	cmp	r3, #0
 8006924:	da06      	bge.n	8006934 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	609a      	str	r2, [r3, #8]
 8006932:	e005      	b.n	8006940 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006944:	2b00      	cmp	r3, #0
 8006946:	da06      	bge.n	8006956 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	e005      	b.n	8006962 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006966:	2b00      	cmp	r3, #0
 8006968:	da06      	bge.n	8006978 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	609a      	str	r2, [r3, #8]
 8006976:	e005      	b.n	8006984 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05d      	beq.n	8006a5c <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da09      	bge.n	80069bc <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ac:	425b      	negs	r3, r3
 80069ae:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	615a      	str	r2, [r3, #20]
 80069ba:	e005      	b.n	80069c8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0d      	bge.n	80069ec <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d4:	425b      	negs	r3, r3
 80069d6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0419      	lsls	r1, r3, #16
 80069e0:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa0 <DMA_List_BuildNode+0x2ac>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	431a      	orrs	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	615a      	str	r2, [r3, #20]
 80069ea:	e009      	b.n	8006a00 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f4:	0419      	lsls	r1, r3, #16
 80069f6:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <DMA_List_BuildNode+0x2ac>)
 80069f8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80069fa:	431a      	orrs	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	da08      	bge.n	8006a1a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0c:	425b      	negs	r3, r3
 8006a0e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	619a      	str	r2, [r3, #24]
 8006a18:	e004      	b.n	8006a24 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da0b      	bge.n	8006a44 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a30:	425b      	negs	r3, r3
 8006a32:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	619a      	str	r2, [r3, #24]
 8006a42:	e007      	b.n	8006a54 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	61da      	str	r2, [r3, #28]
 8006a5a:	e002      	b.n	8006a62 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d006      	beq.n	8006a84 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006a82:	e005      	b.n	8006a90 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	07ff0000 	.word	0x07ff0000
 8006aa0:	1fff0000 	.word	0x1fff0000

08006aa4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0208 	and.w	r2, r3, #8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0203 	and.w	r2, r3, #3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006af2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006afc:	0d1b      	lsrs	r3, r3, #20
 8006afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b02:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b66      	ldr	r3, [pc, #408]	@ (8006cb4 <DMA_List_GetNodeConfig+0x210>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b3e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b46:	60da      	str	r2, [r3, #12]
 8006b48:	e013      	b.n	8006b72 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	e002      	b.n	8006b72 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006bd6:	e002      	b.n	8006bde <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04a      	beq.n	8006c90 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c04:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006c06:	89fa      	ldrh	r2, [r7, #14]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006c1a:	89fa      	ldrh	r2, [r7, #14]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c30:	425a      	negs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	425a      	negs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006c52:	89fa      	ldrh	r2, [r7, #14]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	0c1b      	lsrs	r3, r3, #16
 8006c5e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006c60:	89fa      	ldrh	r2, [r7, #14]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	425a      	negs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da11      	bge.n	8006ca8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c88:	425a      	negs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006c8e:	e00b      	b.n	8006ca8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	0c002000 	.word	0x0c002000

08006cb8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	0c1b      	lsrs	r3, r3, #16
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e00a      	b.n	8006cfa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e004      	b.n	8006cfa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e00e      	b.n	8006d56 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e006      	b.n	8006d56 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e00b      	b.n	8006d84 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d001      	beq.n	8006d82 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e000      	b.n	8006d84 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4a0d      	ldr	r2, [pc, #52]	@ (8006de8 <DMA_List_GetCLLRNodeInfo+0x58>)
 8006db2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00f      	beq.n	8006dda <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006dc0:	e00b      	b.n	8006dda <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006dcc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2205      	movs	r2, #5
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	fe010000 	.word	0xfe010000
 8006dec:	f8010000 	.word	0xf8010000

08006df0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	@ 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d142      	bne.n	8006e9a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8006e14:	e01d      	b.n	8006e52 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e26:	4013      	ands	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	e00f      	b.n	8006e4c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006e44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e48:	4013      	ands	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3dc      	bcc.n	8006e16 <DMA_List_FindNode+0x26>
 8006e5c:	e029      	b.n	8006eb2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e6e:	4013      	ands	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e00f      	b.n	8006e94 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4413      	add	r3, r2
 8006e84:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006e8c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e90:	4013      	ands	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d206      	bcs.n	8006eb2 <DMA_List_FindNode+0xc2>
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006eaa:	4013      	ands	r3, r2
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d1d5      	bne.n	8006e5e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d001      	beq.n	8006eca <DMA_List_FindNode+0xda>
    {
      return 1U;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e02b      	b.n	8006f22 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00f      	beq.n	8006f20 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	461a      	mov	r2, r3
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8006f10:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3724      	adds	r7, #36	@ 0x24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b089      	sub	sp, #36	@ 0x24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006f42:	e1ba      	b.n	80072ba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2101      	movs	r1, #1
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	4013      	ands	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 81aa 	beq.w	80072b4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a55      	ldr	r2, [pc, #340]	@ (80070b8 <HAL_GPIO_Init+0x188>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d15d      	bne.n	8007024 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8006f6e:	2201      	movs	r2, #1
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43db      	mvns	r3, r3
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 0201 	and.w	r2, r3, #1
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006f98:	4a48      	ldr	r2, [pc, #288]	@ (80070bc <HAL_GPIO_Init+0x18c>)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fa0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006fa2:	4a46      	ldr	r2, [pc, #280]	@ (80070bc <HAL_GPIO_Init+0x18c>)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4413      	add	r3, r2
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	08da      	lsrs	r2, r3, #3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3208      	adds	r2, #8
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	220f      	movs	r2, #15
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	220b      	movs	r2, #11
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	08da      	lsrs	r2, r3, #3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3208      	adds	r2, #8
 8006fee:	69f9      	ldr	r1, [r7, #28]
 8006ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	2203      	movs	r2, #3
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	43db      	mvns	r3, r3
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	4013      	ands	r3, r2
 800700a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	2202      	movs	r2, #2
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	4313      	orrs	r3, r2
 800701a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	e067      	b.n	80070f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d003      	beq.n	8007034 <HAL_GPIO_Init+0x104>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b12      	cmp	r3, #18
 8007032:	d145      	bne.n	80070c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	08da      	lsrs	r2, r3, #3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3208      	adds	r2, #8
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	220f      	movs	r2, #15
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	4013      	ands	r3, r2
 8007056:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f003 020f 	and.w	r2, r3, #15
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	4313      	orrs	r3, r2
 8007070:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	08da      	lsrs	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3208      	adds	r2, #8
 800707a:	69f9      	ldr	r1, [r7, #28]
 800707c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	2203      	movs	r2, #3
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	4013      	ands	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f003 0203 	and.w	r2, r3, #3
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e01e      	b.n	80070f4 <HAL_GPIO_Init+0x1c4>
 80070b6:	bf00      	nop
 80070b8:	46020000 	.word	0x46020000
 80070bc:	080130c0 	.word	0x080130c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	2203      	movs	r2, #3
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	4013      	ands	r3, r2
 80070d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0203 	and.w	r2, r3, #3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d00b      	beq.n	8007114 <HAL_GPIO_Init+0x1e4>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d007      	beq.n	8007114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007108:	2b11      	cmp	r3, #17
 800710a:	d003      	beq.n	8007114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b12      	cmp	r3, #18
 8007112:	d130      	bne.n	8007176 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	2203      	movs	r2, #3
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	4013      	ands	r3, r2
 800712a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	4313      	orrs	r3, r2
 800713c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800714a:	2201      	movs	r2, #1
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43db      	mvns	r3, r3
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	4013      	ands	r3, r2
 8007158:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	f003 0201 	and.w	r2, r3, #1
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	4313      	orrs	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d017      	beq.n	80071ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	2203      	movs	r2, #3
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	43db      	mvns	r3, r3
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	4013      	ands	r3, r2
 8007194:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d07c      	beq.n	80072b4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80071ba:	4a47      	ldr	r2, [pc, #284]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	3318      	adds	r3, #24
 80071c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	220f      	movs	r2, #15
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	4013      	ands	r3, r2
 80071dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	0a9a      	lsrs	r2, r3, #10
 80071e2:	4b3e      	ldr	r3, [pc, #248]	@ (80072dc <HAL_GPIO_Init+0x3ac>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	f002 0203 	and.w	r2, r2, #3
 80071ec:	00d2      	lsls	r2, r2, #3
 80071ee:	4093      	lsls	r3, r2
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80071f6:	4938      	ldr	r1, [pc, #224]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	089b      	lsrs	r3, r3, #2
 80071fc:	3318      	adds	r3, #24
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007204:	4b34      	ldr	r3, [pc, #208]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	43db      	mvns	r3, r3
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	4013      	ands	r3, r2
 8007212:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007228:	4a2b      	ldr	r2, [pc, #172]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800722e:	4b2a      	ldr	r3, [pc, #168]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	43db      	mvns	r3, r3
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	4013      	ands	r3, r2
 800723c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007252:	4a21      	ldr	r2, [pc, #132]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007258:	4b1f      	ldr	r3, [pc, #124]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 800725a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800725e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	43db      	mvns	r3, r3
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	4013      	ands	r3, r2
 8007268:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800727e:	4a16      	ldr	r2, [pc, #88]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007286:	4b14      	ldr	r3, [pc, #80]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 8007288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800728c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	43db      	mvns	r3, r3
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	4013      	ands	r3, r2
 8007296:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80072ac:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <HAL_GPIO_Init+0x3a8>)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3301      	adds	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f ae3d 	bne.w	8006f44 <HAL_GPIO_Init+0x14>
  }
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	3724      	adds	r7, #36	@ 0x24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	46022000 	.word	0x46022000
 80072dc:	002f7f7f 	.word	0x002f7f7f

080072e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
 80072ec:	4613      	mov	r3, r2
 80072ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072f0:	787b      	ldrb	r3, [r7, #1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072f6:	887a      	ldrh	r2, [r7, #2]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80072fc:	e002      	b.n	8007304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80072fe:	887a      	ldrh	r2, [r7, #2]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800731a:	4b0f      	ldr	r3, [pc, #60]	@ (8007358 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d006      	beq.n	8007334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007326:	4a0c      	ldr	r2, [pc, #48]	@ (8007358 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f814 	bl	800735c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007334:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007340:	4a05      	ldr	r2, [pc, #20]	@ (8007358 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f812 	bl	8007372 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	46022000 	.word	0x46022000

0800735c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	4603      	mov	r3, r0
 800737a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e08d      	b.n	80074b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fa fb12 	bl	80019d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2224      	movs	r2, #36	@ 0x24
 80073b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0201 	bic.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80073d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	e006      	b.n	8007410 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800740e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d108      	bne.n	800742a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	e007      	b.n	800743a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800744c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800745c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69d9      	ldr	r1, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d138      	bne.n	8007546 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074de:	2302      	movs	r3, #2
 80074e0:	e032      	b.n	8007548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2224      	movs	r2, #36	@ 0x24
 80074ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0201 	bic.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007510:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6819      	ldr	r1, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0201 	orr.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	e000      	b.n	8007548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007546:	2302      	movs	r3, #2
  }
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	d139      	bne.n	80075de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007574:	2302      	movs	r3, #2
 8007576:	e033      	b.n	80075e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2224      	movs	r2, #36	@ 0x24
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0201 	bic.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80075fc:	bf00      	nop
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	46020800 	.word	0x46020800

0800760c <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e059      	b.n	80076d2 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800761e:	4b30      	ldr	r3, [pc, #192]	@ (80076e0 <HAL_PWR_ConfigPVD+0xd4>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	492d      	ldr	r1, [pc, #180]	@ (80076e0 <HAL_PWR_ConfigPVD+0xd4>)
 800762c:	4313      	orrs	r3, r2
 800762e:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8007630:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007636:	4a2b      	ldr	r2, [pc, #172]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007640:	4b28      	ldr	r3, [pc, #160]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007646:	4a27      	ldr	r2, [pc, #156]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800764c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8007650:	4b24      	ldr	r3, [pc, #144]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a23      	ldr	r2, [pc, #140]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800765a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800765c:	4b21      	ldr	r3, [pc, #132]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4a20      	ldr	r2, [pc, #128]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007666:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007674:	4b1b      	ldr	r3, [pc, #108]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767a:	4a1a      	ldr	r2, [pc, #104]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 800767c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f003 0308 	and.w	r3, r3, #8
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007690:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007696:	4a13      	ldr	r2, [pc, #76]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 8007698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800769c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80076ac:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0c      	ldr	r2, [pc, #48]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 80076b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b6:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80076c4:	4b07      	ldr	r3, [pc, #28]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4a06      	ldr	r2, [pc, #24]	@ (80076e4 <HAL_PWR_ConfigPVD+0xd8>)
 80076ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ce:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	46020800 	.word	0x46020800
 80076e4:	46022000 	.word	0x46022000

080076e8 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80076ec:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <HAL_PWR_EnablePVD+0x1c>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	4a04      	ldr	r2, [pc, #16]	@ (8007704 <HAL_PWR_EnablePVD+0x1c>)
 80076f2:	f043 0310 	orr.w	r3, r3, #16
 80076f6:	6113      	str	r3, [r2, #16]
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	46020800 	.word	0x46020800

08007708 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007718:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d10b      	bne.n	800773a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d905      	bls.n	8007736 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800772a:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007734:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	e057      	b.n	80077ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007740:	d90a      	bls.n	8007758 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007742:	4b2d      	ldr	r3, [pc, #180]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4313      	orrs	r3, r2
 800774e:	4a2a      	ldr	r2, [pc, #168]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007754:	60d3      	str	r3, [r2, #12]
 8007756:	e007      	b.n	8007768 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007758:	4b27      	ldr	r3, [pc, #156]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007760:	4925      	ldr	r1, [pc, #148]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4313      	orrs	r3, r2
 8007766:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007768:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	099b      	lsrs	r3, r3, #6
 8007774:	2232      	movs	r2, #50	@ 0x32
 8007776:	fb02 f303 	mul.w	r3, r2, r3
 800777a:	4a21      	ldr	r2, [pc, #132]	@ (8007800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	099b      	lsrs	r3, r3, #6
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007786:	e002      	b.n	800778e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3b01      	subs	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800778e:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <HAL_PWREx_ControlVoltageScaling+0x98>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f3      	bne.n	8007788 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01b      	beq.n	80077de <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80077a6:	4b15      	ldr	r3, [pc, #84]	@ (80077fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a15      	ldr	r2, [pc, #84]	@ (8007800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80077ac:	fba2 2303 	umull	r2, r3, r2, r3
 80077b0:	099b      	lsrs	r3, r3, #6
 80077b2:	2232      	movs	r2, #50	@ 0x32
 80077b4:	fb02 f303 	mul.w	r3, r2, r3
 80077b8:	4a11      	ldr	r2, [pc, #68]	@ (8007800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80077c4:	e002      	b.n	80077cc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80077cc:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <HAL_PWREx_ControlVoltageScaling+0xd6>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f3      	bne.n	80077c6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e000      	b.n	80077ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	46020800 	.word	0x46020800
 80077fc:	20000000 	.word	0x20000000
 8007800:	10624dd3 	.word	0x10624dd3

08007804 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <HAL_PWREx_GetVoltageRange+0x18>)
 800780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007810:	4618      	mov	r0, r3
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	46020800 	.word	0x46020800

08007820 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007828:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <HAL_PWREx_ConfigSupply+0x94>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	@ (80078b8 <HAL_PWREx_ConfigSupply+0x98>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	099b      	lsrs	r3, r3, #6
 8007834:	2232      	movs	r2, #50	@ 0x32
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	4a1f      	ldr	r2, [pc, #124]	@ (80078b8 <HAL_PWREx_ConfigSupply+0x98>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	099b      	lsrs	r3, r3, #6
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d113      	bne.n	8007874 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800784c:	4b1b      	ldr	r3, [pc, #108]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4a1a      	ldr	r2, [pc, #104]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007852:	f023 0302 	bic.w	r3, r3, #2
 8007856:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007858:	e002      	b.n	8007860 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3b01      	subs	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007860:	4b16      	ldr	r3, [pc, #88]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d116      	bne.n	800789a <HAL_PWREx_ConfigSupply+0x7a>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f3      	bne.n	800785a <HAL_PWREx_ConfigSupply+0x3a>
 8007872:	e012      	b.n	800789a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007874:	4b11      	ldr	r3, [pc, #68]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	4a10      	ldr	r2, [pc, #64]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 800787a:	f043 0302 	orr.w	r3, r3, #2
 800787e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007880:	e002      	b.n	8007888 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3b01      	subs	r3, #1
 8007886:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007888:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <HAL_PWREx_ConfigSupply+0x9c>)
 800788a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_PWREx_ConfigSupply+0x7a>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f3      	bne.n	8007882 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e000      	b.n	80078a6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000000 	.word	0x20000000
 80078b8:	10624dd3 	.word	0x10624dd3
 80078bc:	46020800 	.word	0x46020800

080078c0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <HAL_PWREx_EnableVddA+0x1c>)
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	4a04      	ldr	r2, [pc, #16]	@ (80078dc <HAL_PWREx_EnableVddA+0x1c>)
 80078ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078ce:	6113      	str	r3, [r2, #16]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	46020800 	.word	0x46020800

080078e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	@ 0x38
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f000 bec6 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078fa:	4b99      	ldr	r3, [pc, #612]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 030c 	and.w	r3, r3, #12
 8007902:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007904:	4b96      	ldr	r3, [pc, #600]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 816c 	beq.w	8007bf4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_RCC_OscConfig+0x52>
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	2b0c      	cmp	r3, #12
 8007926:	f040 80de 	bne.w	8007ae6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	2b01      	cmp	r3, #1
 800792e:	f040 80da 	bne.w	8007ae6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f000 bea3 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007944:	4b86      	ldr	r3, [pc, #536]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <HAL_RCC_OscConfig+0x7a>
 8007950:	4b83      	ldr	r3, [pc, #524]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007958:	e005      	b.n	8007966 <HAL_RCC_OscConfig+0x86>
 800795a:	4b81      	ldr	r3, [pc, #516]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 800795c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007966:	4293      	cmp	r3, r2
 8007968:	d255      	bcs.n	8007a16 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	4618      	mov	r0, r3
 8007976:	f001 f9db 	bl	8008d30 <RCC_SetFlashLatencyFromMSIRange>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f000 be80 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007986:	4b76      	ldr	r3, [pc, #472]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	4a75      	ldr	r2, [pc, #468]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 800798c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007990:	6093      	str	r3, [r2, #8]
 8007992:	4b73      	ldr	r3, [pc, #460]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	4970      	ldr	r1, [pc, #448]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80079ac:	d309      	bcc.n	80079c2 <HAL_RCC_OscConfig+0xe2>
 80079ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f023 021f 	bic.w	r2, r3, #31
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	4969      	ldr	r1, [pc, #420]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	60cb      	str	r3, [r1, #12]
 80079c0:	e07e      	b.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da0a      	bge.n	80079e0 <HAL_RCC_OscConfig+0x100>
 80079ca:	4b65      	ldr	r3, [pc, #404]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	015b      	lsls	r3, r3, #5
 80079d8:	4961      	ldr	r1, [pc, #388]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	60cb      	str	r3, [r1, #12]
 80079de:	e06f      	b.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e8:	d30a      	bcc.n	8007a00 <HAL_RCC_OscConfig+0x120>
 80079ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	4959      	ldr	r1, [pc, #356]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60cb      	str	r3, [r1, #12]
 80079fe:	e05f      	b.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
 8007a00:	4b57      	ldr	r3, [pc, #348]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	03db      	lsls	r3, r3, #15
 8007a0e:	4954      	ldr	r1, [pc, #336]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60cb      	str	r3, [r1, #12]
 8007a14:	e054      	b.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007a16:	4b52      	ldr	r3, [pc, #328]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4a51      	ldr	r2, [pc, #324]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a20:	6093      	str	r3, [r2, #8]
 8007a22:	4b4f      	ldr	r3, [pc, #316]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	494c      	ldr	r1, [pc, #304]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007a3c:	d309      	bcc.n	8007a52 <HAL_RCC_OscConfig+0x172>
 8007a3e:	4b48      	ldr	r3, [pc, #288]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f023 021f 	bic.w	r2, r3, #31
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	4945      	ldr	r1, [pc, #276]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60cb      	str	r3, [r1, #12]
 8007a50:	e028      	b.n	8007aa4 <HAL_RCC_OscConfig+0x1c4>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da0a      	bge.n	8007a70 <HAL_RCC_OscConfig+0x190>
 8007a5a:	4b41      	ldr	r3, [pc, #260]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	015b      	lsls	r3, r3, #5
 8007a68:	493d      	ldr	r1, [pc, #244]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60cb      	str	r3, [r1, #12]
 8007a6e:	e019      	b.n	8007aa4 <HAL_RCC_OscConfig+0x1c4>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a78:	d30a      	bcc.n	8007a90 <HAL_RCC_OscConfig+0x1b0>
 8007a7a:	4b39      	ldr	r3, [pc, #228]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	029b      	lsls	r3, r3, #10
 8007a88:	4935      	ldr	r1, [pc, #212]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60cb      	str	r3, [r1, #12]
 8007a8e:	e009      	b.n	8007aa4 <HAL_RCC_OscConfig+0x1c4>
 8007a90:	4b33      	ldr	r3, [pc, #204]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	03db      	lsls	r3, r3, #15
 8007a9e:	4930      	ldr	r1, [pc, #192]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 f93e 	bl	8008d30 <RCC_SetFlashLatencyFromMSIRange>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f000 bde3 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007ac0:	f001 f8e0 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007ac4:	4b27      	ldr	r3, [pc, #156]	@ (8007b64 <HAL_RCC_OscConfig+0x284>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fa feaf 	bl	800282c <HAL_InitTick>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 808a 	beq.w	8007bf2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ae2:	f000 bdd0 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d066      	beq.n	8007bbc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007aee:	4b1c      	ldr	r3, [pc, #112]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007afa:	f7fa ff21 	bl	8002940 <HAL_GetTick>
 8007afe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007b00:	e009      	b.n	8007b16 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b02:	f7fa ff1d 	bl	8002940 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d902      	bls.n	8007b16 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	f000 bdb8 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007b16:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ef      	beq.n	8007b02 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007b22:	4b0f      	ldr	r3, [pc, #60]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	4a0e      	ldr	r2, [pc, #56]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b2c:	6093      	str	r3, [r2, #8]
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	4909      	ldr	r1, [pc, #36]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007b48:	d30e      	bcc.n	8007b68 <HAL_RCC_OscConfig+0x288>
 8007b4a:	4b05      	ldr	r3, [pc, #20]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f023 021f 	bic.w	r2, r3, #31
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	4902      	ldr	r1, [pc, #8]	@ (8007b60 <HAL_RCC_OscConfig+0x280>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60cb      	str	r3, [r1, #12]
 8007b5c:	e04a      	b.n	8007bf4 <HAL_RCC_OscConfig+0x314>
 8007b5e:	bf00      	nop
 8007b60:	46020c00 	.word	0x46020c00
 8007b64:	20000004 	.word	0x20000004
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da0a      	bge.n	8007b86 <HAL_RCC_OscConfig+0x2a6>
 8007b70:	4b99      	ldr	r3, [pc, #612]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	015b      	lsls	r3, r3, #5
 8007b7e:	4996      	ldr	r1, [pc, #600]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60cb      	str	r3, [r1, #12]
 8007b84:	e036      	b.n	8007bf4 <HAL_RCC_OscConfig+0x314>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	d30a      	bcc.n	8007ba6 <HAL_RCC_OscConfig+0x2c6>
 8007b90:	4b91      	ldr	r3, [pc, #580]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	029b      	lsls	r3, r3, #10
 8007b9e:	498e      	ldr	r1, [pc, #568]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60cb      	str	r3, [r1, #12]
 8007ba4:	e026      	b.n	8007bf4 <HAL_RCC_OscConfig+0x314>
 8007ba6:	4b8c      	ldr	r3, [pc, #560]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	03db      	lsls	r3, r3, #15
 8007bb4:	4988      	ldr	r1, [pc, #544]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60cb      	str	r3, [r1, #12]
 8007bba:	e01b      	b.n	8007bf4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007bbc:	4b86      	ldr	r3, [pc, #536]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a85      	ldr	r2, [pc, #532]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bc2:	f023 0301 	bic.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007bc8:	f7fa feba 	bl	8002940 <HAL_GetTick>
 8007bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007bce:	e009      	b.n	8007be4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bd0:	f7fa feb6 	bl	8002940 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d902      	bls.n	8007be4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	f000 bd51 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007be4:	4b7c      	ldr	r3, [pc, #496]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ef      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x2f0>
 8007bf0:	e000      	b.n	8007bf4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007bf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 808d 	beq.w	8007d1c <HAL_RCC_OscConfig+0x43c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d005      	beq.n	8007c14 <HAL_RCC_OscConfig+0x334>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	2b0c      	cmp	r3, #12
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d106      	bne.n	8007c22 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d17f      	bne.n	8007d1c <HAL_RCC_OscConfig+0x43c>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f000 bd32 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c2a:	d106      	bne.n	8007c3a <HAL_RCC_OscConfig+0x35a>
 8007c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a69      	ldr	r2, [pc, #420]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e041      	b.n	8007cbe <HAL_RCC_OscConfig+0x3de>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c42:	d112      	bne.n	8007c6a <HAL_RCC_OscConfig+0x38a>
 8007c44:	4b64      	ldr	r3, [pc, #400]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a63      	ldr	r2, [pc, #396]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	4b61      	ldr	r3, [pc, #388]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a60      	ldr	r2, [pc, #384]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a5d      	ldr	r2, [pc, #372]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e029      	b.n	8007cbe <HAL_RCC_OscConfig+0x3de>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007c72:	d112      	bne.n	8007c9a <HAL_RCC_OscConfig+0x3ba>
 8007c74:	4b58      	ldr	r3, [pc, #352]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a57      	ldr	r2, [pc, #348]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	4b55      	ldr	r3, [pc, #340]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a54      	ldr	r2, [pc, #336]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4b52      	ldr	r3, [pc, #328]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a51      	ldr	r2, [pc, #324]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	e011      	b.n	8007cbe <HAL_RCC_OscConfig+0x3de>
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a4b      	ldr	r2, [pc, #300]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4b49      	ldr	r3, [pc, #292]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a48      	ldr	r2, [pc, #288]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d015      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x412>
      {
        tickstart = HAL_GetTick();
 8007cc6:	f7fa fe3b 	bl	8002940 <HAL_GetTick>
 8007cca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ccc:	e00a      	b.n	8007ce4 <HAL_RCC_OscConfig+0x404>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cce:	f7fa fe37 	bl	8002940 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cdc:	d902      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x404>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	f000 bcd1 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0ee      	beq.n	8007cce <HAL_RCC_OscConfig+0x3ee>
 8007cf0:	e014      	b.n	8007d1c <HAL_RCC_OscConfig+0x43c>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007cf2:	f7fa fe25 	bl	8002940 <HAL_GetTick>
 8007cf6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cf8:	e00a      	b.n	8007d10 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cfa:	f7fa fe21 	bl	8002940 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d08:	d902      	bls.n	8007d10 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	f000 bcbb 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d10:	4b31      	ldr	r3, [pc, #196]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1ee      	bne.n	8007cfa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d05f      	beq.n	8007de8 <HAL_RCC_OscConfig+0x508>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d005      	beq.n	8007d3a <HAL_RCC_OscConfig+0x45a>
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d30:	2b0c      	cmp	r3, #12
 8007d32:	d114      	bne.n	8007d5e <HAL_RCC_OscConfig+0x47e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d111      	bne.n	8007d5e <HAL_RCC_OscConfig+0x47e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f000 bc9f 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007d48:	4b23      	ldr	r3, [pc, #140]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	4920      	ldr	r1, [pc, #128]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007d5c:	e044      	b.n	8007de8 <HAL_RCC_OscConfig+0x508>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d024      	beq.n	8007db0 <HAL_RCC_OscConfig+0x4d0>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007d66:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007d72:	f7fa fde5 	bl	8002940 <HAL_GetTick>
 8007d76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d78:	e009      	b.n	8007d8e <HAL_RCC_OscConfig+0x4ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d7a:	f7fa fde1 	bl	8002940 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d902      	bls.n	8007d8e <HAL_RCC_OscConfig+0x4ae>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	f000 bc7c 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d8e:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0ef      	beq.n	8007d7a <HAL_RCC_OscConfig+0x49a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	490b      	ldr	r1, [pc, #44]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	610b      	str	r3, [r1, #16]
 8007dae:	e01b      	b.n	8007de8 <HAL_RCC_OscConfig+0x508>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007db0:	4b09      	ldr	r3, [pc, #36]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a08      	ldr	r2, [pc, #32]	@ (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007db6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007dbc:	f7fa fdc0 	bl	8002940 <HAL_GetTick>
 8007dc0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dc2:	e00b      	b.n	8007ddc <HAL_RCC_OscConfig+0x4fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dc4:	f7fa fdbc 	bl	8002940 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d904      	bls.n	8007ddc <HAL_RCC_OscConfig+0x4fc>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	f000 bc57 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
 8007dd8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ddc:	4baf      	ldr	r3, [pc, #700]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ed      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x4e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80c8 	beq.w	8007f86 <HAL_RCC_OscConfig+0x6a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfc:	4ba7      	ldr	r3, [pc, #668]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d111      	bne.n	8007e2e <HAL_RCC_OscConfig+0x54e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e0a:	4ba4      	ldr	r3, [pc, #656]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e10:	4aa2      	ldr	r2, [pc, #648]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007e12:	f043 0304 	orr.w	r3, r3, #4
 8007e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007e1a:	4ba0      	ldr	r3, [pc, #640]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d119      	bne.n	8007e6e <HAL_RCC_OscConfig+0x58e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007e3a:	4b99      	ldr	r3, [pc, #612]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3e:	4a98      	ldr	r2, [pc, #608]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e46:	f7fa fd7b 	bl	8002940 <HAL_GetTick>
 8007e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e4c:	e009      	b.n	8007e62 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e4e:	f7fa fd77 	bl	8002940 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d902      	bls.n	8007e62 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	f000 bc12 	b.w	8008686 <HAL_RCC_OscConfig+0xda6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e62:	4b8f      	ldr	r3, [pc, #572]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0ef      	beq.n	8007e4e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d05f      	beq.n	8007f36 <HAL_RCC_OscConfig+0x656>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007e76:	4b89      	ldr	r3, [pc, #548]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e7c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d037      	beq.n	8007efc <HAL_RCC_OscConfig+0x61c>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d006      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x5c4>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x5c4>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e3f0      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01b      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x606>
        {
          __HAL_RCC_LSI_DISABLE();
 8007eae:	4b7b      	ldr	r3, [pc, #492]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eb4:	4a79      	ldr	r2, [pc, #484]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007eb6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007ebe:	f7fa fd3f 	bl	8002940 <HAL_GetTick>
 8007ec2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCC_OscConfig+0x5f8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec6:	f7fa fd3b 	bl	8002940 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x5f8>
            {
              return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e3d6      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007ed8:	4b70      	ldr	r3, [pc, #448]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1ef      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x5e6>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	4969      	ldr	r1, [pc, #420]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007efc:	4b67      	ldr	r3, [pc, #412]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f02:	4a66      	ldr	r2, [pc, #408]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007f0c:	f7fa fd18 	bl	8002940 <HAL_GetTick>
 8007f10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x646>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f14:	f7fa fd14 	bl	8002940 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x646>
        {
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e3af      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007f26:	4b5d      	ldr	r3, [pc, #372]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0ef      	beq.n	8007f14 <HAL_RCC_OscConfig+0x634>
 8007f34:	e01b      	b.n	8007f6e <HAL_RCC_OscConfig+0x68e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007f36:	4b59      	ldr	r3, [pc, #356]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f3c:	4a57      	ldr	r2, [pc, #348]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007f46:	f7fa fcfb 	bl	8002940 <HAL_GetTick>
 8007f4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_OscConfig+0x680>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f4e:	f7fa fcf7 	bl	8002940 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x680>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e392      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007f60:	4b4e      	ldr	r3, [pc, #312]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1ef      	bne.n	8007f4e <HAL_RCC_OscConfig+0x66e>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d107      	bne.n	8007f86 <HAL_RCC_OscConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f76:	4b49      	ldr	r3, [pc, #292]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f7c:	4a47      	ldr	r2, [pc, #284]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f7e:	f023 0304 	bic.w	r3, r3, #4
 8007f82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 810d 	beq.w	80081ae <HAL_RCC_OscConfig+0x8ce>
  {
    FlagStatus pwrclkchanged = RESET;
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9a:	4b40      	ldr	r3, [pc, #256]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d111      	bne.n	8007fcc <HAL_RCC_OscConfig+0x6ec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fae:	4a3b      	ldr	r2, [pc, #236]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007fb0:	f043 0304 	orr.w	r3, r3, #4
 8007fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007fb8:	4b38      	ldr	r3, [pc, #224]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8007fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007fcc:	4b34      	ldr	r3, [pc, #208]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d118      	bne.n	800800a <HAL_RCC_OscConfig+0x72a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007fd8:	4b31      	ldr	r3, [pc, #196]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fdc:	4a30      	ldr	r2, [pc, #192]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fe4:	f7fa fcac 	bl	8002940 <HAL_GetTick>
 8007fe8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x71e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fec:	f7fa fca8 	bl	8002940 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x71e>
        {
          return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e343      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ffe:	4b28      	ldr	r3, [pc, #160]	@ (80080a0 <HAL_RCC_OscConfig+0x7c0>)
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0f0      	beq.n	8007fec <HAL_RCC_OscConfig+0x70c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01f      	beq.n	8008056 <HAL_RCC_OscConfig+0x776>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d010      	beq.n	8008044 <HAL_RCC_OscConfig+0x764>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008022:	4b1e      	ldr	r3, [pc, #120]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8008024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008028:	4a1c      	ldr	r2, [pc, #112]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 800802a:	f043 0304 	orr.w	r3, r3, #4
 800802e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008032:	4b1a      	ldr	r3, [pc, #104]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8008034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008038:	4a18      	ldr	r2, [pc, #96]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 800803a:	f043 0301 	orr.w	r3, r3, #1
 800803e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008042:	e018      	b.n	8008076 <HAL_RCC_OscConfig+0x796>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008044:	4b15      	ldr	r3, [pc, #84]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8008046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800804a:	4a14      	ldr	r2, [pc, #80]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 800804c:	f043 0301 	orr.w	r3, r3, #1
 8008050:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008054:	e00f      	b.n	8008076 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008056:	4b11      	ldr	r3, [pc, #68]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8008058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800805c:	4a0f      	ldr	r2, [pc, #60]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 8008068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800806c:	4a0b      	ldr	r2, [pc, #44]	@ (800809c <HAL_RCC_OscConfig+0x7bc>)
 800806e:	f023 0304 	bic.w	r3, r3, #4
 8008072:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d055      	beq.n	800812a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800807e:	f7fa fc5f 	bl	8002940 <HAL_GetTick>
 8008082:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008084:	e00e      	b.n	80080a4 <HAL_RCC_OscConfig+0x7c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7fa fc5b 	bl	8002940 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008094:	d906      	bls.n	80080a4 <HAL_RCC_OscConfig+0x7c4>
        {
          return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e2f5      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
 800809a:	bf00      	nop
 800809c:	46020c00 	.word	0x46020c00
 80080a0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080a4:	4ba2      	ldr	r3, [pc, #648]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0e9      	beq.n	8008086 <HAL_RCC_OscConfig+0x7a6>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01a      	beq.n	80080f4 <HAL_RCC_OscConfig+0x814>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80080be:	4b9c      	ldr	r3, [pc, #624]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080c4:	4a9a      	ldr	r2, [pc, #616]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80080ce:	e009      	b.n	80080e4 <HAL_RCC_OscConfig+0x804>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d0:	f7fa fc36 	bl	8002940 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e2d0      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80080e4:	4b92      	ldr	r3, [pc, #584]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0ee      	beq.n	80080d0 <HAL_RCC_OscConfig+0x7f0>
 80080f2:	e050      	b.n	8008196 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80080f4:	4b8e      	ldr	r3, [pc, #568]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080fa:	4a8d      	ldr	r2, [pc, #564]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80080fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008100:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008104:	e009      	b.n	800811a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fa fc1b 	bl	8002940 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008114:	d901      	bls.n	800811a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e2b5      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800811a:	4b85      	ldr	r3, [pc, #532]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800811c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ee      	bne.n	8008106 <HAL_RCC_OscConfig+0x826>
 8008128:	e035      	b.n	8008196 <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800812a:	f7fa fc09 	bl	8002940 <HAL_GetTick>
 800812e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008130:	e009      	b.n	8008146 <HAL_RCC_OscConfig+0x866>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008132:	f7fa fc05 	bl	8002940 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x866>
        {
          return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e29f      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008146:	4b7a      	ldr	r3, [pc, #488]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1ee      	bne.n	8008132 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008154:	4b76      	ldr	r3, [pc, #472]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800815a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d019      	beq.n	8008196 <HAL_RCC_OscConfig+0x8b6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008162:	4b73      	ldr	r3, [pc, #460]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008168:	4a71      	ldr	r2, [pc, #452]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800816a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800816e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008172:	e009      	b.n	8008188 <HAL_RCC_OscConfig+0x8a8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008174:	f7fa fbe4 	bl	8002940 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x8a8>
          {
            return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e27e      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008188:	4b69      	ldr	r3, [pc, #420]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800818a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800818e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1ee      	bne.n	8008174 <HAL_RCC_OscConfig+0x894>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008196:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800819a:	2b01      	cmp	r3, #1
 800819c:	d107      	bne.n	80081ae <HAL_RCC_OscConfig+0x8ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800819e:	4b64      	ldr	r3, [pc, #400]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a4:	4a62      	ldr	r2, [pc, #392]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081a6:	f023 0304 	bic.w	r3, r3, #4
 80081aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d036      	beq.n	8008228 <HAL_RCC_OscConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d019      	beq.n	80081f6 <HAL_RCC_OscConfig+0x916>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80081c2:	4b5b      	ldr	r3, [pc, #364]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a5a      	ldr	r2, [pc, #360]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80081ce:	f7fa fbb7 	bl	8002940 <HAL_GetTick>
 80081d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80081d4:	e008      	b.n	80081e8 <HAL_RCC_OscConfig+0x908>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081d6:	f7fa fbb3 	bl	8002940 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e24e      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80081e8:	4b51      	ldr	r3, [pc, #324]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0f0      	beq.n	80081d6 <HAL_RCC_OscConfig+0x8f6>
 80081f4:	e018      	b.n	8008228 <HAL_RCC_OscConfig+0x948>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80081f6:	4b4e      	ldr	r3, [pc, #312]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4d      	ldr	r2, [pc, #308]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80081fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008200:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008202:	f7fa fb9d 	bl	8002940 <HAL_GetTick>
 8008206:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x93c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800820a:	f7fa fb99 	bl	8002940 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x93c>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e234      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800821c:	4b44      	ldr	r3, [pc, #272]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <HAL_RCC_OscConfig+0x92a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008230:	2b00      	cmp	r3, #0
 8008232:	d036      	beq.n	80082a2 <HAL_RCC_OscConfig+0x9c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008238:	2b00      	cmp	r3, #0
 800823a:	d019      	beq.n	8008270 <HAL_RCC_OscConfig+0x990>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800823c:	4b3c      	ldr	r3, [pc, #240]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3b      	ldr	r2, [pc, #236]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008246:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008248:	f7fa fb7a 	bl	8002940 <HAL_GetTick>
 800824c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x982>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008250:	f7fa fb76 	bl	8002940 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e211      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008262:	4b33      	ldr	r3, [pc, #204]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f0      	beq.n	8008250 <HAL_RCC_OscConfig+0x970>
 800826e:	e018      	b.n	80082a2 <HAL_RCC_OscConfig+0x9c2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008270:	4b2f      	ldr	r3, [pc, #188]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2e      	ldr	r2, [pc, #184]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800827a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800827c:	f7fa fb60 	bl	8002940 <HAL_GetTick>
 8008280:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x9b6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008284:	f7fa fb5c 	bl	8002940 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e1f7      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008296:	4b26      	ldr	r3, [pc, #152]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f0      	bne.n	8008284 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d07f      	beq.n	80083ae <HAL_RCC_OscConfig+0xace>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d062      	beq.n	800837c <HAL_RCC_OscConfig+0xa9c>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80082b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082c0:	6093      	str	r3, [r2, #8]
 80082c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ce:	4918      	ldr	r1, [pc, #96]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80082dc:	d309      	bcc.n	80082f2 <HAL_RCC_OscConfig+0xa12>
 80082de:	4b14      	ldr	r3, [pc, #80]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f023 021f 	bic.w	r2, r3, #31
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	4911      	ldr	r1, [pc, #68]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60cb      	str	r3, [r1, #12]
 80082f0:	e02a      	b.n	8008348 <HAL_RCC_OscConfig+0xa68>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da0a      	bge.n	8008310 <HAL_RCC_OscConfig+0xa30>
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	015b      	lsls	r3, r3, #5
 8008308:	4909      	ldr	r1, [pc, #36]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800830a:	4313      	orrs	r3, r2
 800830c:	60cb      	str	r3, [r1, #12]
 800830e:	e01b      	b.n	8008348 <HAL_RCC_OscConfig+0xa68>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008318:	d30c      	bcc.n	8008334 <HAL_RCC_OscConfig+0xa54>
 800831a:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	029b      	lsls	r3, r3, #10
 8008328:	4901      	ldr	r1, [pc, #4]	@ (8008330 <HAL_RCC_OscConfig+0xa50>)
 800832a:	4313      	orrs	r3, r2
 800832c:	60cb      	str	r3, [r1, #12]
 800832e:	e00b      	b.n	8008348 <HAL_RCC_OscConfig+0xa68>
 8008330:	46020c00 	.word	0x46020c00
 8008334:	4b9b      	ldr	r3, [pc, #620]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	03db      	lsls	r3, r3, #15
 8008342:	4998      	ldr	r1, [pc, #608]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008344:	4313      	orrs	r3, r2
 8008346:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008348:	4b96      	ldr	r3, [pc, #600]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a95      	ldr	r2, [pc, #596]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800834e:	f043 0310 	orr.w	r3, r3, #16
 8008352:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008354:	f7fa faf4 	bl	8002940 <HAL_GetTick>
 8008358:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0xa8e>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800835c:	f7fa faf0 	bl	8002940 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0xa8e>
        {
          return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e18b      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800836e:	4b8d      	ldr	r3, [pc, #564]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0f0      	beq.n	800835c <HAL_RCC_OscConfig+0xa7c>
 800837a:	e018      	b.n	80083ae <HAL_RCC_OscConfig+0xace>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800837c:	4b89      	ldr	r3, [pc, #548]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a88      	ldr	r2, [pc, #544]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008382:	f023 0310 	bic.w	r3, r3, #16
 8008386:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008388:	f7fa fada 	bl	8002940 <HAL_GetTick>
 800838c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0xac2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008390:	f7fa fad6 	bl	8002940 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0xac2>
        {
          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e171      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80083a2:	4b80      	ldr	r3, [pc, #512]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0xab0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8166 	beq.w	8008684 <HAL_RCC_OscConfig+0xda4>
  {
    FlagStatus  pwrclkchanged = RESET;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083be:	4b79      	ldr	r3, [pc, #484]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f003 030c 	and.w	r3, r3, #12
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	f000 80f2 	beq.w	80085b0 <HAL_RCC_OscConfig+0xcd0>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	f040 80c5 	bne.w	8008560 <HAL_RCC_OscConfig+0xc80>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80083d6:	4b73      	ldr	r3, [pc, #460]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a72      	ldr	r2, [pc, #456]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80083dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80083e2:	f7fa faad 	bl	8002940 <HAL_GetTick>
 80083e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80083e8:	e008      	b.n	80083fc <HAL_RCC_OscConfig+0xb1c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ea:	f7fa faa9 	bl	8002940 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d901      	bls.n	80083fc <HAL_RCC_OscConfig+0xb1c>
          {
            return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e144      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80083fc:	4b69      	ldr	r3, [pc, #420]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1f0      	bne.n	80083ea <HAL_RCC_OscConfig+0xb0a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008408:	4b66      	ldr	r3, [pc, #408]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800840a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d111      	bne.n	800843a <HAL_RCC_OscConfig+0xb5a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008416:	4b63      	ldr	r3, [pc, #396]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800841c:	4a61      	ldr	r2, [pc, #388]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800841e:	f043 0304 	orr.w	r3, r3, #4
 8008422:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008426:	4b5f      	ldr	r3, [pc, #380]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800843a:	4b5b      	ldr	r3, [pc, #364]	@ (80085a8 <HAL_RCC_OscConfig+0xcc8>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008446:	d102      	bne.n	800844e <HAL_RCC_OscConfig+0xb6e>
        {
          pwrboosten = SET;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800844e:	4b56      	ldr	r3, [pc, #344]	@ (80085a8 <HAL_RCC_OscConfig+0xcc8>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	4a55      	ldr	r2, [pc, #340]	@ (80085a8 <HAL_RCC_OscConfig+0xcc8>)
 8008454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008458:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800845a:	4b52      	ldr	r3, [pc, #328]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800845c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800846e:	3a01      	subs	r2, #1
 8008470:	0212      	lsls	r2, r2, #8
 8008472:	4311      	orrs	r1, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008478:	430a      	orrs	r2, r1
 800847a:	494a      	ldr	r1, [pc, #296]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 800847c:	4313      	orrs	r3, r2
 800847e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008480:	4b48      	ldr	r3, [pc, #288]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008484:	4b49      	ldr	r3, [pc, #292]	@ (80085ac <HAL_RCC_OscConfig+0xccc>)
 8008486:	4013      	ands	r3, r2
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800848c:	3a01      	subs	r2, #1
 800848e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008496:	3a01      	subs	r2, #1
 8008498:	0252      	lsls	r2, r2, #9
 800849a:	b292      	uxth	r2, r2
 800849c:	4311      	orrs	r1, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80084a2:	3a01      	subs	r2, #1
 80084a4:	0412      	lsls	r2, r2, #16
 80084a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80084aa:	4311      	orrs	r1, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80084b0:	3a01      	subs	r2, #1
 80084b2:	0612      	lsls	r2, r2, #24
 80084b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80084b8:	430a      	orrs	r2, r1
 80084ba:	493a      	ldr	r1, [pc, #232]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80084c0:	4b38      	ldr	r3, [pc, #224]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c4:	4a37      	ldr	r2, [pc, #220]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084d0:	4a34      	ldr	r2, [pc, #208]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80084d6:	4b33      	ldr	r3, [pc, #204]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	4a32      	ldr	r2, [pc, #200]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084dc:	f043 0310 	orr.w	r3, r3, #16
 80084e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80084e2:	4b30      	ldr	r3, [pc, #192]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e6:	f023 020c 	bic.w	r2, r3, #12
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ee:	492d      	ldr	r1, [pc, #180]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80084f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d105      	bne.n	8008508 <HAL_RCC_OscConfig+0xc28>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80084fc:	4b2a      	ldr	r3, [pc, #168]	@ (80085a8 <HAL_RCC_OscConfig+0xcc8>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4a29      	ldr	r2, [pc, #164]	@ (80085a8 <HAL_RCC_OscConfig+0xcc8>)
 8008502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008506:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008508:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800850c:	2b01      	cmp	r3, #1
 800850e:	d107      	bne.n	8008520 <HAL_RCC_OscConfig+0xc40>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008510:	4b24      	ldr	r3, [pc, #144]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008516:	4a23      	ldr	r2, [pc, #140]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008520:	4b20      	ldr	r3, [pc, #128]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1f      	ldr	r2, [pc, #124]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800852a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800852c:	f7fa fa08 	bl	8002940 <HAL_GetTick>
 8008530:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0xc66>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008534:	f7fa fa04 	bl	8002940 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0xc66>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e09f      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008546:	4b17      	ldr	r3, [pc, #92]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0xc54>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008552:	4b14      	ldr	r3, [pc, #80]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	4a13      	ldr	r2, [pc, #76]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800855c:	6293      	str	r3, [r2, #40]	@ 0x28
 800855e:	e091      	b.n	8008684 <HAL_RCC_OscConfig+0xda4>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008560:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0f      	ldr	r2, [pc, #60]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800856a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800856c:	f7fa f9e8 	bl	8002940 <HAL_GetTick>
 8008570:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008572:	e008      	b.n	8008586 <HAL_RCC_OscConfig+0xca6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008574:	f7fa f9e4 	bl	8002940 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0xca6>
          {
            return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e07f      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008586:	4b07      	ldr	r3, [pc, #28]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1f0      	bne.n	8008574 <HAL_RCC_OscConfig+0xc94>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008592:	4b04      	ldr	r3, [pc, #16]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	4a03      	ldr	r2, [pc, #12]	@ (80085a4 <HAL_RCC_OscConfig+0xcc4>)
 8008598:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800859c:	f023 0303 	bic.w	r3, r3, #3
 80085a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80085a2:	e06f      	b.n	8008684 <HAL_RCC_OscConfig+0xda4>
 80085a4:	46020c00 	.word	0x46020c00
 80085a8:	46020800 	.word	0x46020800
 80085ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80085b0:	4b37      	ldr	r3, [pc, #220]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085b6:	4b36      	ldr	r3, [pc, #216]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 80085b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d039      	beq.n	8008638 <HAL_RCC_OscConfig+0xd58>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f003 0203 	and.w	r2, r3, #3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d132      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d129      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d122      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80085fe:	429a      	cmp	r2, r3
 8008600:	d11a      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	0a5b      	lsrs	r3, r3, #9
 8008606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800860e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008610:	429a      	cmp	r2, r3
 8008612:	d111      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	0c1b      	lsrs	r3, r3, #16
 8008618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008620:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008622:	429a      	cmp	r2, r3
 8008624:	d108      	bne.n	8008638 <HAL_RCC_OscConfig+0xd58>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	0e1b      	lsrs	r3, r3, #24
 800862a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008634:	429a      	cmp	r2, r3
 8008636:	d001      	beq.n	800863c <HAL_RCC_OscConfig+0xd5c>
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e024      	b.n	8008686 <HAL_RCC_OscConfig+0xda6>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800863c:	4b14      	ldr	r3, [pc, #80]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800864a:	429a      	cmp	r2, r3
 800864c:	d01a      	beq.n	8008684 <HAL_RCC_OscConfig+0xda4>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800864e:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	4a0f      	ldr	r2, [pc, #60]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865a:	f7fa f971 	bl	8002940 <HAL_GetTick>
 800865e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008660:	bf00      	nop
 8008662:	f7fa f96d 	bl	8002940 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	4293      	cmp	r3, r2
 800866c:	d0f9      	beq.n	8008662 <HAL_RCC_OscConfig+0xd82>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008672:	4a07      	ldr	r2, [pc, #28]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	4a04      	ldr	r2, [pc, #16]	@ (8008690 <HAL_RCC_OscConfig+0xdb0>)
 800867e:	f043 0310 	orr.w	r3, r3, #16
 8008682:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3738      	adds	r7, #56	@ 0x38
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	46020c00 	.word	0x46020c00

08008694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e1d9      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086a8:	4b9b      	ldr	r3, [pc, #620]	@ (8008918 <HAL_RCC_ClockConfig+0x284>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d910      	bls.n	80086d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086b6:	4b98      	ldr	r3, [pc, #608]	@ (8008918 <HAL_RCC_ClockConfig+0x284>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f023 020f 	bic.w	r2, r3, #15
 80086be:	4996      	ldr	r1, [pc, #600]	@ (8008918 <HAL_RCC_ClockConfig+0x284>)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c6:	4b94      	ldr	r3, [pc, #592]	@ (8008918 <HAL_RCC_ClockConfig+0x284>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d001      	beq.n	80086d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e1c1      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d010      	beq.n	8008706 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	4b8c      	ldr	r3, [pc, #560]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d908      	bls.n	8008706 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80086f4:	4b89      	ldr	r3, [pc, #548]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80086f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	4986      	ldr	r1, [pc, #536]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008702:	4313      	orrs	r3, r2
 8008704:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d012      	beq.n	8008738 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691a      	ldr	r2, [r3, #16]
 8008716:	4b81      	ldr	r3, [pc, #516]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	091b      	lsrs	r3, r3, #4
 800871c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008720:	429a      	cmp	r2, r3
 8008722:	d909      	bls.n	8008738 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008724:	4b7d      	ldr	r3, [pc, #500]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	497a      	ldr	r1, [pc, #488]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008734:	4313      	orrs	r3, r2
 8008736:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	4b74      	ldr	r3, [pc, #464]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008750:	429a      	cmp	r2, r3
 8008752:	d908      	bls.n	8008766 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008754:	4b71      	ldr	r3, [pc, #452]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	496e      	ldr	r1, [pc, #440]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008762:	4313      	orrs	r3, r2
 8008764:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d010      	beq.n	8008794 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	4b69      	ldr	r3, [pc, #420]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	429a      	cmp	r2, r3
 8008780:	d908      	bls.n	8008794 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008782:	4b66      	ldr	r3, [pc, #408]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f023 020f 	bic.w	r2, r3, #15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4963      	ldr	r1, [pc, #396]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008790:	4313      	orrs	r3, r2
 8008792:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 80d2 	beq.w	8008946 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d143      	bne.n	8008836 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ae:	4b5b      	ldr	r3, [pc, #364]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80087b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d110      	bne.n	80087de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80087bc:	4b57      	ldr	r3, [pc, #348]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80087be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087c2:	4a56      	ldr	r2, [pc, #344]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80087c4:	f043 0304 	orr.w	r3, r3, #4
 80087c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80087cc:	4b53      	ldr	r3, [pc, #332]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80087ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	60bb      	str	r3, [r7, #8]
 80087d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80087de:	f7fa f8af 	bl	8002940 <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80087e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008920 <HAL_RCC_ClockConfig+0x28c>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00f      	beq.n	8008810 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80087f0:	e008      	b.n	8008804 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80087f2:	f7fa f8a5 	bl	8002940 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e12b      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008804:	4b46      	ldr	r3, [pc, #280]	@ (8008920 <HAL_RCC_ClockConfig+0x28c>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0f0      	beq.n	80087f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d107      	bne.n	8008826 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008816:	4b41      	ldr	r3, [pc, #260]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800881c:	4a3f      	ldr	r2, [pc, #252]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 800881e:	f023 0304 	bic.w	r3, r3, #4
 8008822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008826:	4b3d      	ldr	r3, [pc, #244]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d121      	bne.n	8008876 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e112      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d107      	bne.n	800884e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800883e:	4b37      	ldr	r3, [pc, #220]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d115      	bne.n	8008876 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e106      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008856:	4b31      	ldr	r3, [pc, #196]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e0fa      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008866:	4b2d      	ldr	r3, [pc, #180]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e0f2      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008876:	4b29      	ldr	r3, [pc, #164]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f023 0203 	bic.w	r2, r3, #3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4926      	ldr	r1, [pc, #152]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 8008884:	4313      	orrs	r3, r2
 8008886:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008888:	f7fa f85a 	bl	8002940 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d112      	bne.n	80088bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008896:	e00a      	b.n	80088ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008898:	f7fa f852 	bl	8002940 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e0d6      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088ae:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f003 030c 	and.w	r3, r3, #12
 80088b6:	2b0c      	cmp	r3, #12
 80088b8:	d1ee      	bne.n	8008898 <HAL_RCC_ClockConfig+0x204>
 80088ba:	e044      	b.n	8008946 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d112      	bne.n	80088ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088c4:	e00a      	b.n	80088dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c6:	f7fa f83b 	bl	8002940 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0bf      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088dc:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	f003 030c 	and.w	r3, r3, #12
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d1ee      	bne.n	80088c6 <HAL_RCC_ClockConfig+0x232>
 80088e8:	e02d      	b.n	8008946 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d123      	bne.n	800893a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80088f2:	e00a      	b.n	800890a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f4:	f7fa f824 	bl	8002940 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e0a8      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800890a:	4b04      	ldr	r3, [pc, #16]	@ (800891c <HAL_RCC_ClockConfig+0x288>)
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f003 030c 	and.w	r3, r3, #12
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1ee      	bne.n	80088f4 <HAL_RCC_ClockConfig+0x260>
 8008916:	e016      	b.n	8008946 <HAL_RCC_ClockConfig+0x2b2>
 8008918:	40022000 	.word	0x40022000
 800891c:	46020c00 	.word	0x46020c00
 8008920:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008924:	f7fa f80c 	bl	8002940 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008932:	4293      	cmp	r3, r2
 8008934:	d901      	bls.n	800893a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e090      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800893a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f003 030c 	and.w	r3, r3, #12
 8008942:	2b04      	cmp	r3, #4
 8008944:	d1ee      	bne.n	8008924 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d010      	beq.n	8008974 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	4b43      	ldr	r3, [pc, #268]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	429a      	cmp	r2, r3
 8008960:	d208      	bcs.n	8008974 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008962:	4b40      	ldr	r3, [pc, #256]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f023 020f 	bic.w	r2, r3, #15
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	493d      	ldr	r1, [pc, #244]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008970:	4313      	orrs	r3, r2
 8008972:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008974:	4b3c      	ldr	r3, [pc, #240]	@ (8008a68 <HAL_RCC_ClockConfig+0x3d4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d210      	bcs.n	80089a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008982:	4b39      	ldr	r3, [pc, #228]	@ (8008a68 <HAL_RCC_ClockConfig+0x3d4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f023 020f 	bic.w	r2, r3, #15
 800898a:	4937      	ldr	r1, [pc, #220]	@ (8008a68 <HAL_RCC_ClockConfig+0x3d4>)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	4313      	orrs	r3, r2
 8008990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b35      	ldr	r3, [pc, #212]	@ (8008a68 <HAL_RCC_ClockConfig+0x3d4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e05b      	b.n	8008a5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d010      	beq.n	80089d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089bc:	429a      	cmp	r2, r3
 80089be:	d208      	bcs.n	80089d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80089c0:	4b28      	ldr	r3, [pc, #160]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4925      	ldr	r1, [pc, #148]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d012      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	4b20      	ldr	r3, [pc, #128]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d209      	bcs.n	8008a04 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80089f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	4919      	ldr	r1, [pc, #100]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d010      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	4b13      	ldr	r3, [pc, #76]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d208      	bcs.n	8008a32 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008a20:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	490d      	ldr	r1, [pc, #52]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a32:	f000 f821 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008a36:	4602      	mov	r2, r0
 8008a38:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <HAL_RCC_ClockConfig+0x3d0>)
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	490a      	ldr	r1, [pc, #40]	@ (8008a6c <HAL_RCC_ClockConfig+0x3d8>)
 8008a42:	5ccb      	ldrb	r3, [r1, r3]
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
 8008a48:	4a09      	ldr	r2, [pc, #36]	@ (8008a70 <HAL_RCC_ClockConfig+0x3dc>)
 8008a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a4c:	4b09      	ldr	r3, [pc, #36]	@ (8008a74 <HAL_RCC_ClockConfig+0x3e0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f9 feeb 	bl	800282c <HAL_InitTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73fb      	strb	r3, [r7, #15]

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	46020c00 	.word	0x46020c00
 8008a68:	40022000 	.word	0x40022000
 8008a6c:	08013068 	.word	0x08013068
 8008a70:	20000000 	.word	0x20000000
 8008a74:	20000004 	.word	0x20000004

08008a78 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b08b      	sub	sp, #44	@ 0x2c
 8008a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a86:	4b78      	ldr	r3, [pc, #480]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
 8008a8e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a90:	4b75      	ldr	r3, [pc, #468]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <HAL_RCC_GetSysClockFreq+0x34>
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b0c      	cmp	r3, #12
 8008aa4:	d121      	bne.n	8008aea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d11e      	bne.n	8008aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008aac:	4b6e      	ldr	r3, [pc, #440]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d107      	bne.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008abe:	0b1b      	lsrs	r3, r3, #12
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac6:	e005      	b.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008ac8:	4b67      	ldr	r3, [pc, #412]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	0f1b      	lsrs	r3, r3, #28
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ad4:	4a65      	ldr	r2, [pc, #404]	@ (8008c6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008adc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d110      	bne.n	8008b06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ae8:	e00d      	b.n	8008b06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008aea:	4b5f      	ldr	r3, [pc, #380]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f003 030c 	and.w	r3, r3, #12
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d102      	bne.n	8008afc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008af6:	4b5e      	ldr	r3, [pc, #376]	@ (8008c70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	e004      	b.n	8008b06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	d101      	bne.n	8008b06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b02:	4b5c      	ldr	r3, [pc, #368]	@ (8008c74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008b04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b0c      	cmp	r3, #12
 8008b0a:	f040 80a5 	bne.w	8008c58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008b0e:	4b56      	ldr	r3, [pc, #344]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008b18:	4b53      	ldr	r3, [pc, #332]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	0a1b      	lsrs	r3, r3, #8
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008b26:	4b50      	ldr	r3, [pc, #320]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2a:	091b      	lsrs	r3, r3, #4
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008b32:	4b4d      	ldr	r3, [pc, #308]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	fb02 f303 	mul.w	r3, r2, r3
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d003      	beq.n	8008b5c <HAL_RCC_GetSysClockFreq+0xe4>
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d022      	beq.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x128>
 8008b5a:	e043      	b.n	8008be4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8008c78 <HAL_RCC_GetSysClockFreq+0x200>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008b7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008b82:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008c7c <HAL_RCC_GetSysClockFreq+0x204>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9e:	e046      	b.n	8008c2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8008c80 <HAL_RCC_GetSysClockFreq+0x208>
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008bc2:	ed97 6a01 	vldr	s12, [r7, #4]
 8008bc6:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8008c7c <HAL_RCC_GetSysClockFreq+0x204>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008be2:	e024      	b.n	8008c2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008c0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8008c10:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8008c7c <HAL_RCC_GetSysClockFreq+0x204>
 8008c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008c1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c32:	0e1b      	lsrs	r3, r3, #24
 8008c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c38:	3301      	adds	r3, #1
 8008c3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c52:	ee17 3a90 	vmov	r3, s15
 8008c56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008c58:	6a3b      	ldr	r3, [r7, #32]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	372c      	adds	r7, #44	@ 0x2c
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	46020c00 	.word	0x46020c00
 8008c6c:	08013080 	.word	0x08013080
 8008c70:	00f42400 	.word	0x00f42400
 8008c74:	016e3600 	.word	0x016e3600
 8008c78:	4b742400 	.word	0x4b742400
 8008c7c:	46000000 	.word	0x46000000
 8008c80:	4bb71b00 	.word	0x4bb71b00

08008c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008c88:	f7ff fef6 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <HAL_RCC_GetHCLKFreq+0x28>)
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	4906      	ldr	r1, [pc, #24]	@ (8008cb0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008c98:	5ccb      	ldrb	r3, [r1, r3]
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	4a05      	ldr	r2, [pc, #20]	@ (8008cb4 <HAL_RCC_GetHCLKFreq+0x30>)
 8008ca0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008ca2:	4b04      	ldr	r3, [pc, #16]	@ (8008cb4 <HAL_RCC_GetHCLKFreq+0x30>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	46020c00 	.word	0x46020c00
 8008cb0:	08013068 	.word	0x08013068
 8008cb4:	20000000 	.word	0x20000000

08008cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008cbc:	f7ff ffe2 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4b05      	ldr	r3, [pc, #20]	@ (8008cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	4903      	ldr	r1, [pc, #12]	@ (8008cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cce:	5ccb      	ldrb	r3, [r1, r3]
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	46020c00 	.word	0x46020c00
 8008cdc:	08013078 	.word	0x08013078

08008ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008ce4:	f7ff ffce 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	4903      	ldr	r1, [pc, #12]	@ (8008d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cf6:	5ccb      	ldrb	r3, [r1, r3]
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	46020c00 	.word	0x46020c00
 8008d04:	08013078 	.word	0x08013078

08008d08 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008d0c:	f7ff ffba 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8008d10:	4602      	mov	r2, r0
 8008d12:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	4903      	ldr	r1, [pc, #12]	@ (8008d2c <HAL_RCC_GetPCLK3Freq+0x24>)
 8008d1e:	5ccb      	ldrb	r3, [r1, r3]
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	46020c00 	.word	0x46020c00
 8008d2c:	08013078 	.word	0x08013078

08008d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d38:	4b3e      	ldr	r3, [pc, #248]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008d46:	f7fe fd5d 	bl	8007804 <HAL_PWREx_GetVoltageRange>
 8008d4a:	6178      	str	r0, [r7, #20]
 8008d4c:	e019      	b.n	8008d82 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d4e:	4b39      	ldr	r3, [pc, #228]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d54:	4a37      	ldr	r2, [pc, #220]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d56:	f043 0304 	orr.w	r3, r3, #4
 8008d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008d5e:	4b35      	ldr	r3, [pc, #212]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d6c:	f7fe fd4a 	bl	8007804 <HAL_PWREx_GetVoltageRange>
 8008d70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d72:	4b30      	ldr	r3, [pc, #192]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d78:	4a2e      	ldr	r2, [pc, #184]	@ (8008e34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d7a:	f023 0304 	bic.w	r3, r3, #4
 8008d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d88:	d003      	beq.n	8008d92 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d90:	d109      	bne.n	8008da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d98:	d202      	bcs.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008d9e:	e033      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008da4:	e030      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dac:	d208      	bcs.n	8008dc0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db4:	d102      	bne.n	8008dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008db6:	2303      	movs	r3, #3
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	e025      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e035      	b.n	8008e2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dc6:	d90f      	bls.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008dd4:	d902      	bls.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	e015      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008ddc:	2301      	movs	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e012      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	e00f      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dee:	d109      	bne.n	8008e04 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008df6:	d102      	bne.n	8008dfe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008df8:	2301      	movs	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e004      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008dfe:	2302      	movs	r3, #2
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	e001      	b.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008e04:	2301      	movs	r3, #1
 8008e06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e08:	4b0b      	ldr	r3, [pc, #44]	@ (8008e38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f023 020f 	bic.w	r2, r3, #15
 8008e10:	4909      	ldr	r1, [pc, #36]	@ (8008e38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008e18:	4b07      	ldr	r3, [pc, #28]	@ (8008e38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d001      	beq.n	8008e2a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	46020c00 	.word	0x46020c00
 8008e38:	40022000 	.word	0x40022000

08008e3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e40:	b0b8      	sub	sp, #224	@ 0xe0
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f002 0401 	and.w	r4, r2, #1
 8008e60:	2500      	movs	r5, #0
 8008e62:	ea54 0305 	orrs.w	r3, r4, r5
 8008e66:	d00b      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008e68:	4bca      	ldr	r3, [pc, #808]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e6e:	f023 0103 	bic.w	r1, r3, #3
 8008e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e78:	4ac6      	ldr	r2, [pc, #792]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f002 0802 	and.w	r8, r2, #2
 8008e8c:	f04f 0900 	mov.w	r9, #0
 8008e90:	ea58 0309 	orrs.w	r3, r8, r9
 8008e94:	d00b      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008e96:	4bbf      	ldr	r3, [pc, #764]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e9c:	f023 010c 	bic.w	r1, r3, #12
 8008ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea6:	4abb      	ldr	r2, [pc, #748]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f002 0a04 	and.w	sl, r2, #4
 8008eba:	f04f 0b00 	mov.w	fp, #0
 8008ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ec2:	d00b      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008ec4:	4bb3      	ldr	r3, [pc, #716]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eca:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed4:	4aaf      	ldr	r2, [pc, #700]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f002 0308 	and.w	r3, r2, #8
 8008ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008eec:	2300      	movs	r3, #0
 8008eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ef2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008efc:	4ba5      	ldr	r3, [pc, #660]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f0c:	4aa1      	ldr	r2, [pc, #644]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f002 0310 	and.w	r3, r2, #16
 8008f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008f2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4313      	orrs	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008f34:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f44:	4a93      	ldr	r2, [pc, #588]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f002 0320 	and.w	r3, r2, #32
 8008f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	d00b      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008f6c:	4b89      	ldr	r3, [pc, #548]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f72:	f023 0107 	bic.w	r1, r3, #7
 8008f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f7c:	4a85      	ldr	r2, [pc, #532]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f94:	2300      	movs	r3, #0
 8008f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	d00b      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008faa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb4:	4a77      	ldr	r2, [pc, #476]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fd2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d00b      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008fdc:	4b6d      	ldr	r3, [pc, #436]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fec:	4a69      	ldr	r2, [pc, #420]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800900a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800900e:	460b      	mov	r3, r1
 8009010:	4313      	orrs	r3, r2
 8009012:	d00b      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009014:	4b5f      	ldr	r3, [pc, #380]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800901a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800901e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009024:	4a5b      	ldr	r2, [pc, #364]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009026:	430b      	orrs	r3, r1
 8009028:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800902c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009042:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d00b      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800904c:	4b51      	ldr	r3, [pc, #324]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800904e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009052:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800905a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905c:	4a4d      	ldr	r2, [pc, #308]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800905e:	430b      	orrs	r3, r1
 8009060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009074:	2300      	movs	r3, #0
 8009076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800907a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800907e:	460b      	mov	r3, r1
 8009080:	4313      	orrs	r3, r2
 8009082:	d00b      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009084:	4b43      	ldr	r3, [pc, #268]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800908a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800908e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009094:	4a3f      	ldr	r2, [pc, #252]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009096:	430b      	orrs	r3, r1
 8009098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800909c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80090b6:	460b      	mov	r3, r1
 80090b8:	4313      	orrs	r3, r2
 80090ba:	d00b      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80090bc:	4b35      	ldr	r3, [pc, #212]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80090be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090c2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80090c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090cc:	4a31      	ldr	r2, [pc, #196]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80090ce:	430b      	orrs	r3, r1
 80090d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80090d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80090e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090e2:	2300      	movs	r3, #0
 80090e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090ea:	460b      	mov	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d00c      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80090f0:	4b28      	ldr	r3, [pc, #160]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80090f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80090fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009102:	4a24      	ldr	r2, [pc, #144]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009104:	430b      	orrs	r3, r1
 8009106:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800910a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009116:	673b      	str	r3, [r7, #112]	@ 0x70
 8009118:	2300      	movs	r3, #0
 800911a:	677b      	str	r3, [r7, #116]	@ 0x74
 800911c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009120:	460b      	mov	r3, r1
 8009122:	4313      	orrs	r3, r2
 8009124:	d04f      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009126:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800912a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800912e:	2b80      	cmp	r3, #128	@ 0x80
 8009130:	d02d      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009132:	2b80      	cmp	r3, #128	@ 0x80
 8009134:	d827      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009136:	2b60      	cmp	r3, #96	@ 0x60
 8009138:	d02e      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800913a:	2b60      	cmp	r3, #96	@ 0x60
 800913c:	d823      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800913e:	2b40      	cmp	r3, #64	@ 0x40
 8009140:	d006      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d81f      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d009      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800914a:	2b20      	cmp	r3, #32
 800914c:	d011      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800914e:	e01a      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009150:	4b10      	ldr	r3, [pc, #64]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	4a0f      	ldr	r2, [pc, #60]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800915a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800915c:	e01d      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800915e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009162:	3308      	adds	r3, #8
 8009164:	4618      	mov	r0, r3
 8009166:	f002 f9d9 	bl	800b51c <RCCEx_PLL2_Config>
 800916a:	4603      	mov	r3, r0
 800916c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009170:	e013      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009176:	332c      	adds	r3, #44	@ 0x2c
 8009178:	4618      	mov	r0, r3
 800917a:	f002 fa67 	bl	800b64c <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009184:	e009      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800918c:	e005      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800918e:	bf00      	nop
 8009190:	e003      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8009192:	bf00      	nop
 8009194:	46020c00 	.word	0x46020c00
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10d      	bne.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80091a2:	4bb6      	ldr	r3, [pc, #728]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80091a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091a8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80091ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b4:	4ab1      	ldr	r2, [pc, #708]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80091b6:	430b      	orrs	r3, r1
 80091b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80091bc:	e003      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80091c2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80091c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091d4:	2300      	movs	r3, #0
 80091d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091dc:	460b      	mov	r3, r1
 80091de:	4313      	orrs	r3, r2
 80091e0:	d053      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80091e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ee:	d033      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80091f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091f4:	d82c      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80091f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091fa:	d02f      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80091fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009200:	d826      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009206:	d008      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800920c:	d820      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009216:	d011      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8009218:	e01a      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800921a:	4b98      	ldr	r3, [pc, #608]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800921c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921e:	4a97      	ldr	r2, [pc, #604]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009224:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009226:	e01a      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800922c:	3308      	adds	r3, #8
 800922e:	4618      	mov	r0, r3
 8009230:	f002 f974 	bl	800b51c <RCCEx_PLL2_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800923a:	e010      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800923c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009240:	332c      	adds	r3, #44	@ 0x2c
 8009242:	4618      	mov	r0, r3
 8009244:	f002 fa02 	bl	800b64c <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800924e:	e006      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009256:	e002      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8009258:	bf00      	nop
 800925a:	e000      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800925c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10d      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009266:	4b85      	ldr	r3, [pc, #532]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800926c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009278:	4a80      	ldr	r2, [pc, #512]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800927a:	430b      	orrs	r3, r1
 800927c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009280:	e003      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009282:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009286:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800928a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009296:	663b      	str	r3, [r7, #96]	@ 0x60
 8009298:	2300      	movs	r3, #0
 800929a:	667b      	str	r3, [r7, #100]	@ 0x64
 800929c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80092a0:	460b      	mov	r3, r1
 80092a2:	4313      	orrs	r3, r2
 80092a4:	d046      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80092a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80092b2:	d028      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80092b8:	d821      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80092ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092be:	d022      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c4:	d81b      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80092c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ca:	d01c      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092d0:	d815      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d6:	d008      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80092d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092dc:	d80f      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d011      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e6:	d00e      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092e8:	e009      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80092ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092ee:	3308      	adds	r3, #8
 80092f0:	4618      	mov	r0, r3
 80092f2:	f002 f913 	bl	800b51c <RCCEx_PLL2_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80092fc:	e004      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009304:	e000      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8009306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009308:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10d      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009310:	4b5a      	ldr	r3, [pc, #360]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009316:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800931a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800931e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009322:	4a56      	ldr	r2, [pc, #344]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009324:	430b      	orrs	r3, r1
 8009326:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800932a:	e003      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009330:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009342:	2300      	movs	r3, #0
 8009344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009346:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800934a:	460b      	mov	r3, r1
 800934c:	4313      	orrs	r3, r2
 800934e:	d03f      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009358:	2b04      	cmp	r3, #4
 800935a:	d81e      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800935c:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	080093a3 	.word	0x080093a3
 8009368:	08009379 	.word	0x08009379
 800936c:	08009387 	.word	0x08009387
 8009370:	080093a3 	.word	0x080093a3
 8009374:	080093a3 	.word	0x080093a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009378:	4b40      	ldr	r3, [pc, #256]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	4a3f      	ldr	r2, [pc, #252]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800937e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009382:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009384:	e00e      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800938a:	332c      	adds	r3, #44	@ 0x2c
 800938c:	4618      	mov	r0, r3
 800938e:	f002 f95d 	bl	800b64c <RCCEx_PLL3_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009398:	e004      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80093a0:	e000      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80093a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80093a4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10d      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80093ac:	4b33      	ldr	r3, [pc, #204]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80093ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093b2:	f023 0107 	bic.w	r1, r3, #7
 80093b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093be:	4a2f      	ldr	r2, [pc, #188]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80093c0:	430b      	orrs	r3, r1
 80093c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80093c6:	e003      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80093cc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80093d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80093dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80093de:	2300      	movs	r3, #0
 80093e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80093e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80093e6:	460b      	mov	r3, r1
 80093e8:	4313      	orrs	r3, r2
 80093ea:	d04d      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80093ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093f8:	d028      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x610>
 80093fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093fe:	d821      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009400:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009404:	d024      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800940a:	d81b      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800940c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009410:	d00e      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8009412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009416:	d815      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01b      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800941c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009420:	d110      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009422:	4b16      	ldr	r3, [pc, #88]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	4a15      	ldr	r2, [pc, #84]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800942c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800942e:	e012      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009434:	332c      	adds	r3, #44	@ 0x2c
 8009436:	4618      	mov	r0, r3
 8009438:	f002 f908 	bl	800b64c <RCCEx_PLL3_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009442:	e008      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800944a:	e004      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800944c:	bf00      	nop
 800944e:	e002      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8009454:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009456:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800945e:	4b07      	ldr	r3, [pc, #28]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009464:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800946c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009470:	4a02      	ldr	r2, [pc, #8]	@ (800947c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8009472:	430b      	orrs	r3, r1
 8009474:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009478:	e006      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800947a:	bf00      	nop
 800947c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009484:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009496:	2300      	movs	r3, #0
 8009498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800949a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800949e:	460b      	mov	r3, r1
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f000 80b4 	beq.w	800960e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ac:	4b9c      	ldr	r3, [pc, #624]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80094ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d113      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ba:	4b99      	ldr	r3, [pc, #612]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80094bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094c0:	4a97      	ldr	r2, [pc, #604]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80094c2:	f043 0304 	orr.w	r3, r3, #4
 80094c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80094ca:	4b95      	ldr	r3, [pc, #596]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80094cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80094e2:	4b90      	ldr	r3, [pc, #576]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	4a8f      	ldr	r2, [pc, #572]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80094e8:	f043 0301 	orr.w	r3, r3, #1
 80094ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094ee:	f7f9 fa27 	bl	8002940 <HAL_GetTick>
 80094f2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094f6:	e00b      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f8:	f7f9 fa22 	bl	8002940 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d903      	bls.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800950e:	e005      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009510:	4b84      	ldr	r3, [pc, #528]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8009512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0ed      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800951c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009520:	2b00      	cmp	r3, #0
 8009522:	d164      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009524:	4b7e      	ldr	r3, [pc, #504]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800952a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800952e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009536:	2b00      	cmp	r3, #0
 8009538:	d023      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800953a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800953e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8009542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009546:	4293      	cmp	r3, r2
 8009548:	d01b      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800954a:	4b75      	ldr	r3, [pc, #468]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800954c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009554:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009558:	4b71      	ldr	r3, [pc, #452]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800955a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800955e:	4a70      	ldr	r2, [pc, #448]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009564:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009568:	4b6d      	ldr	r3, [pc, #436]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800956a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800956e:	4a6c      	ldr	r2, [pc, #432]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009574:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009578:	4a69      	ldr	r2, [pc, #420]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800957a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d018      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958e:	f7f9 f9d7 	bl	8002940 <HAL_GetTick>
 8009592:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009596:	e00c      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x776>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009598:	f7f9 f9d2 	bl	8002940 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80095a8:	d903      	bls.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x776>
          {
            ret = HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80095b0:	e006      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80095b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0eb      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80095c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10d      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80095c8:	4b55      	ldr	r3, [pc, #340]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80095ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80095d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80095d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095da:	4a51      	ldr	r2, [pc, #324]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80095dc:	430b      	orrs	r3, r1
 80095de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80095e2:	e008      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80095e8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80095f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80095f6:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d107      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095fe:	4b48      	ldr	r3, [pc, #288]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009604:	4a46      	ldr	r2, [pc, #280]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009606:	f023 0304 	bic.w	r3, r3, #4
 800960a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800960e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800961a:	643b      	str	r3, [r7, #64]	@ 0x40
 800961c:	2300      	movs	r3, #0
 800961e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009620:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009624:	460b      	mov	r3, r1
 8009626:	4313      	orrs	r3, r2
 8009628:	d042      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800962a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800962e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009632:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009636:	d022      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009638:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800963c:	d81b      	bhi.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800963e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009642:	d011      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009648:	d815      	bhi.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d019      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800964e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009652:	d110      	bne.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009658:	3308      	adds	r3, #8
 800965a:	4618      	mov	r0, r3
 800965c:	f001 ff5e 	bl	800b51c <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009666:	e00d      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x848>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4b2d      	ldr	r3, [pc, #180]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800966a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966c:	4a2c      	ldr	r2, [pc, #176]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009672:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009674:	e006      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x848>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800967c:	e002      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x848>
        break;
 800967e:	bf00      	nop
 8009680:	e000      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x848>
        break;
 8009682:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009684:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10d      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800968c:	4b24      	ldr	r3, [pc, #144]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800968e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009692:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800969a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800969e:	4a20      	ldr	r2, [pc, #128]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80096a0:	430b      	orrs	r3, r1
 80096a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80096a6:	e003      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80096ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80096bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096be:	2300      	movs	r3, #0
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80096c6:	460b      	mov	r3, r1
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d031      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80096cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096d8:	d00b      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80096da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096de:	d804      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d008      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e8:	d007      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8be>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80096f0:	e004      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
        break;
 80096f2:	bf00      	nop
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
        break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
        break;
 80096fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80096fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009700:	2b00      	cmp	r3, #0
 8009702:	d111      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009704:	4b06      	ldr	r3, [pc, #24]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800970a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800970e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009716:	4a02      	ldr	r2, [pc, #8]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009718:	430b      	orrs	r3, r1
 800971a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800971e:	e007      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8009720:	46020c00 	.word	0x46020c00
 8009724:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800972c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	@ 0x34
 8009742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009746:	460b      	mov	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	d019      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x944>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800974c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009758:	d105      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800975a:	4b88      	ldr	r3, [pc, #544]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975e:	4a87      	ldr	r2, [pc, #540]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009764:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009766:	4b85      	ldr	r3, [pc, #532]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009768:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800976c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009774:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009778:	4a80      	ldr	r2, [pc, #512]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800977a:	430b      	orrs	r3, r1
 800977c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800978c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800978e:	2300      	movs	r3, #0
 8009790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009792:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009796:	460b      	mov	r3, r1
 8009798:	4313      	orrs	r3, r2
 800979a:	d00c      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800979c:	4b77      	ldr	r3, [pc, #476]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800979e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ae:	4973      	ldr	r1, [pc, #460]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80097b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097c2:	623b      	str	r3, [r7, #32]
 80097c4:	2300      	movs	r3, #0
 80097c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097cc:	460b      	mov	r3, r1
 80097ce:	4313      	orrs	r3, r2
 80097d0:	d00c      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80097d2:	4b6a      	ldr	r3, [pc, #424]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 80097d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80097dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097e4:	4965      	ldr	r1, [pc, #404]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80097ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009802:	460b      	mov	r3, r1
 8009804:	4313      	orrs	r3, r2
 8009806:	d00c      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009808:	4b5c      	ldr	r3, [pc, #368]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800980a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800980e:	f023 0218 	bic.w	r2, r3, #24
 8009812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009816:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800981a:	4958      	ldr	r1, [pc, #352]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	2300      	movs	r3, #0
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d032      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800983e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800984a:	d105      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984c:	4b4b      	ldr	r3, [pc, #300]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	4a4a      	ldr	r2, [pc, #296]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009856:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800985c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009860:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009864:	d108      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800986a:	3308      	adds	r3, #8
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fe55 	bl	800b51c <RCCEx_PLL2_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8009878:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10d      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009880:	4b3e      	ldr	r3, [pc, #248]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800988a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800988e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009892:	493a      	ldr	r1, [pc, #232]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009894:	4313      	orrs	r3, r2
 8009896:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800989a:	e003      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80098a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80098a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80098b0:	60bb      	str	r3, [r7, #8]
 80098b2:	2300      	movs	r3, #0
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80098ba:	460b      	mov	r3, r1
 80098bc:	4313      	orrs	r3, r2
 80098be:	d03a      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xafa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80098c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098cc:	d00e      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80098ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098d2:	d815      	bhi.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d017      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098dc:	d110      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098de:	4b27      	ldr	r3, [pc, #156]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 80098e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e2:	4a26      	ldr	r2, [pc, #152]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 80098e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80098ea:	e00e      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xace>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80098f0:	3308      	adds	r3, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 fe12 	bl	800b51c <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80098fe:	e004      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xace>
      default:
        ret = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009906:	e000      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xace>
        break;
 8009908:	bf00      	nop
    }
    if (ret == HAL_OK)
 800990a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10d      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009912:	4b1a      	ldr	r3, [pc, #104]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009918:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800991c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009924:	4915      	ldr	r1, [pc, #84]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800992c:	e003      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xafa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009932:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009936:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	2300      	movs	r3, #0
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	e9d7 1200 	ldrd	r1, r2, [r7]
 800994c:	460b      	mov	r3, r1
 800994e:	4313      	orrs	r3, r2
 8009950:	d00c      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009952:	4b0a      	ldr	r3, [pc, #40]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009958:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800995c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009964:	4905      	ldr	r1, [pc, #20]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
 8009966:	4313      	orrs	r3, r2
 8009968:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800996c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8009970:	4618      	mov	r0, r3
 8009972:	37e0      	adds	r7, #224	@ 0xe0
 8009974:	46bd      	mov	sp, r7
 8009976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800997a:	bf00      	nop
 800997c:	46020c00 	.word	0x46020c00

08009980 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	@ 0x24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009988:	4ba6      	ldr	r3, [pc, #664]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800998a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009990:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009992:	4ba4      	ldr	r3, [pc, #656]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800999c:	4ba1      	ldr	r3, [pc, #644]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a0:	0a1b      	lsrs	r3, r3, #8
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	3301      	adds	r3, #1
 80099a8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80099aa:	4b9e      	ldr	r3, [pc, #632]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80099b6:	4b9b      	ldr	r3, [pc, #620]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	08db      	lsrs	r3, r3, #3
 80099bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d062      	beq.n	8009a9e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2b03      	cmp	r3, #3
 80099dc:	f200 8081 	bhi.w	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d024      	beq.n	8009a30 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d17a      	bne.n	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009c28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b89      	ldr	r3, [pc, #548]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009c2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2e:	e08f      	b.n	8009b50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009a30:	4b7c      	ldr	r3, [pc, #496]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009a3c:	4b79      	ldr	r3, [pc, #484]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	0f1b      	lsrs	r3, r3, #28
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	e006      	b.n	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009a48:	4b76      	ldr	r3, [pc, #472]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	0f1b      	lsrs	r3, r3, #28
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	4a76      	ldr	r2, [pc, #472]	@ (8009c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009c2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a9c:	e058      	b.n	8009b50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009c34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8009aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ac0:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ac4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009c2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009adc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ae0:	e036      	b.n	8009b50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009ae2:	4b50      	ldr	r3, [pc, #320]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009aee:	4b4d      	ldr	r3, [pc, #308]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	0f1b      	lsrs	r3, r3, #28
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	e006      	b.n	8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009afa:	4b4a      	ldr	r3, [pc, #296]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	0f1b      	lsrs	r3, r3, #28
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	4a49      	ldr	r2, [pc, #292]	@ (8009c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	ee07 3a90 	vmov	s15, r3
 8009b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b32:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009c2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b4e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009b50:	4b34      	ldr	r3, [pc, #208]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d017      	beq.n	8009b8c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b5c:	4b31      	ldr	r3, [pc, #196]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b60:	0a5b      	lsrs	r3, r3, #9
 8009b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b82:	ee17 2a90 	vmov	r2, s15
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e002      	b.n	8009b92 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009b92:	4b24      	ldr	r3, [pc, #144]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d017      	beq.n	8009bce <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b9e:	4b21      	ldr	r3, [pc, #132]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba8:	ee07 3a90 	vmov	s15, r3
 8009bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc4:	ee17 2a90 	vmov	r2, s15
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	e002      	b.n	8009bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009bd4:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d017      	beq.n	8009c10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009be0:	4b10      	ldr	r3, [pc, #64]	@ (8009c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be4:	0e1b      	lsrs	r3, r3, #24
 8009be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c06:	ee17 2a90 	vmov	r2, s15
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009c0e:	e002      	b.n	8009c16 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	609a      	str	r2, [r3, #8]
}
 8009c16:	bf00      	nop
 8009c18:	3724      	adds	r7, #36	@ 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	46020c00 	.word	0x46020c00
 8009c28:	4b742400 	.word	0x4b742400
 8009c2c:	46000000 	.word	0x46000000
 8009c30:	08013080 	.word	0x08013080
 8009c34:	4bb71b00 	.word	0x4bb71b00

08009c38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b089      	sub	sp, #36	@ 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009c40:	4ba6      	ldr	r3, [pc, #664]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c48:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009c54:	4ba1      	ldr	r3, [pc, #644]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c58:	0a1b      	lsrs	r3, r3, #8
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	3301      	adds	r3, #1
 8009c60:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009c62:	4b9e      	ldr	r3, [pc, #632]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c66:	091b      	lsrs	r3, r3, #4
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	fb02 f303 	mul.w	r3, r2, r3
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d062      	beq.n	8009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f200 8081 	bhi.w	8009d9a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d024      	beq.n	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d17a      	bne.n	8009d9a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb6:	4b89      	ldr	r3, [pc, #548]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ce6:	e08f      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d005      	beq.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009cf4:	4b79      	ldr	r3, [pc, #484]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	0f1b      	lsrs	r3, r3, #28
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	e006      	b.n	8009d0e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009d00:	4b76      	ldr	r3, [pc, #472]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d06:	041b      	lsls	r3, r3, #16
 8009d08:	0f1b      	lsrs	r3, r3, #28
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	4a76      	ldr	r2, [pc, #472]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d14:	ee07 3a90 	vmov	s15, r3
 8009d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d38:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d54:	e058      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d60:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8009d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d68:	4b5c      	ldr	r3, [pc, #368]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d7c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d98:	e036      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009d9a:	4b50      	ldr	r3, [pc, #320]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009da6:	4b4d      	ldr	r3, [pc, #308]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	0f1b      	lsrs	r3, r3, #28
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	e006      	b.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009db2:	4b4a      	ldr	r3, [pc, #296]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009db8:	041b      	lsls	r3, r3, #16
 8009dba:	0f1b      	lsrs	r3, r3, #28
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	4a49      	ldr	r2, [pc, #292]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	ee07 3a90 	vmov	s15, r3
 8009dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e06:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009e08:	4b34      	ldr	r3, [pc, #208]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d017      	beq.n	8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e14:	4b31      	ldr	r3, [pc, #196]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e18:	0a5b      	lsrs	r3, r3, #9
 8009e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e3a:	ee17 2a90 	vmov	r2, s15
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e002      	b.n	8009e4a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009e4a:	4b24      	ldr	r3, [pc, #144]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d017      	beq.n	8009e86 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e56:	4b21      	ldr	r3, [pc, #132]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e5a:	0c1b      	lsrs	r3, r3, #16
 8009e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009e68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7c:	ee17 2a90 	vmov	r2, s15
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	e002      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009e8c:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d017      	beq.n	8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e98:	4b10      	ldr	r3, [pc, #64]	@ (8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ebe:	ee17 2a90 	vmov	r2, s15
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ec6:	e002      	b.n	8009ece <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	609a      	str	r2, [r3, #8]
}
 8009ece:	bf00      	nop
 8009ed0:	3724      	adds	r7, #36	@ 0x24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	46020c00 	.word	0x46020c00
 8009ee0:	4b742400 	.word	0x4b742400
 8009ee4:	46000000 	.word	0x46000000
 8009ee8:	08013080 	.word	0x08013080
 8009eec:	4bb71b00 	.word	0x4bb71b00

08009ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b089      	sub	sp, #36	@ 0x24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009ef8:	4ba6      	ldr	r3, [pc, #664]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f00:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009f02:	4ba4      	ldr	r3, [pc, #656]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009f0c:	4ba1      	ldr	r3, [pc, #644]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	3301      	adds	r3, #1
 8009f18:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009f1a:	4b9e      	ldr	r3, [pc, #632]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1e:	091b      	lsrs	r3, r3, #4
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009f26:	4b9b      	ldr	r3, [pc, #620]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d062      	beq.n	800a00e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	f200 8081 	bhi.w	800a052 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d024      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d17a      	bne.n	800a052 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6e:	4b89      	ldr	r3, [pc, #548]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f82:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009f9e:	e08f      	b.n	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009fa0:	4b7c      	ldr	r3, [pc, #496]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009fac:	4b79      	ldr	r3, [pc, #484]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	0f1b      	lsrs	r3, r3, #28
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	e006      	b.n	8009fc6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009fb8:	4b76      	ldr	r3, [pc, #472]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	0f1b      	lsrs	r3, r3, #28
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	4a76      	ldr	r2, [pc, #472]	@ (800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ff0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a000:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a00c:	e058      	b.n	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a018:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 800a01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a020:	4b5c      	ldr	r3, [pc, #368]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a030:	ed97 6a02 	vldr	s12, [r7, #8]
 800a034:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a038:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a044:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a04c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a050:	e036      	b.n	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a052:	4b50      	ldr	r3, [pc, #320]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a05e:	4b4d      	ldr	r3, [pc, #308]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	0f1b      	lsrs	r3, r3, #28
 800a064:	f003 030f 	and.w	r3, r3, #15
 800a068:	e006      	b.n	800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a06a:	4b4a      	ldr	r3, [pc, #296]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a06c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a070:	041b      	lsls	r3, r3, #16
 800a072:	0f1b      	lsrs	r3, r3, #28
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	4a49      	ldr	r2, [pc, #292]	@ (800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0a2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0be:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a0c0:	4b34      	ldr	r3, [pc, #208]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d017      	beq.n	800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a0cc:	4b31      	ldr	r3, [pc, #196]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0d0:	0a5b      	lsrs	r3, r3, #9
 800a0d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a0de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f2:	ee17 2a90 	vmov	r2, s15
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	e002      	b.n	800a102 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a102:	4b24      	ldr	r3, [pc, #144]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d017      	beq.n	800a13e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a10e:	4b21      	ldr	r3, [pc, #132]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a124:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a128:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	ee17 2a90 	vmov	r2, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a144:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d017      	beq.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a150:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a154:	0e1b      	lsrs	r3, r3, #24
 800a156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a166:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a176:	ee17 2a90 	vmov	r2, s15
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a17e:	e002      	b.n	800a186 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	609a      	str	r2, [r3, #8]
}
 800a186:	bf00      	nop
 800a188:	3724      	adds	r7, #36	@ 0x24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	46020c00 	.word	0x46020c00
 800a198:	4b742400 	.word	0x4b742400
 800a19c:	46000000 	.word	0x46000000
 800a1a0:	08013080 	.word	0x08013080
 800a1a4:	4bb71b00 	.word	0x4bb71b00

0800a1a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08e      	sub	sp, #56	@ 0x38
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	d145      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a1be:	4baa      	ldr	r3, [pc, #680]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a1c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1c8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a1ca:	4ba7      	ldr	r3, [pc, #668]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a1cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d108      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1de:	d104      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a1e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e6:	f001 b98b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a1ea:	4b9f      	ldr	r3, [pc, #636]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a1ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f8:	d114      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a200:	d110      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a202:	4b99      	ldr	r3, [pc, #612]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a20c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a210:	d103      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a212:	23fa      	movs	r3, #250	@ 0xfa
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a216:	f001 b973 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800a21a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a21e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a220:	f001 b96e 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a224:	4b90      	ldr	r3, [pc, #576]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a230:	d107      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a238:	d103      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a23a:	4b8c      	ldr	r3, [pc, #560]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	f001 b95f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
 800a246:	f001 b95b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a24e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a252:	430b      	orrs	r3, r1
 800a254:	d151      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a256:	4b84      	ldr	r3, [pc, #528]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a25c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a260:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	2b80      	cmp	r3, #128	@ 0x80
 800a266:	d035      	beq.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	2b80      	cmp	r3, #128	@ 0x80
 800a26c:	d841      	bhi.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	2b60      	cmp	r3, #96	@ 0x60
 800a272:	d02a      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	2b60      	cmp	r3, #96	@ 0x60
 800a278:	d83b      	bhi.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	2b40      	cmp	r3, #64	@ 0x40
 800a27e:	d009      	beq.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	2b40      	cmp	r3, #64	@ 0x40
 800a284:	d835      	bhi.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d012      	beq.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a292:	e02e      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fb71 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2a2:	f001 b92d 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0318 	add.w	r3, r7, #24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff fcc4 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2b4:	f001 b924 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff fe17 	bl	8009ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2c6:	f001 b91b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a2ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2d0:	f001 b916 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2d4:	4b64      	ldr	r3, [pc, #400]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2e0:	d103      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a2e2:	4b63      	ldr	r3, [pc, #396]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a2e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a2e6:	f001 b90b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ee:	f001 b907 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :
      {
        frequency = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2f6:	f001 b903 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fe:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a302:	430b      	orrs	r3, r1
 800a304:	d158      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a306:	4b58      	ldr	r3, [pc, #352]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a30c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a310:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a318:	d03b      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a320:	d846      	bhi.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a328:	d02e      	beq.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a330:	d83e      	bhi.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a338:	d00b      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a340:	d836      	bhi.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00d      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a34e:	d012      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a350:	e02e      	b.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fb12 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a360:	f001 b8ce 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a364:	f107 0318 	add.w	r3, r7, #24
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fc65 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a372:	f001 b8c5 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a376:	f107 030c 	add.w	r3, r7, #12
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fdb8 	bl	8009ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a384:	f001 b8bc 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a388:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a38e:	f001 b8b7 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a392:	4b35      	ldr	r3, [pc, #212]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a39a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a39e:	d103      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a3a0:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a3a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3a4:	f001 b8ac 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ac:	f001 b8a8 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3b4:	f001 b8a4 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3bc:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	d16e      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a3c4:	4b28      	ldr	r3, [pc, #160]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a3c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3ca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a3ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a3d6:	d034      	beq.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a3de:	d85c      	bhi.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e6:	d00b      	beq.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ee:	d854      	bhi.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d016      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3fc:	d009      	beq.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a3fe:	e04c      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff fabb 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a40e:	f001 b877 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a412:	f107 0318 	add.w	r3, r7, #24
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fc0e 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a420:	f001 b86e 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a424:	4b10      	ldr	r3, [pc, #64]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a42c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a430:	d103      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800a432:	4b10      	ldr	r3, [pc, #64]	@ (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a434:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a436:	f001 b863 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a43e:	f001 b85f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a442:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d121      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a44e:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800a45a:	4b03      	ldr	r3, [pc, #12]	@ (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	0e1b      	lsrs	r3, r3, #24
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	e00f      	b.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a466:	bf00      	nop
 800a468:	46020c00 	.word	0x46020c00
 800a46c:	000b71b0 	.word	0x000b71b0
 800a470:	00f42400 	.word	0x00f42400
 800a474:	02dc6c00 	.word	0x02dc6c00
 800a478:	4ba7      	ldr	r3, [pc, #668]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a47a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a47e:	041b      	lsls	r3, r3, #16
 800a480:	0e1b      	lsrs	r3, r3, #24
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	4aa5      	ldr	r2, [pc, #660]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a48e:	f001 b837 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a496:	f001 b833 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a49e:	f001 b82f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a4aa:	430b      	orrs	r3, r1
 800a4ac:	d17f      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a4ae:	4b9a      	ldr	r3, [pc, #616]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a4b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a4b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4b8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d165      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a4c0:	4b95      	ldr	r3, [pc, #596]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a4c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a4ca:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a4d2:	d034      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a4da:	d853      	bhi.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4e2:	d00b      	beq.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4ea:	d84b      	bhi.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d016      	beq.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4f8:	d009      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a4fa:	e043      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fa3d 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a50a:	f000 bff9 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50e:	f107 0318 	add.w	r3, r7, #24
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fb90 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a51c:	f000 bff0 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a520:	4b7d      	ldr	r3, [pc, #500]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a52c:	d103      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800a52e:	4b7c      	ldr	r3, [pc, #496]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800a530:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a532:	f000 bfe5 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a53a:	f000 bfe1 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a53e:	4b76      	ldr	r3, [pc, #472]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b20      	cmp	r3, #32
 800a548:	d118      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a54a:	4b73      	ldr	r3, [pc, #460]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d005      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a556:	4b70      	ldr	r3, [pc, #448]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	0e1b      	lsrs	r3, r3, #24
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	e006      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800a562:	4b6d      	ldr	r3, [pc, #436]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a568:	041b      	lsls	r3, r3, #16
 800a56a:	0e1b      	lsrs	r3, r3, #24
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	4a6a      	ldr	r2, [pc, #424]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a576:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a578:	f000 bfc2 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a580:	f000 bfbe 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        default :
        {
          frequency = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a588:	f000 bfba 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a592:	d108      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff f9f1 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a2:	f000 bfad 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else
    {
      frequency = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5aa:	f000 bfa9 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b2:	1e51      	subs	r1, r2, #1
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	d136      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a5b8:	4b57      	ldr	r3, [pc, #348]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d104      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a5ca:	f7fe fb89 	bl	8008ce0 <HAL_RCC_GetPCLK2Freq>
 800a5ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5d0:	f000 bf96 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d104      	bne.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a5da:	f7fe fa4d 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a5de:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5e0:	f000 bf8e 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a5e4:	4b4c      	ldr	r3, [pc, #304]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5f0:	d106      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d103      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800a5f8:	4b4a      	ldr	r3, [pc, #296]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a5fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5fc:	f000 bf80 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a600:	4b45      	ldr	r3, [pc, #276]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d107      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	2b03      	cmp	r3, #3
 800a612:	d104      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800a614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61a:	f000 bf71 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	637b      	str	r3, [r7, #52]	@ 0x34
 800a622:	f000 bf6d 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a62a:	1e91      	subs	r1, r2, #2
 800a62c:	430b      	orrs	r3, r1
 800a62e:	d136      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a630:	4b39      	ldr	r3, [pc, #228]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a636:	f003 030c 	and.w	r3, r3, #12
 800a63a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a642:	f7fe fb39 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800a646:	6378      	str	r0, [r7, #52]	@ 0x34
 800a648:	f000 bf5a 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	2b04      	cmp	r3, #4
 800a650:	d104      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a652:	f7fe fa11 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a656:	6378      	str	r0, [r7, #52]	@ 0x34
 800a658:	f000 bf52 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a65c:	4b2e      	ldr	r3, [pc, #184]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a668:	d106      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d103      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800a670:	4b2c      	ldr	r3, [pc, #176]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a672:	637b      	str	r3, [r7, #52]	@ 0x34
 800a674:	f000 bf44 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a678:	4b27      	ldr	r3, [pc, #156]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a67a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b02      	cmp	r3, #2
 800a684:	d107      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	2b0c      	cmp	r3, #12
 800a68a:	d104      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800a68c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a690:	637b      	str	r3, [r7, #52]	@ 0x34
 800a692:	f000 bf35 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69a:	f000 bf31 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a69e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a2:	1f11      	subs	r1, r2, #4
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	d13f      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a6aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6ba:	f7fe fafd 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800a6be:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6c0:	f000 bf1e 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	d104      	bne.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6ca:	f7fe f9d5 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a6ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6d0:	f000 bf16 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a6d4:	4b10      	ldr	r3, [pc, #64]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6e0:	d106      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d103      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ec:	f000 bf08 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a6f0:	4b09      	ldr	r3, [pc, #36]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a6f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d107      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	2b30      	cmp	r3, #48	@ 0x30
 800a702:	d104      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800a704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a708:	637b      	str	r3, [r7, #52]	@ 0x34
 800a70a:	f000 bef9 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
 800a712:	f000 bef5 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800a716:	bf00      	nop
 800a718:	46020c00 	.word	0x46020c00
 800a71c:	08013080 	.word	0x08013080
 800a720:	02dc6c00 	.word	0x02dc6c00
 800a724:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72c:	f1a2 0108 	sub.w	r1, r2, #8
 800a730:	430b      	orrs	r3, r1
 800a732:	d136      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a734:	4ba4      	ldr	r3, [pc, #656]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a73a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a73e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	2b00      	cmp	r3, #0
 800a744:	d104      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a746:	f7fe fab7 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800a74a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a74c:	f000 bed8 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a752:	2b40      	cmp	r3, #64	@ 0x40
 800a754:	d104      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a756:	f7fe f98f 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a75a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a75c:	f000 bed0 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a760:	4b99      	ldr	r3, [pc, #612]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a76c:	d106      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a770:	2b80      	cmp	r3, #128	@ 0x80
 800a772:	d103      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800a774:	4b95      	ldr	r3, [pc, #596]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a776:	637b      	str	r3, [r7, #52]	@ 0x34
 800a778:	f000 bec2 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a77c:	4b92      	ldr	r3, [pc, #584]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a77e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b02      	cmp	r3, #2
 800a788:	d107      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a78e:	d104      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800a790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
 800a796:	f000 beb3 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a79e:	f000 beaf 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a6:	f1a2 0110 	sub.w	r1, r2, #16
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	d139      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a7ae:	4b86      	ldr	r3, [pc, #536]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a7b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7c0:	f7fe fa7a 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800a7c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7c6:	f000 be9b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7d0:	d104      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7d2:	f7fe f951 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a7d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7d8:	f000 be92 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a7dc:	4b7a      	ldr	r3, [pc, #488]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7e8:	d107      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7f0:	d103      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800a7f2:	4b76      	ldr	r3, [pc, #472]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f6:	f000 be83 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a7fa:	4b73      	ldr	r3, [pc, #460]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a7fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d108      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a80e:	d104      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800a810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
 800a816:	f000 be73 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81e:	f000 be6f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a826:	f1a2 0120 	sub.w	r1, r2, #32
 800a82a:	430b      	orrs	r3, r1
 800a82c:	d158      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a82e:	4b66      	ldr	r3, [pc, #408]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a840:	f7fe fa62 	bl	8008d08 <HAL_RCC_GetPCLK3Freq>
 800a844:	6378      	str	r0, [r7, #52]	@ 0x34
 800a846:	f000 be5b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d104      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a850:	f7fe f912 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a854:	6378      	str	r0, [r7, #52]	@ 0x34
 800a856:	f000 be53 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a85a:	4b5b      	ldr	r3, [pc, #364]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a866:	d106      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800a868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d103      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800a86e:	4b57      	ldr	r3, [pc, #348]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a870:	637b      	str	r3, [r7, #52]	@ 0x34
 800a872:	f000 be45 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a876:	4b54      	ldr	r3, [pc, #336]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d107      	bne.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	2b03      	cmp	r3, #3
 800a888:	d104      	bne.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800a88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a890:	f000 be36 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a894:	4b4c      	ldr	r3, [pc, #304]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0320 	and.w	r3, r3, #32
 800a89c:	2b20      	cmp	r3, #32
 800a89e:	d11b      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d118      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a8a6:	4b48      	ldr	r3, [pc, #288]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800a8b2:	4b45      	ldr	r3, [pc, #276]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	0e1b      	lsrs	r3, r3, #24
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	e006      	b.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a8be:	4b42      	ldr	r3, [pc, #264]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a8c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a8c4:	041b      	lsls	r3, r3, #16
 800a8c6:	0e1b      	lsrs	r3, r3, #24
 800a8c8:	f003 030f 	and.w	r3, r3, #15
 800a8cc:	4a40      	ldr	r2, [pc, #256]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d4:	f000 be14 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8dc:	f000 be10 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a8e8:	430b      	orrs	r3, r1
 800a8ea:	d175      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a8ec:	4b36      	ldr	r3, [pc, #216]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a8ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a8f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fe:	d104      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a900:	f7fe f8ba 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800a904:	6378      	str	r0, [r7, #52]	@ 0x34
 800a906:	f000 bdfb 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a910:	d108      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a912:	f107 0318 	add.w	r3, r7, #24
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff f98e 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a920:	f000 bdee 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a92a:	f7fe f9ab 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 800a92e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a930:	f000 bde6 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a936:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a93a:	d122      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a93c:	4b22      	ldr	r3, [pc, #136]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b20      	cmp	r3, #32
 800a946:	d118      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a948:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800a954:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	0e1b      	lsrs	r3, r3, #24
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	e006      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a960:	4b19      	ldr	r3, [pc, #100]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a962:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a966:	041b      	lsls	r3, r3, #16
 800a968:	0e1b      	lsrs	r3, r3, #24
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a974:	637b      	str	r3, [r7, #52]	@ 0x34
 800a976:	f000 bdc3 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800a97a:	2300      	movs	r3, #0
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a97e:	f000 bdbf 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a982:	4b11      	ldr	r3, [pc, #68]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a98a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a98e:	d107      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800a990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a992:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a996:	d103      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800a998:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 800a99a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99c:	f000 bdb0 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a9a0:	4b09      	ldr	r3, [pc, #36]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9b4:	d103      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800a9b6:	4b05      	ldr	r3, [pc, #20]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a9b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ba:	f000 bda1 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c2:	f000 bd9d 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800a9c6:	bf00      	nop
 800a9c8:	46020c00 	.word	0x46020c00
 800a9cc:	00f42400 	.word	0x00f42400
 800a9d0:	08013080 	.word	0x08013080
 800a9d4:	016e3600 	.word	0x016e3600
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9dc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	d158      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a9e4:	4bad      	ldr	r3, [pc, #692]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800a9e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d84b      	bhi.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa35 	.word	0x0800aa35
 800aa00:	0800aa11 	.word	0x0800aa11
 800aa04:	0800aa23 	.word	0x0800aa23
 800aa08:	0800aa3f 	.word	0x0800aa3f
 800aa0c:	0800aa49 	.word	0x0800aa49
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe ffb3 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa1e:	f000 bd6f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa22:	f107 030c 	add.w	r3, r7, #12
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff fa62 	bl	8009ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa30:	f000 bd66 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aa34:	f7fe f926 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 800aa38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aa3a:	f000 bd61 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aa3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa44:	f000 bd5c 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa48:	4b94      	ldr	r3, [pc, #592]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d118      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa54:	4b91      	ldr	r3, [pc, #580]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800aa60:	4b8e      	ldr	r3, [pc, #568]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	0e1b      	lsrs	r3, r3, #24
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	e006      	b.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800aa6c:	4b8b      	ldr	r3, [pc, #556]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800aa6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa72:	041b      	lsls	r3, r3, #16
 800aa74:	0e1b      	lsrs	r3, r3, #24
 800aa76:	f003 030f 	and.w	r3, r3, #15
 800aa7a:	4a89      	ldr	r2, [pc, #548]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa82:	f000 bd3d 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa8a:	f000 bd39 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa92:	f000 bd35 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800aa96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa9a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800aa9e:	430b      	orrs	r3, r1
 800aaa0:	d167      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800aaa2:	4b7e      	ldr	r3, [pc, #504]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800aaa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aaa8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aaac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aab4:	d036      	beq.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aabc:	d855      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aac4:	d029      	beq.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aacc:	d84d      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aad4:	d013      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aadc:	d845      	bhi.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d015      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaea:	d13e      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe ff45 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aafa:	f000 bd01 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafe:	f107 030c 	add.w	r3, r7, #12
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff f9f4 	bl	8009ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab0c:	f000 bcf8 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ab10:	f7fe f8b8 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 800ab14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab16:	f000 bcf3 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ab1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab20:	f000 bcee 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab24:	4b5d      	ldr	r3, [pc, #372]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d118      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab30:	4b5a      	ldr	r3, [pc, #360]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 800ab3c:	4b57      	ldr	r3, [pc, #348]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	0e1b      	lsrs	r3, r3, #24
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	e006      	b.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800ab48:	4b54      	ldr	r3, [pc, #336]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ab4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab4e:	041b      	lsls	r3, r3, #16
 800ab50:	0e1b      	lsrs	r3, r3, #24
 800ab52:	f003 030f 	and.w	r3, r3, #15
 800ab56:	4a52      	ldr	r2, [pc, #328]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab5e:	f000 bccf 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab66:	f000 bccb 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab6e:	f000 bcc7 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800ab72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab76:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800ab7a:	430b      	orrs	r3, r1
 800ab7c:	d14c      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ab7e:	4b47      	ldr	r3, [pc, #284]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ab80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d104      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab90:	f7fe f892 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800ab94:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab96:	f000 bcb3 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aba0:	d104      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aba2:	f7fd ff69 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800aba6:	6378      	str	r0, [r7, #52]	@ 0x34
 800aba8:	f000 bcaa 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800abac:	4b3b      	ldr	r3, [pc, #236]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abb8:	d107      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abc0:	d103      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
    {
      frequency = HSI_VALUE;
 800abc2:	4b38      	ldr	r3, [pc, #224]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800abc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abc6:	f000 bc9b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800abca:	4b34      	ldr	r3, [pc, #208]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d11c      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abdc:	d118      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abde:	4b2f      	ldr	r3, [pc, #188]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800abea:	4b2c      	ldr	r3, [pc, #176]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	0e1b      	lsrs	r3, r3, #24
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	e006      	b.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
 800abf6:	4b29      	ldr	r3, [pc, #164]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800abf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abfc:	041b      	lsls	r3, r3, #16
 800abfe:	0e1b      	lsrs	r3, r3, #24
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	4a26      	ldr	r2, [pc, #152]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0c:	f000 bc78 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac14:	f000 bc74 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ac18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac1c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ac20:	430b      	orrs	r3, r1
 800ac22:	d152      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ac24:	4b1d      	ldr	r3, [pc, #116]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ac26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ac2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d104      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ac36:	f7fe f83f 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800ac3a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ac3c:	f000 bc60 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac46:	d104      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac48:	f7fd ff16 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800ac4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ac4e:	f000 bc57 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ac52:	4b12      	ldr	r3, [pc, #72]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac5e:	d107      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac66:	d103      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
    {
      frequency = HSI_VALUE;
 800ac68:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ac6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac6c:	f000 bc48 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ac70:	4b0a      	ldr	r3, [pc, #40]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0320 	and.w	r3, r3, #32
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d122      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac82:	d11e      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac84:	4b05      	ldr	r3, [pc, #20]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00b      	beq.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ac90:	4b02      	ldr	r3, [pc, #8]	@ (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	0e1b      	lsrs	r3, r3, #24
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	e00c      	b.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
 800ac9c:	46020c00 	.word	0x46020c00
 800aca0:	08013080 	.word	0x08013080
 800aca4:	00f42400 	.word	0x00f42400
 800aca8:	4ba1      	ldr	r3, [pc, #644]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800acaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acae:	041b      	lsls	r3, r3, #16
 800acb0:	0e1b      	lsrs	r3, r3, #24
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	4a9f      	ldr	r2, [pc, #636]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800acb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800acbe:	f000 bc1f 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc6:	f000 bc1b 	b.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800acca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800acd2:	430b      	orrs	r3, r1
 800acd4:	d151      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800acd6:	4b96      	ldr	r3, [pc, #600]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800acd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800acdc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ace0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	2bc0      	cmp	r3, #192	@ 0xc0
 800ace6:	d024      	beq.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	2bc0      	cmp	r3, #192	@ 0xc0
 800acec:	d842      	bhi.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	2b80      	cmp	r3, #128	@ 0x80
 800acf2:	d00d      	beq.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf6:	2b80      	cmp	r3, #128	@ 0x80
 800acf8:	d83c      	bhi.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	2b40      	cmp	r3, #64	@ 0x40
 800ad04:	d011      	beq.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 800ad06:	e035      	b.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ad08:	f7fd fffe 	bl	8008d08 <HAL_RCC_GetPCLK3Freq>
 800ad0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ad0e:	e3f7      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad10:	4b87      	ldr	r3, [pc, #540]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad1c:	d102      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
        {
          frequency = HSI_VALUE;
 800ad1e:	4b86      	ldr	r3, [pc, #536]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ad20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad22:	e3ed      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad28:	e3ea      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ad2a:	f7fd fea5 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800ad2e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ad30:	e3e6      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad32:	4b7f      	ldr	r3, [pc, #508]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0320 	and.w	r3, r3, #32
 800ad3a:	2b20      	cmp	r3, #32
 800ad3c:	d117      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad3e:	4b7c      	ldr	r3, [pc, #496]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800ad4a:	4b79      	ldr	r3, [pc, #484]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	0e1b      	lsrs	r3, r3, #24
 800ad50:	f003 030f 	and.w	r3, r3, #15
 800ad54:	e006      	b.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800ad56:	4b76      	ldr	r3, [pc, #472]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad5c:	041b      	lsls	r3, r3, #16
 800ad5e:	0e1b      	lsrs	r3, r3, #24
 800ad60:	f003 030f 	and.w	r3, r3, #15
 800ad64:	4a73      	ldr	r2, [pc, #460]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ad66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad6c:	e3c8      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad72:	e3c5      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      default:
      {
        frequency = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad78:	e3c2      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ad7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800ad82:	430b      	orrs	r3, r1
 800ad84:	d147      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ad86:	4b6a      	ldr	r3, [pc, #424]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ad88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ad90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad98:	f7fd ff8e 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800ad9c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad9e:	e3af      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ada0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ada6:	d103      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ada8:	f7fd fe66 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800adac:	6378      	str	r0, [r7, #52]	@ 0x34
 800adae:	e3a7      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800adb0:	4b5f      	ldr	r3, [pc, #380]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adbc:	d106      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adc4:	d102      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
    {
      frequency = HSI_VALUE;
 800adc6:	4b5c      	ldr	r3, [pc, #368]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800adc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adca:	e399      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800adcc:	4b58      	ldr	r3, [pc, #352]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b20      	cmp	r3, #32
 800add6:	d11b      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800adde:	d117      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ade0:	4b53      	ldr	r3, [pc, #332]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
 800adec:	4b50      	ldr	r3, [pc, #320]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	0e1b      	lsrs	r3, r3, #24
 800adf2:	f003 030f 	and.w	r3, r3, #15
 800adf6:	e006      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800adf8:	4b4d      	ldr	r3, [pc, #308]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800adfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	0e1b      	lsrs	r3, r3, #24
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	4a4b      	ldr	r2, [pc, #300]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ae08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae0e:	e377      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae14:	e374      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ae16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae1a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ae1e:	430b      	orrs	r3, r1
 800ae20:	d164      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ae22:	4b43      	ldr	r3, [pc, #268]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d120      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae34:	4b3e      	ldr	r3, [pc, #248]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d117      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae40:	4b3b      	ldr	r3, [pc, #236]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800ae4c:	4b38      	ldr	r3, [pc, #224]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	0e1b      	lsrs	r3, r3, #24
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	e006      	b.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800ae58:	4b35      	ldr	r3, [pc, #212]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	0e1b      	lsrs	r3, r3, #24
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	4a33      	ldr	r2, [pc, #204]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ae68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae6e:	e347      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae74:	e344      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ae76:	4b2e      	ldr	r3, [pc, #184]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae84:	d112      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae8c:	d10e      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae8e:	4b28      	ldr	r3, [pc, #160]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ae90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae9c:	d102      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 800ae9e:	23fa      	movs	r3, #250	@ 0xfa
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aea2:	e32d      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800aea4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aeaa:	e329      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800aeac:	4b20      	ldr	r3, [pc, #128]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aeb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aeb8:	d106      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec0:	d102      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 800aec2:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800aec4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec6:	e31b      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800aec8:	4b19      	ldr	r3, [pc, #100]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aeca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d107      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aedc:	d103      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 800aede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee4:	e30c      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeea:	e309      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800aef4:	430b      	orrs	r3, r1
 800aef6:	d16b      	bne.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aef8:	4b0d      	ldr	r3, [pc, #52]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aefa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aefe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800af04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af06:	2b00      	cmp	r3, #0
 800af08:	d127      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af0a:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b20      	cmp	r3, #32
 800af14:	d11e      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af16:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00c      	beq.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800af22:	4b03      	ldr	r3, [pc, #12]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	0e1b      	lsrs	r3, r3, #24
 800af28:	f003 030f 	and.w	r3, r3, #15
 800af2c:	e00d      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
 800af2e:	bf00      	nop
 800af30:	46020c00 	.word	0x46020c00
 800af34:	08013080 	.word	0x08013080
 800af38:	00f42400 	.word	0x00f42400
 800af3c:	4b94      	ldr	r3, [pc, #592]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800af3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	0e1b      	lsrs	r3, r3, #24
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	4a92      	ldr	r2, [pc, #584]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af50:	637b      	str	r3, [r7, #52]	@ 0x34
 800af52:	e2d5      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
 800af58:	e2d2      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800af5a:	4b8d      	ldr	r3, [pc, #564]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800af5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af68:	d112      	bne.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af70:	d10e      	bne.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af72:	4b87      	ldr	r3, [pc, #540]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800af74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af80:	d102      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xde0>
      {
        frequency = LSI_VALUE / 128U;
 800af82:	23fa      	movs	r3, #250	@ 0xfa
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af86:	e2bb      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800af88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af8e:	e2b7      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800af90:	4b7f      	ldr	r3, [pc, #508]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af9c:	d106      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afa4:	d102      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
    {
      frequency = HSI_VALUE;
 800afa6:	4b7c      	ldr	r3, [pc, #496]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afaa:	e2a9      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800afac:	4b78      	ldr	r3, [pc, #480]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800afae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afb2:	f003 0302 	and.w	r3, r3, #2
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d107      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800afc0:	d103      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    {
      frequency = LSE_VALUE;
 800afc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc8:	e29a      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afce:	e297      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800afd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800afd8:	430b      	orrs	r3, r1
 800afda:	d147      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0xec4>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800afdc:	4b6c      	ldr	r3, [pc, #432]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800afde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afe2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800afe6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	2b00      	cmp	r3, #0
 800afec:	d103      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afee:	f7fd fe63 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800aff2:	6378      	str	r0, [r7, #52]	@ 0x34
 800aff4:	e284      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800aff6:	4b66      	ldr	r3, [pc, #408]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800aff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800affc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b004:	d112      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b00c:	d10e      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b00e:	4b60      	ldr	r3, [pc, #384]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b01c:	d102      	bne.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
      {
        frequency = LSI_VALUE / 128U;
 800b01e:	23fa      	movs	r3, #250	@ 0xfa
 800b020:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b022:	e26d      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800b024:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b02a:	e269      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b02c:	4b58      	ldr	r3, [pc, #352]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b038:	d106      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b040:	d102      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
    {
      frequency = HSI_VALUE;
 800b042:	4b55      	ldr	r3, [pc, #340]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
 800b046:	e25b      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b048:	4b51      	ldr	r3, [pc, #324]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b04a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b02      	cmp	r3, #2
 800b054:	d107      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b05c:	d103      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
    {
      frequency = LSE_VALUE;
 800b05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b062:	637b      	str	r3, [r7, #52]	@ 0x34
 800b064:	e24c      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34
 800b06a:	e249      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b06c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b070:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b074:	430b      	orrs	r3, r1
 800b076:	d12d      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b078:	4b45      	ldr	r3, [pc, #276]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b07a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b07e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b082:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b084:	4b42      	ldr	r3, [pc, #264]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b090:	d105      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
    {
      frequency = HSE_VALUE;
 800b098:	4b40      	ldr	r3, [pc, #256]	@ (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b09c:	e230      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0a4:	d107      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe fc68 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0b4:	e224      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0bc:	d107      	bne.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0be:	f107 0318 	add.w	r3, r7, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fdb8 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0cc:	e218      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d2:	e215      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	d15f      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b0e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b0e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b0ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0f2:	d028      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0fa:	d845      	bhi.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b102:	d013      	beq.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b10a:	d83d      	bhi.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
 800b112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b118:	d004      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800b11a:	e035      	b.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b11c:	f7fd fde0 	bl	8008ce0 <HAL_RCC_GetPCLK2Freq>
 800b120:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b122:	e1ed      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b124:	f7fd fca8 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800b128:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b12a:	e1e9      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b12c:	4b18      	ldr	r3, [pc, #96]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b138:	d102      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xf98>
        {
          frequency = HSI_VALUE;
 800b13a:	4b17      	ldr	r3, [pc, #92]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b13c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b13e:	e1df      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b144:	e1dc      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b146:	4b12      	ldr	r3, [pc, #72]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d117      	bne.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b152:	4b0f      	ldr	r3, [pc, #60]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d005      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800b15e:	4b0c      	ldr	r3, [pc, #48]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	0e1b      	lsrs	r3, r3, #24
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	e006      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800b16c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b170:	041b      	lsls	r3, r3, #16
 800b172:	0e1b      	lsrs	r3, r3, #24
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	4a06      	ldr	r2, [pc, #24]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b17e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b180:	e1be      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b186:	e1bb      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b18c:	e1b8      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800b18e:	bf00      	nop
 800b190:	46020c00 	.word	0x46020c00
 800b194:	08013080 	.word	0x08013080
 800b198:	00f42400 	.word	0x00f42400
 800b19c:	016e3600 	.word	0x016e3600
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	d156      	bne.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b1ac:	4ba5      	ldr	r3, [pc, #660]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b1ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b1b6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1be:	d028      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1c6:	d845      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ce:	d013      	beq.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1050>
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1d6:	d83d      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d004      	beq.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1e4:	d004      	beq.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800b1e6:	e035      	b.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b1e8:	f7fd fd66 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800b1ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b1ee:	e187      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b1f0:	f7fd fc42 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800b1f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b1f6:	e183      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1f8:	4b92      	ldr	r3, [pc, #584]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b204:	d102      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
        {
          frequency = HSI_VALUE;
 800b206:	4b90      	ldr	r3, [pc, #576]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 800b208:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b20a:	e179      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b210:	e176      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b212:	4b8c      	ldr	r3, [pc, #560]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d117      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b21e:	4b89      	ldr	r3, [pc, #548]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d005      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x108e>
 800b22a:	4b86      	ldr	r3, [pc, #536]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	0e1b      	lsrs	r3, r3, #24
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	e006      	b.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 800b236:	4b83      	ldr	r3, [pc, #524]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b23c:	041b      	lsls	r3, r3, #16
 800b23e:	0e1b      	lsrs	r3, r3, #24
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	4a81      	ldr	r2, [pc, #516]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800b246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b24c:	e158      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b252:	e155      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b258:	e152      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b25e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b262:	430b      	orrs	r3, r1
 800b264:	d177      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b266:	4b77      	ldr	r3, [pc, #476]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b26c:	f003 0318 	and.w	r3, r3, #24
 800b270:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	2b18      	cmp	r3, #24
 800b276:	d86b      	bhi.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800b278:	a201      	add	r2, pc, #4	@ (adr r2, 800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b2e5 	.word	0x0800b2e5
 800b284:	0800b351 	.word	0x0800b351
 800b288:	0800b351 	.word	0x0800b351
 800b28c:	0800b351 	.word	0x0800b351
 800b290:	0800b351 	.word	0x0800b351
 800b294:	0800b351 	.word	0x0800b351
 800b298:	0800b351 	.word	0x0800b351
 800b29c:	0800b351 	.word	0x0800b351
 800b2a0:	0800b2ed 	.word	0x0800b2ed
 800b2a4:	0800b351 	.word	0x0800b351
 800b2a8:	0800b351 	.word	0x0800b351
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b351 	.word	0x0800b351
 800b2b4:	0800b351 	.word	0x0800b351
 800b2b8:	0800b351 	.word	0x0800b351
 800b2bc:	0800b351 	.word	0x0800b351
 800b2c0:	0800b2f5 	.word	0x0800b2f5
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b351 	.word	0x0800b351
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b351 	.word	0x0800b351
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b351 	.word	0x0800b351
 800b2dc:	0800b351 	.word	0x0800b351
 800b2e0:	0800b30f 	.word	0x0800b30f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b2e4:	f7fd fd10 	bl	8008d08 <HAL_RCC_GetPCLK3Freq>
 800b2e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b2ea:	e109      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b2ec:	f7fd fbc4 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800b2f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b2f2:	e105      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2f4:	4b53      	ldr	r3, [pc, #332]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b300:	d102      	bne.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
        {
          frequency = HSI_VALUE;
 800b302:	4b51      	ldr	r3, [pc, #324]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 800b304:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b306:	e0fb      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b30c:	e0f8      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b30e:	4b4d      	ldr	r3, [pc, #308]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	2b20      	cmp	r3, #32
 800b318:	d117      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x11a2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b31a:	4b4a      	ldr	r3, [pc, #296]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
 800b326:	4b47      	ldr	r3, [pc, #284]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	0e1b      	lsrs	r3, r3, #24
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	e006      	b.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x1198>
 800b332:	4b44      	ldr	r3, [pc, #272]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b338:	041b      	lsls	r3, r3, #16
 800b33a:	0e1b      	lsrs	r3, r3, #24
 800b33c:	f003 030f 	and.w	r3, r3, #15
 800b340:	4a42      	ldr	r2, [pc, #264]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800b342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b348:	e0da      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b34e:	e0d7      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800b350:	2300      	movs	r3, #0
 800b352:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b354:	e0d4      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b35a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b35e:	430b      	orrs	r3, r1
 800b360:	d155      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b362:	4b38      	ldr	r3, [pc, #224]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b364:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b368:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b36c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b374:	d013      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b37c:	d844      	bhi.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b384:	d013      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b38c:	d83c      	bhi.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	2b00      	cmp	r3, #0
 800b392:	d014      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b39a:	d014      	beq.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 800b39c:	e034      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b39e:	f107 0318 	add.w	r3, r7, #24
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fc48 	bl	8009c38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3ac:	e0a8      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fae4 	bl	8009980 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3bc:	e0a0      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b3be:	f7fd fb5b 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800b3c2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b3c4:	e09c      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b20      	cmp	r3, #32
 800b3d0:	d117      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x125a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b3d2:	4b1c      	ldr	r3, [pc, #112]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d005      	beq.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 800b3de:	4b19      	ldr	r3, [pc, #100]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	0e1b      	lsrs	r3, r3, #24
 800b3e4:	f003 030f 	and.w	r3, r3, #15
 800b3e8:	e006      	b.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1250>
 800b3ea:	4b16      	ldr	r3, [pc, #88]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b3ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b3f0:	041b      	lsls	r3, r3, #16
 800b3f2:	0e1b      	lsrs	r3, r3, #24
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	4a14      	ldr	r2, [pc, #80]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800b3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b400:	e07e      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b406:	e07b      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b40c:	e078      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b412:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b416:	430b      	orrs	r3, r1
 800b418:	d138      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b41a:	4b0a      	ldr	r3, [pc, #40]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b41c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b424:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b426:	4b07      	ldr	r3, [pc, #28]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800b428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b42c:	f003 0302 	and.w	r3, r3, #2
 800b430:	2b02      	cmp	r3, #2
 800b432:	d10d      	bne.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10a      	bne.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
    {
      frequency = LSE_VALUE;
 800b43a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b440:	e05e      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800b442:	bf00      	nop
 800b444:	46020c00 	.word	0x46020c00
 800b448:	00f42400 	.word	0x00f42400
 800b44c:	08013080 	.word	0x08013080
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b450:	4b2e      	ldr	r3, [pc, #184]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b45a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45e:	d112      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b466:	d10e      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b468:	4b28      	ldr	r3, [pc, #160]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b46a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b46e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b476:	d102      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
      {
        frequency = LSI_VALUE / 128U;
 800b478:	23fa      	movs	r3, #250	@ 0xfa
 800b47a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b47c:	e040      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 800b47e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b482:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b484:	e03c      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	e039      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b490:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b494:	430b      	orrs	r3, r1
 800b496:	d131      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b498:	4b1c      	ldr	r3, [pc, #112]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b49a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b49e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b4a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b4a4:	4b19      	ldr	r3, [pc, #100]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4b0:	d105      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
    {
      frequency = HSI48_VALUE;
 800b4b8:	4b15      	ldr	r3, [pc, #84]	@ (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4bc:	e020      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b4be:	4b13      	ldr	r3, [pc, #76]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ca:	d106      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4d2:	d102      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4d8:	e012      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b4da:	4b0c      	ldr	r3, [pc, #48]	@ (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e6:	d106      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ee:	d102      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
    {
      frequency = HSI_VALUE;
 800b4f0:	4b09      	ldr	r3, [pc, #36]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f4:	e004      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4fa:	e001      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b502:	4618      	mov	r0, r3
 800b504:	3738      	adds	r7, #56	@ 0x38
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	46020c00 	.word	0x46020c00
 800b510:	02dc6c00 	.word	0x02dc6c00
 800b514:	016e3600 	.word	0x016e3600
 800b518:	00f42400 	.word	0x00f42400

0800b51c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b524:	4b47      	ldr	r3, [pc, #284]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a46      	ldr	r2, [pc, #280]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b52a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b52e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b530:	f7f7 fa06 	bl	8002940 <HAL_GetTick>
 800b534:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b536:	e008      	b.n	800b54a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b538:	f7f7 fa02 	bl	8002940 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b02      	cmp	r3, #2
 800b544:	d901      	bls.n	800b54a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e077      	b.n	800b63a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b54a:	4b3e      	ldr	r3, [pc, #248]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1f0      	bne.n	800b538 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b556:	4b3b      	ldr	r3, [pc, #236]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6811      	ldr	r1, [r2, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	6852      	ldr	r2, [r2, #4]
 800b56a:	3a01      	subs	r2, #1
 800b56c:	0212      	lsls	r2, r2, #8
 800b56e:	430a      	orrs	r2, r1
 800b570:	4934      	ldr	r1, [pc, #208]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b572:	4313      	orrs	r3, r2
 800b574:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b576:	4b33      	ldr	r3, [pc, #204]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b57a:	4b33      	ldr	r3, [pc, #204]	@ (800b648 <RCCEx_PLL2_Config+0x12c>)
 800b57c:	4013      	ands	r3, r2
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	6892      	ldr	r2, [r2, #8]
 800b582:	3a01      	subs	r2, #1
 800b584:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	68d2      	ldr	r2, [r2, #12]
 800b58c:	3a01      	subs	r2, #1
 800b58e:	0252      	lsls	r2, r2, #9
 800b590:	b292      	uxth	r2, r2
 800b592:	4311      	orrs	r1, r2
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	6912      	ldr	r2, [r2, #16]
 800b598:	3a01      	subs	r2, #1
 800b59a:	0412      	lsls	r2, r2, #16
 800b59c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b5a0:	4311      	orrs	r1, r2
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	6952      	ldr	r2, [r2, #20]
 800b5a6:	3a01      	subs	r2, #1
 800b5a8:	0612      	lsls	r2, r2, #24
 800b5aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	4924      	ldr	r1, [pc, #144]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b5b6:	4b23      	ldr	r3, [pc, #140]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ba:	f023 020c 	bic.w	r2, r3, #12
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	4920      	ldr	r1, [pc, #128]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	491c      	ldr	r1, [pc, #112]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b5d6:	4b1b      	ldr	r3, [pc, #108]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	4a1a      	ldr	r2, [pc, #104]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5dc:	f023 0310 	bic.w	r3, r3, #16
 800b5e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5e2:	4b18      	ldr	r3, [pc, #96]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	69d2      	ldr	r2, [r2, #28]
 800b5f2:	00d2      	lsls	r2, r2, #3
 800b5f4:	4913      	ldr	r1, [pc, #76]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b5fa:	4b12      	ldr	r3, [pc, #72]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fe:	4a11      	ldr	r2, [pc, #68]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b600:	f043 0310 	orr.w	r3, r3, #16
 800b604:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b606:	4b0f      	ldr	r3, [pc, #60]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a0e      	ldr	r2, [pc, #56]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b60c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b610:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b612:	f7f7 f995 	bl	8002940 <HAL_GetTick>
 800b616:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b618:	e008      	b.n	800b62c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b61a:	f7f7 f991 	bl	8002940 <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d901      	bls.n	800b62c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e006      	b.n	800b63a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b62c:	4b05      	ldr	r3, [pc, #20]	@ (800b644 <RCCEx_PLL2_Config+0x128>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0f0      	beq.n	800b61a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b638:	2300      	movs	r3, #0

}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	46020c00 	.word	0x46020c00
 800b648:	80800000 	.word	0x80800000

0800b64c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b654:	4b47      	ldr	r3, [pc, #284]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a46      	ldr	r2, [pc, #280]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b65a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b65e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b660:	f7f7 f96e 	bl	8002940 <HAL_GetTick>
 800b664:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b666:	e008      	b.n	800b67a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b668:	f7f7 f96a 	bl	8002940 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	2b02      	cmp	r3, #2
 800b674:	d901      	bls.n	800b67a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e077      	b.n	800b76a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b67a:	4b3e      	ldr	r3, [pc, #248]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1f0      	bne.n	800b668 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b686:	4b3b      	ldr	r3, [pc, #236]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b68a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b68e:	f023 0303 	bic.w	r3, r3, #3
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	6811      	ldr	r1, [r2, #0]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6852      	ldr	r2, [r2, #4]
 800b69a:	3a01      	subs	r2, #1
 800b69c:	0212      	lsls	r2, r2, #8
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	4934      	ldr	r1, [pc, #208]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	630b      	str	r3, [r1, #48]	@ 0x30
 800b6a6:	4b33      	ldr	r3, [pc, #204]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6aa:	4b33      	ldr	r3, [pc, #204]	@ (800b778 <RCCEx_PLL3_Config+0x12c>)
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6892      	ldr	r2, [r2, #8]
 800b6b2:	3a01      	subs	r2, #1
 800b6b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68d2      	ldr	r2, [r2, #12]
 800b6bc:	3a01      	subs	r2, #1
 800b6be:	0252      	lsls	r2, r2, #9
 800b6c0:	b292      	uxth	r2, r2
 800b6c2:	4311      	orrs	r1, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6912      	ldr	r2, [r2, #16]
 800b6c8:	3a01      	subs	r2, #1
 800b6ca:	0412      	lsls	r2, r2, #16
 800b6cc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b6d0:	4311      	orrs	r1, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	6952      	ldr	r2, [r2, #20]
 800b6d6:	3a01      	subs	r2, #1
 800b6d8:	0612      	lsls	r2, r2, #24
 800b6da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	4924      	ldr	r1, [pc, #144]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b6e6:	4b23      	ldr	r3, [pc, #140]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ea:	f023 020c 	bic.w	r2, r3, #12
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	4920      	ldr	r1, [pc, #128]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b6f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b6fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	491c      	ldr	r1, [pc, #112]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b702:	4313      	orrs	r3, r2
 800b704:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b706:	4b1b      	ldr	r3, [pc, #108]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70a:	4a1a      	ldr	r2, [pc, #104]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b70c:	f023 0310 	bic.w	r3, r3, #16
 800b710:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b712:	4b18      	ldr	r3, [pc, #96]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b71a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	69d2      	ldr	r2, [r2, #28]
 800b722:	00d2      	lsls	r2, r2, #3
 800b724:	4913      	ldr	r1, [pc, #76]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b726:	4313      	orrs	r3, r2
 800b728:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b72a:	4b12      	ldr	r3, [pc, #72]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72e:	4a11      	ldr	r2, [pc, #68]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b730:	f043 0310 	orr.w	r3, r3, #16
 800b734:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b736:	4b0f      	ldr	r3, [pc, #60]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a0e      	ldr	r2, [pc, #56]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b73c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b740:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b742:	f7f7 f8fd 	bl	8002940 <HAL_GetTick>
 800b746:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b748:	e008      	b.n	800b75c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b74a:	f7f7 f8f9 	bl	8002940 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d901      	bls.n	800b75c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e006      	b.n	800b76a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b75c:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <RCCEx_PLL3_Config+0x128>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0f0      	beq.n	800b74a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	46020c00 	.word	0x46020c00
 800b778:	80800000 	.word	0x80800000

0800b77c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e049      	b.n	800b822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d106      	bne.n	800b7a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7f6 fe30 	bl	8002408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	f000 fa1e 	bl	800bbfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d001      	beq.n	800b844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e06a      	b.n	800b91a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a35      	ldr	r2, [pc, #212]	@ (800b928 <HAL_TIM_Base_Start+0xfc>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d040      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a34      	ldr	r2, [pc, #208]	@ (800b92c <HAL_TIM_Base_Start+0x100>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d03b      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b868:	d036      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b872:	d031      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a2d      	ldr	r2, [pc, #180]	@ (800b930 <HAL_TIM_Base_Start+0x104>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d02c      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a2c      	ldr	r2, [pc, #176]	@ (800b934 <HAL_TIM_Base_Start+0x108>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d027      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a2a      	ldr	r2, [pc, #168]	@ (800b938 <HAL_TIM_Base_Start+0x10c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d022      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a29      	ldr	r2, [pc, #164]	@ (800b93c <HAL_TIM_Base_Start+0x110>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d01d      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a27      	ldr	r2, [pc, #156]	@ (800b940 <HAL_TIM_Base_Start+0x114>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d018      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a26      	ldr	r2, [pc, #152]	@ (800b944 <HAL_TIM_Base_Start+0x118>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d013      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a24      	ldr	r2, [pc, #144]	@ (800b948 <HAL_TIM_Base_Start+0x11c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d00e      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a23      	ldr	r2, [pc, #140]	@ (800b94c <HAL_TIM_Base_Start+0x120>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d009      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a21      	ldr	r2, [pc, #132]	@ (800b950 <HAL_TIM_Base_Start+0x124>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d004      	beq.n	800b8d8 <HAL_TIM_Base_Start+0xac>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a20      	ldr	r2, [pc, #128]	@ (800b954 <HAL_TIM_Base_Start+0x128>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d115      	bne.n	800b904 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	4b1e      	ldr	r3, [pc, #120]	@ (800b958 <HAL_TIM_Base_Start+0x12c>)
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b06      	cmp	r3, #6
 800b8e8:	d015      	beq.n	800b916 <HAL_TIM_Base_Start+0xea>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8f0:	d011      	beq.n	800b916 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f042 0201 	orr.w	r2, r2, #1
 800b900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b902:	e008      	b.n	800b916 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0201 	orr.w	r2, r2, #1
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	e000      	b.n	800b918 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	50012c00 	.word	0x50012c00
 800b930:	40000400 	.word	0x40000400
 800b934:	50000400 	.word	0x50000400
 800b938:	40000800 	.word	0x40000800
 800b93c:	50000800 	.word	0x50000800
 800b940:	40000c00 	.word	0x40000c00
 800b944:	50000c00 	.word	0x50000c00
 800b948:	40013400 	.word	0x40013400
 800b94c:	50013400 	.word	0x50013400
 800b950:	40014000 	.word	0x40014000
 800b954:	50014000 	.word	0x50014000
 800b958:	00010007 	.word	0x00010007

0800b95c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6a1a      	ldr	r2, [r3, #32]
 800b96a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b96e:	4013      	ands	r3, r2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10f      	bne.n	800b994 <HAL_TIM_Base_Stop+0x38>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6a1a      	ldr	r2, [r3, #32]
 800b97a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b97e:	4013      	ands	r3, r2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d107      	bne.n	800b994 <HAL_TIM_Base_Stop+0x38>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f022 0201 	bic.w	r2, r2, #1
 800b992:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_TIM_GenerateEvent+0x18>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e014      	b.n	800b9ec <HAL_TIM_GenerateEvent+0x42>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d101      	bne.n	800ba14 <HAL_TIM_ConfigClockSource+0x1c>
 800ba10:	2302      	movs	r3, #2
 800ba12:	e0e6      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x1ea>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ba32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ba36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a67      	ldr	r2, [pc, #412]	@ (800bbec <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	f000 80b1 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba54:	4a65      	ldr	r2, [pc, #404]	@ (800bbec <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	f200 80b6 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba5c:	4a64      	ldr	r2, [pc, #400]	@ (800bbf0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	f000 80a9 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba64:	4a62      	ldr	r2, [pc, #392]	@ (800bbf0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	f200 80ae 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba6c:	4a61      	ldr	r2, [pc, #388]	@ (800bbf4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	f000 80a1 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba74:	4a5f      	ldr	r2, [pc, #380]	@ (800bbf4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	f200 80a6 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba7c:	4a5e      	ldr	r2, [pc, #376]	@ (800bbf8 <HAL_TIM_ConfigClockSource+0x200>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	f000 8099 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba84:	4a5c      	ldr	r2, [pc, #368]	@ (800bbf8 <HAL_TIM_ConfigClockSource+0x200>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	f200 809e 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba90:	f000 8091 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba98:	f200 8096 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baa0:	f000 8089 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800baa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baa8:	f200 808e 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800baac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bab0:	d03e      	beq.n	800bb30 <HAL_TIM_ConfigClockSource+0x138>
 800bab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bab6:	f200 8087 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800baba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800babe:	f000 8086 	beq.w	800bbce <HAL_TIM_ConfigClockSource+0x1d6>
 800bac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bac6:	d87f      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bac8:	2b70      	cmp	r3, #112	@ 0x70
 800baca:	d01a      	beq.n	800bb02 <HAL_TIM_ConfigClockSource+0x10a>
 800bacc:	2b70      	cmp	r3, #112	@ 0x70
 800bace:	d87b      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bad0:	2b60      	cmp	r3, #96	@ 0x60
 800bad2:	d050      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x17e>
 800bad4:	2b60      	cmp	r3, #96	@ 0x60
 800bad6:	d877      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bad8:	2b50      	cmp	r3, #80	@ 0x50
 800bada:	d03c      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x15e>
 800badc:	2b50      	cmp	r3, #80	@ 0x50
 800bade:	d873      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bae0:	2b40      	cmp	r3, #64	@ 0x40
 800bae2:	d058      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x19e>
 800bae4:	2b40      	cmp	r3, #64	@ 0x40
 800bae6:	d86f      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bae8:	2b30      	cmp	r3, #48	@ 0x30
 800baea:	d064      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800baec:	2b30      	cmp	r3, #48	@ 0x30
 800baee:	d86b      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d060      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	d867      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d05c      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d05a      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1be>
 800bb00:	e062      	b.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb12:	f000 f9ef 	bl	800bef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bb24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	609a      	str	r2, [r3, #8]
      break;
 800bb2e:	e04f      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb40:	f000 f9d8 	bl	800bef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb52:	609a      	str	r2, [r3, #8]
      break;
 800bb54:	e03c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb62:	461a      	mov	r2, r3
 800bb64:	f000 f94a 	bl	800bdfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2150      	movs	r1, #80	@ 0x50
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f9a3 	bl	800beba <TIM_ITRx_SetConfig>
      break;
 800bb74:	e02c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb82:	461a      	mov	r2, r3
 800bb84:	f000 f969 	bl	800be5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2160      	movs	r1, #96	@ 0x60
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 f993 	bl	800beba <TIM_ITRx_SetConfig>
      break;
 800bb94:	e01c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba2:	461a      	mov	r2, r3
 800bba4:	f000 f92a 	bl	800bdfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2140      	movs	r1, #64	@ 0x40
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f983 	bl	800beba <TIM_ITRx_SetConfig>
      break;
 800bbb4:	e00c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f000 f97a 	bl	800beba <TIM_ITRx_SetConfig>
      break;
 800bbc6:	e003      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	73fb      	strb	r3, [r7, #15]
      break;
 800bbcc:	e000      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800bbce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	00100070 	.word	0x00100070
 800bbf0:	00100040 	.word	0x00100040
 800bbf4:	00100030 	.word	0x00100030
 800bbf8:	00100020 	.word	0x00100020

0800bbfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a6b      	ldr	r2, [pc, #428]	@ (800bdbc <TIM_Base_SetConfig+0x1c0>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d02b      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a6a      	ldr	r2, [pc, #424]	@ (800bdc0 <TIM_Base_SetConfig+0x1c4>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d027      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc22:	d023      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc2a:	d01f      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a65      	ldr	r2, [pc, #404]	@ (800bdc4 <TIM_Base_SetConfig+0x1c8>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d01b      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a64      	ldr	r2, [pc, #400]	@ (800bdc8 <TIM_Base_SetConfig+0x1cc>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d017      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a63      	ldr	r2, [pc, #396]	@ (800bdcc <TIM_Base_SetConfig+0x1d0>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d013      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a62      	ldr	r2, [pc, #392]	@ (800bdd0 <TIM_Base_SetConfig+0x1d4>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d00f      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a61      	ldr	r2, [pc, #388]	@ (800bdd4 <TIM_Base_SetConfig+0x1d8>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d00b      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a60      	ldr	r2, [pc, #384]	@ (800bdd8 <TIM_Base_SetConfig+0x1dc>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d007      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a5f      	ldr	r2, [pc, #380]	@ (800bddc <TIM_Base_SetConfig+0x1e0>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d003      	beq.n	800bc6c <TIM_Base_SetConfig+0x70>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a5e      	ldr	r2, [pc, #376]	@ (800bde0 <TIM_Base_SetConfig+0x1e4>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d108      	bne.n	800bc7e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a4e      	ldr	r2, [pc, #312]	@ (800bdbc <TIM_Base_SetConfig+0x1c0>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d043      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a4d      	ldr	r2, [pc, #308]	@ (800bdc0 <TIM_Base_SetConfig+0x1c4>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d03f      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc94:	d03b      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc9c:	d037      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a48      	ldr	r2, [pc, #288]	@ (800bdc4 <TIM_Base_SetConfig+0x1c8>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d033      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a47      	ldr	r2, [pc, #284]	@ (800bdc8 <TIM_Base_SetConfig+0x1cc>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d02f      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a46      	ldr	r2, [pc, #280]	@ (800bdcc <TIM_Base_SetConfig+0x1d0>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d02b      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a45      	ldr	r2, [pc, #276]	@ (800bdd0 <TIM_Base_SetConfig+0x1d4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d027      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a44      	ldr	r2, [pc, #272]	@ (800bdd4 <TIM_Base_SetConfig+0x1d8>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d023      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a43      	ldr	r2, [pc, #268]	@ (800bdd8 <TIM_Base_SetConfig+0x1dc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d01f      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a42      	ldr	r2, [pc, #264]	@ (800bddc <TIM_Base_SetConfig+0x1e0>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d01b      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a41      	ldr	r2, [pc, #260]	@ (800bde0 <TIM_Base_SetConfig+0x1e4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d017      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a40      	ldr	r2, [pc, #256]	@ (800bde4 <TIM_Base_SetConfig+0x1e8>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d013      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a3f      	ldr	r2, [pc, #252]	@ (800bde8 <TIM_Base_SetConfig+0x1ec>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00f      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a3e      	ldr	r2, [pc, #248]	@ (800bdec <TIM_Base_SetConfig+0x1f0>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d00b      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a3d      	ldr	r2, [pc, #244]	@ (800bdf0 <TIM_Base_SetConfig+0x1f4>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d007      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a3c      	ldr	r2, [pc, #240]	@ (800bdf4 <TIM_Base_SetConfig+0x1f8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d003      	beq.n	800bd0e <TIM_Base_SetConfig+0x112>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a3b      	ldr	r2, [pc, #236]	@ (800bdf8 <TIM_Base_SetConfig+0x1fc>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d108      	bne.n	800bd20 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a1e      	ldr	r2, [pc, #120]	@ (800bdbc <TIM_Base_SetConfig+0x1c0>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d023      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a1d      	ldr	r2, [pc, #116]	@ (800bdc0 <TIM_Base_SetConfig+0x1c4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01f      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a22      	ldr	r2, [pc, #136]	@ (800bddc <TIM_Base_SetConfig+0x1e0>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d01b      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a21      	ldr	r2, [pc, #132]	@ (800bde0 <TIM_Base_SetConfig+0x1e4>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d017      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a20      	ldr	r2, [pc, #128]	@ (800bde4 <TIM_Base_SetConfig+0x1e8>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a1f      	ldr	r2, [pc, #124]	@ (800bde8 <TIM_Base_SetConfig+0x1ec>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d00f      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a1e      	ldr	r2, [pc, #120]	@ (800bdec <TIM_Base_SetConfig+0x1f0>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00b      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a1d      	ldr	r2, [pc, #116]	@ (800bdf0 <TIM_Base_SetConfig+0x1f4>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d007      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf4 <TIM_Base_SetConfig+0x1f8>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d003      	beq.n	800bd8e <TIM_Base_SetConfig+0x192>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a1b      	ldr	r2, [pc, #108]	@ (800bdf8 <TIM_Base_SetConfig+0x1fc>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d103      	bne.n	800bd96 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	691a      	ldr	r2, [r3, #16]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f043 0204 	orr.w	r2, r3, #4
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	bf00      	nop
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	40012c00 	.word	0x40012c00
 800bdc0:	50012c00 	.word	0x50012c00
 800bdc4:	40000400 	.word	0x40000400
 800bdc8:	50000400 	.word	0x50000400
 800bdcc:	40000800 	.word	0x40000800
 800bdd0:	50000800 	.word	0x50000800
 800bdd4:	40000c00 	.word	0x40000c00
 800bdd8:	50000c00 	.word	0x50000c00
 800bddc:	40013400 	.word	0x40013400
 800bde0:	50013400 	.word	0x50013400
 800bde4:	40014000 	.word	0x40014000
 800bde8:	50014000 	.word	0x50014000
 800bdec:	40014400 	.word	0x40014400
 800bdf0:	50014400 	.word	0x50014400
 800bdf4:	40014800 	.word	0x40014800
 800bdf8:	50014800 	.word	0x50014800

0800bdfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	f023 0201 	bic.w	r2, r3, #1
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f023 030a 	bic.w	r3, r3, #10
 800be38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	4313      	orrs	r3, r2
 800be40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	621a      	str	r2, [r3, #32]
}
 800be4e:	bf00      	nop
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b087      	sub	sp, #28
 800be5e:	af00      	add	r7, sp, #0
 800be60:	60f8      	str	r0, [r7, #12]
 800be62:	60b9      	str	r1, [r7, #8]
 800be64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	f023 0210 	bic.w	r2, r3, #16
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	031b      	lsls	r3, r3, #12
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	621a      	str	r2, [r3, #32]
}
 800beae:	bf00      	nop
 800beb0:	371c      	adds	r7, #28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beba:	b480      	push	{r7}
 800bebc:	b085      	sub	sp, #20
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	f043 0307 	orr.w	r3, r3, #7
 800bee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	609a      	str	r2, [r3, #8]
}
 800bee8:	bf00      	nop
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	021a      	lsls	r2, r3, #8
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	431a      	orrs	r2, r3
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	609a      	str	r2, [r3, #8]
}
 800bf28:	bf00      	nop
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d101      	bne.n	800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e097      	b.n	800c07c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a45      	ldr	r2, [pc, #276]	@ (800c088 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d00e      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a44      	ldr	r2, [pc, #272]	@ (800c08c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d009      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a42      	ldr	r2, [pc, #264]	@ (800c090 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d004      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a41      	ldr	r2, [pc, #260]	@ (800c094 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d108      	bne.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bfac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a2f      	ldr	r2, [pc, #188]	@ (800c088 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d040      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a2e      	ldr	r2, [pc, #184]	@ (800c08c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d03b      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe0:	d036      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfea:	d031      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a29      	ldr	r2, [pc, #164]	@ (800c098 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d02c      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a28      	ldr	r2, [pc, #160]	@ (800c09c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d027      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a26      	ldr	r2, [pc, #152]	@ (800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d022      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a25      	ldr	r2, [pc, #148]	@ (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d01d      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a23      	ldr	r2, [pc, #140]	@ (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d018      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a22      	ldr	r2, [pc, #136]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d013      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a18      	ldr	r2, [pc, #96]	@ (800c090 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d00e      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a17      	ldr	r2, [pc, #92]	@ (800c094 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d009      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a1b      	ldr	r2, [pc, #108]	@ (800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d004      	beq.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a1a      	ldr	r2, [pc, #104]	@ (800c0b4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d10c      	bne.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c056:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	40012c00 	.word	0x40012c00
 800c08c:	50012c00 	.word	0x50012c00
 800c090:	40013400 	.word	0x40013400
 800c094:	50013400 	.word	0x50013400
 800c098:	40000400 	.word	0x40000400
 800c09c:	50000400 	.word	0x50000400
 800c0a0:	40000800 	.word	0x40000800
 800c0a4:	50000800 	.word	0x50000800
 800c0a8:	40000c00 	.word	0x40000c00
 800c0ac:	50000c00 	.word	0x50000c00
 800c0b0:	40014000 	.word	0x40014000
 800c0b4:	50014000 	.word	0x50014000

0800c0b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e042      	b.n	800c150 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7f6 fa17 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2224      	movs	r2, #36	@ 0x24
 800c0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0201 	bic.w	r2, r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa68 	bl	800c5d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f8c3 	bl	800c294 <UART_SetConfig>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e01b      	b.n	800c150 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f042 0201 	orr.w	r2, r2, #1
 800c146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fae7 	bl	800c71c <UART_CheckIdleState>
 800c14e:	4603      	mov	r3, r0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08a      	sub	sp, #40	@ 0x28
 800c15c:	af02      	add	r7, sp, #8
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	4613      	mov	r3, r2
 800c166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c16e:	2b20      	cmp	r3, #32
 800c170:	f040 808b 	bne.w	800c28a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <HAL_UART_Transmit+0x28>
 800c17a:	88fb      	ldrh	r3, [r7, #6]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e083      	b.n	800c28c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c18e:	2b80      	cmp	r3, #128	@ 0x80
 800c190:	d107      	bne.n	800c1a2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c1a0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2221      	movs	r2, #33	@ 0x21
 800c1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1b2:	f7f6 fbc5 	bl	8002940 <HAL_GetTick>
 800c1b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	88fa      	ldrh	r2, [r7, #6]
 800c1bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	88fa      	ldrh	r2, [r7, #6]
 800c1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1d0:	d108      	bne.n	800c1e4 <HAL_UART_Transmit+0x8c>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d104      	bne.n	800c1e4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	61bb      	str	r3, [r7, #24]
 800c1e2:	e003      	b.n	800c1ec <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c1ec:	e030      	b.n	800c250 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2180      	movs	r1, #128	@ 0x80
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 fb39 	bl	800c870 <UART_WaitOnFlagUntilTimeout>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d005      	beq.n	800c210 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2220      	movs	r2, #32
 800c208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c20c:	2303      	movs	r3, #3
 800c20e:	e03d      	b.n	800c28c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10b      	bne.n	800c22e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c224:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	3302      	adds	r3, #2
 800c22a:	61bb      	str	r3, [r7, #24]
 800c22c:	e007      	b.n	800c23e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	3301      	adds	r3, #1
 800c23c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c244:	b29b      	uxth	r3, r3
 800c246:	3b01      	subs	r3, #1
 800c248:	b29a      	uxth	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c256:	b29b      	uxth	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1c8      	bne.n	800c1ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2200      	movs	r2, #0
 800c264:	2140      	movs	r1, #64	@ 0x40
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fb02 	bl	800c870 <UART_WaitOnFlagUntilTimeout>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d005      	beq.n	800c27e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2220      	movs	r2, #32
 800c276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e006      	b.n	800c28c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2220      	movs	r2, #32
 800c282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	e000      	b.n	800c28c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800c28a:	2302      	movs	r3, #2
  }
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c298:	b094      	sub	sp, #80	@ 0x50
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	4b7e      	ldr	r3, [pc, #504]	@ (800c4a4 <UART_SetConfig+0x210>)
 800c2aa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	69db      	ldr	r3, [r3, #28]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4977      	ldr	r1, [pc, #476]	@ (800c4a8 <UART_SetConfig+0x214>)
 800c2cc:	4019      	ands	r1, r3
 800c2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2d4:	430b      	orrs	r3, r1
 800c2d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e4:	68d9      	ldr	r1, [r3, #12]
 800c2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	ea40 0301 	orr.w	r3, r0, r1
 800c2ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b6a      	ldr	r3, [pc, #424]	@ (800c4a4 <UART_SetConfig+0x210>)
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d009      	beq.n	800c314 <UART_SetConfig+0x80>
 800c300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	4b69      	ldr	r3, [pc, #420]	@ (800c4ac <UART_SetConfig+0x218>)
 800c306:	429a      	cmp	r2, r3
 800c308:	d004      	beq.n	800c314 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30c:	6a1a      	ldr	r2, [r3, #32]
 800c30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c310:	4313      	orrs	r3, r2
 800c312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c31e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c328:	430b      	orrs	r3, r1
 800c32a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c332:	f023 000f 	bic.w	r0, r3, #15
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	ea40 0301 	orr.w	r3, r0, r1
 800c342:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	4b59      	ldr	r3, [pc, #356]	@ (800c4b0 <UART_SetConfig+0x21c>)
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d102      	bne.n	800c354 <UART_SetConfig+0xc0>
 800c34e:	2301      	movs	r3, #1
 800c350:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c352:	e029      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	4b56      	ldr	r3, [pc, #344]	@ (800c4b4 <UART_SetConfig+0x220>)
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d102      	bne.n	800c364 <UART_SetConfig+0xd0>
 800c35e:	2302      	movs	r3, #2
 800c360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c362:	e021      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	4b53      	ldr	r3, [pc, #332]	@ (800c4b8 <UART_SetConfig+0x224>)
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d102      	bne.n	800c374 <UART_SetConfig+0xe0>
 800c36e:	2304      	movs	r3, #4
 800c370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c372:	e019      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	4b50      	ldr	r3, [pc, #320]	@ (800c4bc <UART_SetConfig+0x228>)
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d102      	bne.n	800c384 <UART_SetConfig+0xf0>
 800c37e:	2308      	movs	r3, #8
 800c380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c382:	e011      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4b4d      	ldr	r3, [pc, #308]	@ (800c4c0 <UART_SetConfig+0x22c>)
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d102      	bne.n	800c394 <UART_SetConfig+0x100>
 800c38e:	2310      	movs	r3, #16
 800c390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c392:	e009      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	4b42      	ldr	r3, [pc, #264]	@ (800c4a4 <UART_SetConfig+0x210>)
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d102      	bne.n	800c3a4 <UART_SetConfig+0x110>
 800c39e:	2320      	movs	r3, #32
 800c3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3a2:	e001      	b.n	800c3a8 <UART_SetConfig+0x114>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	4b3d      	ldr	r3, [pc, #244]	@ (800c4a4 <UART_SetConfig+0x210>)
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d005      	beq.n	800c3be <UART_SetConfig+0x12a>
 800c3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	4b3d      	ldr	r3, [pc, #244]	@ (800c4ac <UART_SetConfig+0x218>)
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	f040 8085 	bne.w	800c4c8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c3be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	623b      	str	r3, [r7, #32]
 800c3c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c3ca:	f7fd feed 	bl	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 80e8 	beq.w	800c5a8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3dc:	4a39      	ldr	r2, [pc, #228]	@ (800c4c4 <UART_SetConfig+0x230>)
 800c3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	4413      	add	r3, r2
 800c3f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d305      	bcc.n	800c408 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c404:	429a      	cmp	r2, r3
 800c406:	d903      	bls.n	800c410 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c40e:	e048      	b.n	800c4a2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c412:	2200      	movs	r2, #0
 800c414:	61bb      	str	r3, [r7, #24]
 800c416:	61fa      	str	r2, [r7, #28]
 800c418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41c:	4a29      	ldr	r2, [pc, #164]	@ (800c4c4 <UART_SetConfig+0x230>)
 800c41e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c422:	b29b      	uxth	r3, r3
 800c424:	2200      	movs	r2, #0
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	617a      	str	r2, [r7, #20]
 800c42a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c42e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c432:	f7f4 fc2d 	bl	8000c90 <__aeabi_uldivmod>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4610      	mov	r0, r2
 800c43c:	4619      	mov	r1, r3
 800c43e:	f04f 0200 	mov.w	r2, #0
 800c442:	f04f 0300 	mov.w	r3, #0
 800c446:	020b      	lsls	r3, r1, #8
 800c448:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c44c:	0202      	lsls	r2, r0, #8
 800c44e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c450:	6849      	ldr	r1, [r1, #4]
 800c452:	0849      	lsrs	r1, r1, #1
 800c454:	2000      	movs	r0, #0
 800c456:	460c      	mov	r4, r1
 800c458:	4605      	mov	r5, r0
 800c45a:	eb12 0804 	adds.w	r8, r2, r4
 800c45e:	eb43 0905 	adc.w	r9, r3, r5
 800c462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	60bb      	str	r3, [r7, #8]
 800c46a:	60fa      	str	r2, [r7, #12]
 800c46c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c470:	4640      	mov	r0, r8
 800c472:	4649      	mov	r1, r9
 800c474:	f7f4 fc0c 	bl	8000c90 <__aeabi_uldivmod>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4613      	mov	r3, r2
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c486:	d308      	bcc.n	800c49a <UART_SetConfig+0x206>
 800c488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c48e:	d204      	bcs.n	800c49a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800c490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c496:	60da      	str	r2, [r3, #12]
 800c498:	e003      	b.n	800c4a2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c4a0:	e082      	b.n	800c5a8 <UART_SetConfig+0x314>
 800c4a2:	e081      	b.n	800c5a8 <UART_SetConfig+0x314>
 800c4a4:	46002400 	.word	0x46002400
 800c4a8:	cfff69f3 	.word	0xcfff69f3
 800c4ac:	56002400 	.word	0x56002400
 800c4b0:	40013800 	.word	0x40013800
 800c4b4:	40004400 	.word	0x40004400
 800c4b8:	40004800 	.word	0x40004800
 800c4bc:	40004c00 	.word	0x40004c00
 800c4c0:	40005000 	.word	0x40005000
 800c4c4:	08013140 	.word	0x08013140
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4d0:	d13c      	bne.n	800c54c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c4d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	607a      	str	r2, [r7, #4]
 800c4da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4de:	f7fd fe63 	bl	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c4e2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d05e      	beq.n	800c5a8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ee:	4a39      	ldr	r2, [pc, #228]	@ (800c5d4 <UART_SetConfig+0x340>)
 800c4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4fc:	005a      	lsls	r2, r3, #1
 800c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	085b      	lsrs	r3, r3, #1
 800c504:	441a      	add	r2, r3
 800c506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c512:	2b0f      	cmp	r3, #15
 800c514:	d916      	bls.n	800c544 <UART_SetConfig+0x2b0>
 800c516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c51c:	d212      	bcs.n	800c544 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c520:	b29b      	uxth	r3, r3
 800c522:	f023 030f 	bic.w	r3, r3, #15
 800c526:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c52a:	085b      	lsrs	r3, r3, #1
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f003 0307 	and.w	r3, r3, #7
 800c532:	b29a      	uxth	r2, r3
 800c534:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c536:	4313      	orrs	r3, r2
 800c538:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	e031      	b.n	800c5a8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c54a:	e02d      	b.n	800c5a8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c54c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c54e:	2200      	movs	r2, #0
 800c550:	469a      	mov	sl, r3
 800c552:	4693      	mov	fp, r2
 800c554:	4650      	mov	r0, sl
 800c556:	4659      	mov	r1, fp
 800c558:	f7fd fe26 	bl	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c55c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c560:	2b00      	cmp	r3, #0
 800c562:	d021      	beq.n	800c5a8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c568:	4a1a      	ldr	r2, [pc, #104]	@ (800c5d4 <UART_SetConfig+0x340>)
 800c56a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c56e:	461a      	mov	r2, r3
 800c570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c572:	fbb3 f2f2 	udiv	r2, r3, r2
 800c576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	085b      	lsrs	r3, r3, #1
 800c57c:	441a      	add	r2, r3
 800c57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	fbb2 f3f3 	udiv	r3, r2, r3
 800c586:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58a:	2b0f      	cmp	r3, #15
 800c58c:	d909      	bls.n	800c5a2 <UART_SetConfig+0x30e>
 800c58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c594:	d205      	bcs.n	800c5a2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c598:	b29a      	uxth	r2, r3
 800c59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60da      	str	r2, [r3, #12]
 800c5a0:	e002      	b.n	800c5a8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c5c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3750      	adds	r7, #80	@ 0x50
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5d2:	bf00      	nop
 800c5d4:	08013140 	.word	0x08013140

0800c5d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e4:	f003 0308 	and.w	r3, r3, #8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	430a      	orrs	r2, r1
 800c622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00a      	beq.n	800c646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	430a      	orrs	r2, r1
 800c644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00a      	beq.n	800c668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c66c:	f003 0310 	and.w	r3, r3, #16
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00a      	beq.n	800c68a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c68e:	f003 0320 	and.w	r3, r3, #32
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	430a      	orrs	r2, r1
 800c6aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01a      	beq.n	800c6ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6d6:	d10a      	bne.n	800c6ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	430a      	orrs	r2, r1
 800c6ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	430a      	orrs	r2, r1
 800c70e:	605a      	str	r2, [r3, #4]
  }
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b098      	sub	sp, #96	@ 0x60
 800c720:	af02      	add	r7, sp, #8
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c72c:	f7f6 f908 	bl	8002940 <HAL_GetTick>
 800c730:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 0308 	and.w	r3, r3, #8
 800c73c:	2b08      	cmp	r3, #8
 800c73e:	d12f      	bne.n	800c7a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c740:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c748:	2200      	movs	r2, #0
 800c74a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f88e 	bl	800c870 <UART_WaitOnFlagUntilTimeout>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d022      	beq.n	800c7a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c76a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c76e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c778:	647b      	str	r3, [r7, #68]	@ 0x44
 800c77a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e6      	bne.n	800c75a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2220      	movs	r2, #32
 800c790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e063      	b.n	800c868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 0304 	and.w	r3, r3, #4
 800c7aa:	2b04      	cmp	r3, #4
 800c7ac:	d149      	bne.n	800c842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f857 	bl	800c870 <UART_WaitOnFlagUntilTimeout>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d03c      	beq.n	800c842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	e853 3f00 	ldrex	r3, [r3]
 800c7d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7ee:	e841 2300 	strex	r3, r2, [r1]
 800c7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1e6      	bne.n	800c7c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3308      	adds	r3, #8
 800c800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	e853 3f00 	ldrex	r3, [r3]
 800c808:	60fb      	str	r3, [r7, #12]
   return(result);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f023 0301 	bic.w	r3, r3, #1
 800c810:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3308      	adds	r3, #8
 800c818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c81a:	61fa      	str	r2, [r7, #28]
 800c81c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81e:	69b9      	ldr	r1, [r7, #24]
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	e841 2300 	strex	r3, r2, [r1]
 800c826:	617b      	str	r3, [r7, #20]
   return(result);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1e5      	bne.n	800c7fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e012      	b.n	800c868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2220      	movs	r2, #32
 800c846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2220      	movs	r2, #32
 800c84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3758      	adds	r7, #88	@ 0x58
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	603b      	str	r3, [r7, #0]
 800c87c:	4613      	mov	r3, r2
 800c87e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c880:	e04f      	b.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c888:	d04b      	beq.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c88a:	f7f6 f859 	bl	8002940 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	429a      	cmp	r2, r3
 800c898:	d302      	bcc.n	800c8a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e04e      	b.n	800c942 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f003 0304 	and.w	r3, r3, #4
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d037      	beq.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2b80      	cmp	r3, #128	@ 0x80
 800c8b6:	d034      	beq.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b40      	cmp	r3, #64	@ 0x40
 800c8bc:	d031      	beq.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	69db      	ldr	r3, [r3, #28]
 800c8c4:	f003 0308 	and.w	r3, r3, #8
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d110      	bne.n	800c8ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2208      	movs	r2, #8
 800c8d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 f838 	bl	800c94a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2208      	movs	r2, #8
 800c8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e029      	b.n	800c942 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8fc:	d111      	bne.n	800c922 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f81e 	bl	800c94a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2220      	movs	r2, #32
 800c912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e00f      	b.n	800c942 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69da      	ldr	r2, [r3, #28]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4013      	ands	r3, r2
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	429a      	cmp	r2, r3
 800c930:	bf0c      	ite	eq
 800c932:	2301      	moveq	r3, #1
 800c934:	2300      	movne	r3, #0
 800c936:	b2db      	uxtb	r3, r3
 800c938:	461a      	mov	r2, r3
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d0a0      	beq.n	800c882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b095      	sub	sp, #84	@ 0x54
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c95a:	e853 3f00 	ldrex	r3, [r3]
 800c95e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c970:	643b      	str	r3, [r7, #64]	@ 0x40
 800c972:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c978:	e841 2300 	strex	r3, r2, [r1]
 800c97c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e6      	bne.n	800c952 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3308      	adds	r3, #8
 800c98a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	61fb      	str	r3, [r7, #28]
   return(result);
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c99a:	f023 0301 	bic.w	r3, r3, #1
 800c99e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3308      	adds	r3, #8
 800c9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e3      	bne.n	800c984 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d118      	bne.n	800c9f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	e853 3f00 	ldrex	r3, [r3]
 800c9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	f023 0310 	bic.w	r3, r3, #16
 800c9d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e2:	61bb      	str	r3, [r7, #24]
 800c9e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6979      	ldr	r1, [r7, #20]
 800c9e8:	69ba      	ldr	r2, [r7, #24]
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e6      	bne.n	800c9c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2220      	movs	r2, #32
 800c9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ca0a:	bf00      	nop
 800ca0c:	3754      	adds	r7, #84	@ 0x54
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d101      	bne.n	800ca2c <HAL_UARTEx_DisableFifoMode+0x16>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e027      	b.n	800ca7c <HAL_UARTEx_DisableFifoMode+0x66>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2224      	movs	r2, #36	@ 0x24
 800ca38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0201 	bic.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d101      	bne.n	800caa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e02d      	b.n	800cafc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2224      	movs	r2, #36	@ 0x24
 800caac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 0201 	bic.w	r2, r2, #1
 800cac6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f84f 	bl	800cb80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d101      	bne.n	800cb1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e02d      	b.n	800cb78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2224      	movs	r2, #36	@ 0x24
 800cb28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0201 	bic.w	r2, r2, #1
 800cb42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	430a      	orrs	r2, r1
 800cb56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f811 	bl	800cb80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2220      	movs	r2, #32
 800cb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d108      	bne.n	800cba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cba0:	e031      	b.n	800cc06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cba2:	2308      	movs	r3, #8
 800cba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cba6:	2308      	movs	r3, #8
 800cba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	0e5b      	lsrs	r3, r3, #25
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	f003 0307 	and.w	r3, r3, #7
 800cbb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	0f5b      	lsrs	r3, r3, #29
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 0307 	and.w	r3, r3, #7
 800cbc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbca:	7bbb      	ldrb	r3, [r7, #14]
 800cbcc:	7b3a      	ldrb	r2, [r7, #12]
 800cbce:	4911      	ldr	r1, [pc, #68]	@ (800cc14 <UARTEx_SetNbDataToProcess+0x94>)
 800cbd0:	5c8a      	ldrb	r2, [r1, r2]
 800cbd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbd6:	7b3a      	ldrb	r2, [r7, #12]
 800cbd8:	490f      	ldr	r1, [pc, #60]	@ (800cc18 <UARTEx_SetNbDataToProcess+0x98>)
 800cbda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	7b7a      	ldrb	r2, [r7, #13]
 800cbec:	4909      	ldr	r1, [pc, #36]	@ (800cc14 <UARTEx_SetNbDataToProcess+0x94>)
 800cbee:	5c8a      	ldrb	r2, [r1, r2]
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbf4:	7b7a      	ldrb	r2, [r7, #13]
 800cbf6:	4908      	ldr	r1, [pc, #32]	@ (800cc18 <UARTEx_SetNbDataToProcess+0x98>)
 800cbf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc06:	bf00      	nop
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	08013158 	.word	0x08013158
 800cc18:	08013160 	.word	0x08013160

0800cc1c <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	af00      	add	r7, sp, #0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800cc20:	4b2a      	ldr	r3, [pc, #168]	@ (800cccc <_fx_system_initialize+0xb0>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800cc26:	4b2a      	ldr	r3, [pc, #168]	@ (800ccd0 <_fx_system_initialize+0xb4>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800cc2c:	4b29      	ldr	r3, [pc, #164]	@ (800ccd4 <_fx_system_initialize+0xb8>)
 800cc2e:	f644 2221 	movw	r2, #18977	@ 0x4a21
 800cc32:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800cc34:	4b28      	ldr	r3, [pc, #160]	@ (800ccd8 <_fx_system_initialize+0xbc>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800cc3a:	4b28      	ldr	r3, [pc, #160]	@ (800ccdc <_fx_system_initialize+0xc0>)
 800cc3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc40:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800cc42:	4b27      	ldr	r3, [pc, #156]	@ (800cce0 <_fx_system_initialize+0xc4>)
 800cc44:	2210      	movs	r2, #16
 800cc46:	601a      	str	r2, [r3, #0]
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800cc48:	4b26      	ldr	r3, [pc, #152]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc50:	4a24      	ldr	r2, [pc, #144]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc52:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800cc54:	4b23      	ldr	r3, [pc, #140]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc5c:	4a21      	ldr	r2, [pc, #132]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc5e:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LAST_NAME_LEN & 0xFF)) << 24);
    }

#ifdef FX_NO_TIMER
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 10);
 800cc60:	4b20      	ldr	r3, [pc, #128]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cc68:	4a1e      	ldr	r2, [pc, #120]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc6a:	6013      	str	r3, [r2, #0]
#endif
#ifdef FX_SINGLE_THREAD
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 9);
 800cc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc74:	4a1b      	ldr	r2, [pc, #108]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc76:	6013      	str	r3, [r2, #0]
#endif
#ifdef FX_RENAME_PATH_INHERIT
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 3);
#endif
#ifdef FX_NO_LOCAL_PATH
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 2);
 800cc78:	4b1a      	ldr	r3, [pc, #104]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f043 0304 	orr.w	r3, r3, #4
 800cc80:	4a18      	ldr	r2, [pc, #96]	@ (800cce4 <_fx_system_initialize+0xc8>)
 800cc82:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800cc84:	4b18      	ldr	r3, [pc, #96]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cc8c:	4a16      	ldr	r2, [pc, #88]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cc8e:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800cc90:	4b15      	ldr	r3, [pc, #84]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc98:	4a13      	ldr	r2, [pc, #76]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cc9a:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800cc9c:	4b12      	ldr	r3, [pc, #72]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f043 0310 	orr.w	r3, r3, #16
 800cca4:	4a10      	ldr	r2, [pc, #64]	@ (800cce8 <_fx_system_initialize+0xcc>)
 800cca6:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800cca8:	4b10      	ldr	r3, [pc, #64]	@ (800ccec <_fx_system_initialize+0xd0>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800ccb0:	4a0e      	ldr	r2, [pc, #56]	@ (800ccec <_fx_system_initialize+0xd0>)
 800ccb2:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800ccb4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <_fx_system_initialize+0xd0>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f443 737a 	orr.w	r3, r3, #1000	@ 0x3e8
 800ccbc:	4a0b      	ldr	r2, [pc, #44]	@ (800ccec <_fx_system_initialize+0xd0>)
 800ccbe:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800ccc0:	bf00      	nop
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	2000c5b8 	.word	0x2000c5b8
 800ccd0:	2000c5bc 	.word	0x2000c5bc
 800ccd4:	2000c5c0 	.word	0x2000c5c0
 800ccd8:	2000c5c4 	.word	0x2000c5c4
 800ccdc:	2000c5c8 	.word	0x2000c5c8
 800cce0:	2000c5cc 	.word	0x2000c5cc
 800cce4:	2000c5d0 	.word	0x2000c5d0
 800cce8:	2000c5d4 	.word	0x2000c5d4
 800ccec:	2000c5d8 	.word	0x2000c5d8

0800ccf0 <arm_rfft_32_fast_init_f32>:
 800ccf0:	b150      	cbz	r0, 800cd08 <arm_rfft_32_fast_init_f32+0x18>
 800ccf2:	2110      	movs	r1, #16
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	f000 fd66 	bl	800d7c8 <arm_cfft_init_f32>
 800ccfc:	b918      	cbnz	r0, 800cd06 <arm_rfft_32_fast_init_f32+0x16>
 800ccfe:	2220      	movs	r2, #32
 800cd00:	4b03      	ldr	r3, [pc, #12]	@ (800cd10 <arm_rfft_32_fast_init_f32+0x20>)
 800cd02:	8222      	strh	r2, [r4, #16]
 800cd04:	6163      	str	r3, [r4, #20]
 800cd06:	bd10      	pop	{r4, pc}
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	0802bbc0 	.word	0x0802bbc0

0800cd14 <arm_rfft_64_fast_init_f32>:
 800cd14:	b150      	cbz	r0, 800cd2c <arm_rfft_64_fast_init_f32+0x18>
 800cd16:	2120      	movs	r1, #32
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	f000 fd54 	bl	800d7c8 <arm_cfft_init_f32>
 800cd20:	b918      	cbnz	r0, 800cd2a <arm_rfft_64_fast_init_f32+0x16>
 800cd22:	2240      	movs	r2, #64	@ 0x40
 800cd24:	4b03      	ldr	r3, [pc, #12]	@ (800cd34 <arm_rfft_64_fast_init_f32+0x20>)
 800cd26:	8222      	strh	r2, [r4, #16]
 800cd28:	6163      	str	r3, [r4, #20]
 800cd2a:	bd10      	pop	{r4, pc}
 800cd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	08030440 	.word	0x08030440

0800cd38 <arm_rfft_128_fast_init_f32>:
 800cd38:	b150      	cbz	r0, 800cd50 <arm_rfft_128_fast_init_f32+0x18>
 800cd3a:	2140      	movs	r1, #64	@ 0x40
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	f000 fd42 	bl	800d7c8 <arm_cfft_init_f32>
 800cd44:	b918      	cbnz	r0, 800cd4e <arm_rfft_128_fast_init_f32+0x16>
 800cd46:	2280      	movs	r2, #128	@ 0x80
 800cd48:	4b03      	ldr	r3, [pc, #12]	@ (800cd58 <arm_rfft_128_fast_init_f32+0x20>)
 800cd4a:	8222      	strh	r2, [r4, #16]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	bd10      	pop	{r4, pc}
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	080295c0 	.word	0x080295c0

0800cd5c <arm_rfft_256_fast_init_f32>:
 800cd5c:	b158      	cbz	r0, 800cd76 <arm_rfft_256_fast_init_f32+0x1a>
 800cd5e:	2180      	movs	r1, #128	@ 0x80
 800cd60:	b510      	push	{r4, lr}
 800cd62:	4604      	mov	r4, r0
 800cd64:	f000 fd30 	bl	800d7c8 <arm_cfft_init_f32>
 800cd68:	b920      	cbnz	r0, 800cd74 <arm_rfft_256_fast_init_f32+0x18>
 800cd6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd6e:	4b03      	ldr	r3, [pc, #12]	@ (800cd7c <arm_rfft_256_fast_init_f32+0x20>)
 800cd70:	8222      	strh	r2, [r4, #16]
 800cd72:	6163      	str	r3, [r4, #20]
 800cd74:	bd10      	pop	{r4, pc}
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	4770      	bx	lr
 800cd7c:	0802b7c0 	.word	0x0802b7c0

0800cd80 <arm_rfft_512_fast_init_f32>:
 800cd80:	b160      	cbz	r0, 800cd9c <arm_rfft_512_fast_init_f32+0x1c>
 800cd82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd86:	b510      	push	{r4, lr}
 800cd88:	4604      	mov	r4, r0
 800cd8a:	f000 fd1d 	bl	800d7c8 <arm_cfft_init_f32>
 800cd8e:	b920      	cbnz	r0, 800cd9a <arm_rfft_512_fast_init_f32+0x1a>
 800cd90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd94:	4b03      	ldr	r3, [pc, #12]	@ (800cda4 <arm_rfft_512_fast_init_f32+0x24>)
 800cd96:	8222      	strh	r2, [r4, #16]
 800cd98:	6163      	str	r3, [r4, #20]
 800cd9a:	bd10      	pop	{r4, pc}
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	0802fc40 	.word	0x0802fc40

0800cda8 <arm_rfft_1024_fast_init_f32>:
 800cda8:	b160      	cbz	r0, 800cdc4 <arm_rfft_1024_fast_init_f32+0x1c>
 800cdaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	f000 fd09 	bl	800d7c8 <arm_cfft_init_f32>
 800cdb6:	b920      	cbnz	r0, 800cdc2 <arm_rfft_1024_fast_init_f32+0x1a>
 800cdb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cdbc:	4b03      	ldr	r3, [pc, #12]	@ (800cdcc <arm_rfft_1024_fast_init_f32+0x24>)
 800cdbe:	8222      	strh	r2, [r4, #16]
 800cdc0:	6163      	str	r3, [r4, #20]
 800cdc2:	bd10      	pop	{r4, pc}
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	080285c0 	.word	0x080285c0

0800cdd0 <arm_rfft_2048_fast_init_f32>:
 800cdd0:	b160      	cbz	r0, 800cdec <arm_rfft_2048_fast_init_f32+0x1c>
 800cdd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	4604      	mov	r4, r0
 800cdda:	f000 fcf5 	bl	800d7c8 <arm_cfft_init_f32>
 800cdde:	b920      	cbnz	r0, 800cdea <arm_rfft_2048_fast_init_f32+0x1a>
 800cde0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cde4:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <arm_rfft_2048_fast_init_f32+0x24>)
 800cde6:	8222      	strh	r2, [r4, #16]
 800cde8:	6163      	str	r3, [r4, #20]
 800cdea:	bd10      	pop	{r4, pc}
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	080297c0 	.word	0x080297c0

0800cdf8 <arm_rfft_4096_fast_init_f32>:
 800cdf8:	b160      	cbz	r0, 800ce14 <arm_rfft_4096_fast_init_f32+0x1c>
 800cdfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cdfe:	b510      	push	{r4, lr}
 800ce00:	4604      	mov	r4, r0
 800ce02:	f000 fce1 	bl	800d7c8 <arm_cfft_init_f32>
 800ce06:	b920      	cbnz	r0, 800ce12 <arm_rfft_4096_fast_init_f32+0x1a>
 800ce08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ce0c:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <arm_rfft_4096_fast_init_f32+0x24>)
 800ce0e:	8222      	strh	r2, [r4, #16]
 800ce10:	6163      	str	r3, [r4, #20]
 800ce12:	bd10      	pop	{r4, pc}
 800ce14:	f04f 30ff 	mov.w	r0, #4294967295
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	0802bc40 	.word	0x0802bc40

0800ce20 <arm_rfft_fast_init_f32>:
 800ce20:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ce24:	d024      	beq.n	800ce70 <arm_rfft_fast_init_f32+0x50>
 800ce26:	d807      	bhi.n	800ce38 <arm_rfft_fast_init_f32+0x18>
 800ce28:	2980      	cmp	r1, #128	@ 0x80
 800ce2a:	d01c      	beq.n	800ce66 <arm_rfft_fast_init_f32+0x46>
 800ce2c:	d90c      	bls.n	800ce48 <arm_rfft_fast_init_f32+0x28>
 800ce2e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800ce32:	d11a      	bne.n	800ce6a <arm_rfft_fast_init_f32+0x4a>
 800ce34:	4b0f      	ldr	r3, [pc, #60]	@ (800ce74 <arm_rfft_fast_init_f32+0x54>)
 800ce36:	4718      	bx	r3
 800ce38:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800ce3c:	d011      	beq.n	800ce62 <arm_rfft_fast_init_f32+0x42>
 800ce3e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800ce42:	d107      	bne.n	800ce54 <arm_rfft_fast_init_f32+0x34>
 800ce44:	4b0c      	ldr	r3, [pc, #48]	@ (800ce78 <arm_rfft_fast_init_f32+0x58>)
 800ce46:	4718      	bx	r3
 800ce48:	2920      	cmp	r1, #32
 800ce4a:	d008      	beq.n	800ce5e <arm_rfft_fast_init_f32+0x3e>
 800ce4c:	2940      	cmp	r1, #64	@ 0x40
 800ce4e:	d10c      	bne.n	800ce6a <arm_rfft_fast_init_f32+0x4a>
 800ce50:	4b0a      	ldr	r3, [pc, #40]	@ (800ce7c <arm_rfft_fast_init_f32+0x5c>)
 800ce52:	e7f0      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce54:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ce58:	d107      	bne.n	800ce6a <arm_rfft_fast_init_f32+0x4a>
 800ce5a:	4b09      	ldr	r3, [pc, #36]	@ (800ce80 <arm_rfft_fast_init_f32+0x60>)
 800ce5c:	e7eb      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce5e:	4b09      	ldr	r3, [pc, #36]	@ (800ce84 <arm_rfft_fast_init_f32+0x64>)
 800ce60:	e7e9      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce62:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <arm_rfft_fast_init_f32+0x68>)
 800ce64:	e7e7      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce66:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <arm_rfft_fast_init_f32+0x6c>)
 800ce68:	e7e5      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6e:	4770      	bx	lr
 800ce70:	4b07      	ldr	r3, [pc, #28]	@ (800ce90 <arm_rfft_fast_init_f32+0x70>)
 800ce72:	e7e0      	b.n	800ce36 <arm_rfft_fast_init_f32+0x16>
 800ce74:	0800cd5d 	.word	0x0800cd5d
 800ce78:	0800cdf9 	.word	0x0800cdf9
 800ce7c:	0800cd15 	.word	0x0800cd15
 800ce80:	0800cda9 	.word	0x0800cda9
 800ce84:	0800ccf1 	.word	0x0800ccf1
 800ce88:	0800cdd1 	.word	0x0800cdd1
 800ce8c:	0800cd39 	.word	0x0800cd39
 800ce90:	0800cd81 	.word	0x0800cd81

0800ce94 <stage_rfft_f32>:
 800ce94:	b470      	push	{r4, r5, r6}
 800ce96:	edd1 7a00 	vldr	s15, [r1]
 800ce9a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ce9e:	ed91 7a01 	vldr	s14, [r1, #4]
 800cea2:	f101 0410 	add.w	r4, r1, #16
 800cea6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ceaa:	8806      	ldrh	r6, [r0, #0]
 800ceac:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ceb0:	6940      	ldr	r0, [r0, #20]
 800ceb2:	3e01      	subs	r6, #1
 800ceb4:	eeb0 4a46 	vmov.f32	s8, s12
 800ceb8:	f102 0510 	add.w	r5, r2, #16
 800cebc:	3010      	adds	r0, #16
 800cebe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cec2:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ceca:	f1a1 0308 	sub.w	r3, r1, #8
 800cece:	ee26 7a86 	vmul.f32	s14, s13, s12
 800ced2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ced6:	ed82 7a00 	vstr	s14, [r2]
 800ceda:	edc2 7a01 	vstr	s15, [r2, #4]
 800cede:	ed14 6a02 	vldr	s12, [r4, #-8]
 800cee2:	3e01      	subs	r6, #1
 800cee4:	ed93 7a02 	vldr	s14, [r3, #8]
 800cee8:	f104 0408 	add.w	r4, r4, #8
 800ceec:	ed50 6a02 	vldr	s13, [r0, #-8]
 800cef0:	f1a3 0308 	sub.w	r3, r3, #8
 800cef4:	ee77 5a46 	vsub.f32	s11, s14, s12
 800cef8:	edd3 4a05 	vldr	s9, [r3, #20]
 800cefc:	ed54 7a03 	vldr	s15, [r4, #-12]
 800cf00:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cf04:	ed10 6a01 	vldr	s12, [r0, #-4]
 800cf08:	f105 0508 	add.w	r5, r5, #8
 800cf0c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800cf10:	f100 0008 	add.w	r0, r0, #8
 800cf14:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800cf18:	ee66 5a25 	vmul.f32	s11, s12, s11
 800cf1c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cf20:	ee37 7a23 	vadd.f32	s14, s14, s7
 800cf24:	ee66 6a85 	vmul.f32	s13, s13, s10
 800cf28:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cf2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cf30:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cf34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf38:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cf3c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cf40:	ed05 7a04 	vstr	s14, [r5, #-16]
 800cf44:	ed45 7a03 	vstr	s15, [r5, #-12]
 800cf48:	d1c9      	bne.n	800cede <stage_rfft_f32+0x4a>
 800cf4a:	bc70      	pop	{r4, r5, r6}
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop

0800cf50 <merge_rfft_f32>:
 800cf50:	b410      	push	{r4}
 800cf52:	edd1 7a00 	vldr	s15, [r1]
 800cf56:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800cf5a:	edd1 6a01 	vldr	s13, [r1, #4]
 800cf5e:	8804      	ldrh	r4, [r0, #0]
 800cf60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf64:	6940      	ldr	r0, [r0, #20]
 800cf66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf6a:	3c01      	subs	r4, #1
 800cf6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cf70:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cf74:	ed82 7a00 	vstr	s14, [r2]
 800cf78:	edc2 7a01 	vstr	s15, [r2, #4]
 800cf7c:	b3dc      	cbz	r4, 800cff6 <merge_rfft_f32+0xa6>
 800cf7e:	00e3      	lsls	r3, r4, #3
 800cf80:	3010      	adds	r0, #16
 800cf82:	3210      	adds	r2, #16
 800cf84:	3b08      	subs	r3, #8
 800cf86:	440b      	add	r3, r1
 800cf88:	3110      	adds	r1, #16
 800cf8a:	ed11 6a02 	vldr	s12, [r1, #-8]
 800cf8e:	3c01      	subs	r4, #1
 800cf90:	ed93 7a02 	vldr	s14, [r3, #8]
 800cf94:	f101 0108 	add.w	r1, r1, #8
 800cf98:	ed50 6a02 	vldr	s13, [r0, #-8]
 800cf9c:	f1a3 0308 	sub.w	r3, r3, #8
 800cfa0:	ee76 5a47 	vsub.f32	s11, s12, s14
 800cfa4:	edd3 4a05 	vldr	s9, [r3, #20]
 800cfa8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800cfac:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cfb0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800cfb4:	f102 0208 	add.w	r2, r2, #8
 800cfb8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800cfbc:	f100 0008 	add.w	r0, r0, #8
 800cfc0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800cfc4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800cfc8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cfcc:	ee37 7a63 	vsub.f32	s14, s14, s7
 800cfd0:	ee66 6a85 	vmul.f32	s13, s13, s10
 800cfd4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cfd8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cfdc:	ee37 7a46 	vsub.f32	s14, s14, s12
 800cfe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cfe4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cfe8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cfec:	ed02 7a04 	vstr	s14, [r2, #-16]
 800cff0:	ed42 7a03 	vstr	s15, [r2, #-12]
 800cff4:	d1c9      	bne.n	800cf8a <merge_rfft_f32+0x3a>
 800cff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <arm_rfft_fast_f32>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	461c      	mov	r4, r3
 800d002:	4605      	mov	r5, r0
 800d004:	4616      	mov	r6, r2
 800d006:	b14b      	cbz	r3, 800d01c <arm_rfft_fast_f32+0x20>
 800d008:	f7ff ffa2 	bl	800cf50 <merge_rfft_f32>
 800d00c:	4622      	mov	r2, r4
 800d00e:	4631      	mov	r1, r6
 800d010:	4628      	mov	r0, r5
 800d012:	2301      	movs	r3, #1
 800d014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	f000 bb38 	b.w	800d68c <arm_cfft_f32>
 800d01c:	460f      	mov	r7, r1
 800d01e:	461a      	mov	r2, r3
 800d020:	2301      	movs	r3, #1
 800d022:	f000 fb33 	bl	800d68c <arm_cfft_f32>
 800d026:	4632      	mov	r2, r6
 800d028:	4639      	mov	r1, r7
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d030:	f7ff bf30 	b.w	800ce94 <stage_rfft_f32>

0800d034 <arm_cfft_radix8by2_f32>:
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	4607      	mov	r7, r0
 800d03a:	4608      	mov	r0, r1
 800d03c:	ed2d 8b06 	vpush	{d8-d10}
 800d040:	f8b7 c000 	ldrh.w	ip, [r7]
 800d044:	b082      	sub	sp, #8
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d04c:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d050:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d054:	f000 80ac 	beq.w	800d1b0 <arm_cfft_radix8by2_f32+0x17c>
 800d058:	008c      	lsls	r4, r1, #2
 800d05a:	f100 0310 	add.w	r3, r0, #16
 800d05e:	3210      	adds	r2, #16
 800d060:	f108 0610 	add.w	r6, r8, #16
 800d064:	3410      	adds	r4, #16
 800d066:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d06a:	1905      	adds	r5, r0, r4
 800d06c:	4444      	add	r4, r8
 800d06e:	ed16 7a04 	vldr	s14, [r6, #-16]
 800d072:	3310      	adds	r3, #16
 800d074:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 800d078:	3510      	adds	r5, #16
 800d07a:	ed56 0a03 	vldr	s1, [r6, #-12]
 800d07e:	3210      	adds	r2, #16
 800d080:	ee74 9a87 	vadd.f32	s19, s9, s14
 800d084:	ed56 7a02 	vldr	s15, [r6, #-8]
 800d088:	ed56 2a01 	vldr	s5, [r6, #-4]
 800d08c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d090:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d094:	3610      	adds	r6, #16
 800d096:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d09a:	3410      	adds	r4, #16
 800d09c:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 800d0a0:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800d0a4:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800d0a8:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 800d0ac:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 800d0b0:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800d0b4:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 800d0b8:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d0bc:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 800d0c0:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d0c4:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800d0c8:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d0cc:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 800d0d0:	ee77 aa20 	vadd.f32	s21, s14, s1
 800d0d4:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 800d0d8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d0dc:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d0e0:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d0e4:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 800d0e8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d0ec:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 800d0f0:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d0f4:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 800d0f8:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d0fc:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 800d100:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 800d104:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d108:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 800d10c:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d110:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 800d114:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d118:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800d11c:	4563      	cmp	r3, ip
 800d11e:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800d122:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d126:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d12a:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d12e:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d132:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d136:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d13a:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d13e:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d142:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d146:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d14a:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d14e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d152:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 800d156:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 800d15a:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 800d15e:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 800d162:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800d166:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800d16a:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d16e:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d172:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d17a:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d17e:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d182:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d186:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d18a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d18e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d192:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d196:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d19a:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 800d19e:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 800d1a2:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 800d1a6:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800d1aa:	f47f af60 	bne.w	800d06e <arm_cfft_radix8by2_f32+0x3a>
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	b289      	uxth	r1, r1
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	9101      	str	r1, [sp, #4]
 800d1b6:	f000 fb57 	bl	800d868 <arm_radix8_butterfly_f32>
 800d1ba:	9901      	ldr	r1, [sp, #4]
 800d1bc:	4640      	mov	r0, r8
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	b002      	add	sp, #8
 800d1c4:	ecbd 8b06 	vpop	{d8-d10}
 800d1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	f000 bb4c 	b.w	800d868 <arm_radix8_butterfly_f32>

0800d1d0 <arm_cfft_radix8by4_f32>:
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d6:	ed2d 8b04 	vpush	{d8-d9}
 800d1da:	8813      	ldrh	r3, [r2, #0]
 800d1dc:	b08d      	sub	sp, #52	@ 0x34
 800d1de:	edd1 7a00 	vldr	s15, [r1]
 800d1e2:	085b      	lsrs	r3, r3, #1
 800d1e4:	6852      	ldr	r2, [r2, #4]
 800d1e6:	edd1 5a01 	vldr	s11, [r1, #4]
 800d1ea:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800d1ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1f0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	ed98 6a00 	vldr	s12, [r8]
 800d1fa:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 800d1fe:	ed96 7a00 	vldr	s14, [r6]
 800d202:	f102 0108 	add.w	r1, r2, #8
 800d206:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d20a:	ed95 5a00 	vldr	s10, [r5]
 800d20e:	edd8 4a01 	vldr	s9, [r8, #4]
 800d212:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d216:	9102      	str	r1, [sp, #8]
 800d218:	0859      	lsrs	r1, r3, #1
 800d21a:	ee77 3a26 	vadd.f32	s7, s14, s13
 800d21e:	ed96 4a01 	vldr	s8, [r6, #4]
 800d222:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d226:	ed95 3a01 	vldr	s6, [r5, #4]
 800d22a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d22e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d230:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d234:	0859      	lsrs	r1, r3, #1
 800d236:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d23a:	4603      	mov	r3, r0
 800d23c:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d240:	f102 0c10 	add.w	ip, r2, #16
 800d244:	edc0 3a00 	vstr	s7, [r0]
 800d248:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d24c:	ed96 2a01 	vldr	s4, [r6, #4]
 800d250:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d254:	3308      	adds	r3, #8
 800d256:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d25a:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d25e:	edd5 2a01 	vldr	s5, [r5, #4]
 800d262:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d26c:	4637      	mov	r7, r6
 800d26e:	462c      	mov	r4, r5
 800d270:	3902      	subs	r1, #2
 800d272:	4643      	mov	r3, r8
 800d274:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d278:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d27c:	f8cd c000 	str.w	ip, [sp]
 800d280:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d284:	f102 0c18 	add.w	ip, r2, #24
 800d288:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d28c:	3708      	adds	r7, #8
 800d28e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d292:	3308      	adds	r3, #8
 800d294:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d298:	3408      	adds	r4, #8
 800d29a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d29e:	0849      	lsrs	r1, r1, #1
 800d2a0:	ed80 6a01 	vstr	s12, [r0, #4]
 800d2a4:	9508      	str	r5, [sp, #32]
 800d2a6:	edc6 3a00 	vstr	s7, [r6]
 800d2aa:	edc6 4a01 	vstr	s9, [r6, #4]
 800d2ae:	9607      	str	r6, [sp, #28]
 800d2b0:	edc8 6a00 	vstr	s13, [r8]
 800d2b4:	edc8 5a01 	vstr	s11, [r8, #4]
 800d2b8:	f8cd c004 	str.w	ip, [sp, #4]
 800d2bc:	9706      	str	r7, [sp, #24]
 800d2be:	9305      	str	r3, [sp, #20]
 800d2c0:	edc5 7a00 	vstr	s15, [r5]
 800d2c4:	9404      	str	r4, [sp, #16]
 800d2c6:	ed85 7a01 	vstr	s14, [r5, #4]
 800d2ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d2cc:	f000 813a 	beq.w	800d544 <arm_cfft_radix8by4_f32+0x374>
 800d2d0:	4637      	mov	r7, r6
 800d2d2:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d2d6:	462e      	mov	r6, r5
 800d2d8:	f1aa 030c 	sub.w	r3, sl, #12
 800d2dc:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800d2e0:	f102 0a20 	add.w	sl, r2, #32
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	442b      	add	r3, r5
 800d2e8:	f100 0e10 	add.w	lr, r0, #16
 800d2ec:	f107 0510 	add.w	r5, r7, #16
 800d2f0:	f8dd b000 	ldr.w	fp, [sp]
 800d2f4:	f1a8 040c 	sub.w	r4, r8, #12
 800d2f8:	f108 0710 	add.w	r7, r8, #16
 800d2fc:	3e0c      	subs	r6, #12
 800d2fe:	3210      	adds	r2, #16
 800d300:	ed17 7a02 	vldr	s14, [r7, #-8]
 800d304:	3901      	subs	r1, #1
 800d306:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d30a:	f1ac 0c08 	sub.w	ip, ip, #8
 800d30e:	ed55 6a02 	vldr	s13, [r5, #-8]
 800d312:	f10e 0e08 	add.w	lr, lr, #8
 800d316:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d31a:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d31e:	ed57 5a01 	vldr	s11, [r7, #-4]
 800d322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d326:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d32a:	f10b 0b08 	add.w	fp, fp, #8
 800d32e:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d332:	ed15 3a01 	vldr	s6, [r5, #-4]
 800d336:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d33a:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d33e:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d342:	f105 0508 	add.w	r5, r5, #8
 800d346:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d34a:	f1a4 0408 	sub.w	r4, r4, #8
 800d34e:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d352:	f10a 0a10 	add.w	sl, sl, #16
 800d356:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d35a:	f107 0708 	add.w	r7, r7, #8
 800d35e:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d362:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d366:	ed55 5a03 	vldr	s11, [r5, #-12]
 800d36a:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d36e:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d372:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d376:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d37a:	f1a6 0608 	sub.w	r6, r6, #8
 800d37e:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d382:	f109 0918 	add.w	r9, r9, #24
 800d386:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d38a:	f102 0208 	add.w	r2, r2, #8
 800d38e:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d392:	f1a3 0308 	sub.w	r3, r3, #8
 800d396:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d39a:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d39e:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d3a2:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d3a6:	ed96 4a04 	vldr	s8, [r6, #16]
 800d3aa:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d3ae:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d3b2:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d3b6:	edd4 7a04 	vldr	s15, [r4, #16]
 800d3ba:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d3be:	ed93 8a04 	vldr	s16, [r3, #16]
 800d3c2:	edd6 5a03 	vldr	s11, [r6, #12]
 800d3c6:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d3ca:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d3ce:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d3d2:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d3d6:	ed94 1a03 	vldr	s2, [r4, #12]
 800d3da:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d3de:	edd3 2a03 	vldr	s5, [r3, #12]
 800d3e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d3e6:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d3ea:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d3ee:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d3f2:	edcc 0a04 	vstr	s1, [ip, #16]
 800d3f6:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d3fa:	edd4 6a03 	vldr	s13, [r4, #12]
 800d3fe:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d402:	ed93 9a03 	vldr	s18, [r3, #12]
 800d406:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d40a:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d40e:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d412:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d416:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d41a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d41e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d422:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d426:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d42a:	ed1b 1a03 	vldr	s2, [fp, #-12]
 800d42e:	ed1b 4a04 	vldr	s8, [fp, #-16]
 800d432:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d436:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d43a:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d43e:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d442:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d446:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d44a:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d44e:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d452:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d456:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d45a:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d45e:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d462:	ed05 5a03 	vstr	s10, [r5, #-12]
 800d466:	ed05 1a04 	vstr	s2, [r5, #-16]
 800d46a:	ed84 4a04 	vstr	s8, [r4, #16]
 800d46e:	edc4 5a03 	vstr	s11, [r4, #12]
 800d472:	ed1a 5a08 	vldr	s10, [sl, #-32]	@ 0xffffffe0
 800d476:	ed5a 5a07 	vldr	s11, [sl, #-28]	@ 0xffffffe4
 800d47a:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d47e:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d482:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d486:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d48a:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d48e:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d492:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d496:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d49a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d49e:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d4a2:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d4a6:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d4aa:	ed07 5a04 	vstr	s10, [r7, #-16]
 800d4ae:	ed07 6a03 	vstr	s12, [r7, #-12]
 800d4b2:	edc6 5a04 	vstr	s11, [r6, #16]
 800d4b6:	edc6 6a03 	vstr	s13, [r6, #12]
 800d4ba:	ed59 2a0c 	vldr	s5, [r9, #-48]	@ 0xffffffd0
 800d4be:	ed59 7a0b 	vldr	s15, [r9, #-44]	@ 0xffffffd4
 800d4c2:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d4c6:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d4ca:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d4ce:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d4d2:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d4d6:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d4da:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d4de:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d4e2:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d4e6:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d4ea:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d4ee:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d4f2:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d4f6:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d4fa:	ed83 2a04 	vstr	s4, [r3, #16]
 800d4fe:	edc3 7a03 	vstr	s15, [r3, #12]
 800d502:	f47f aefd 	bne.w	800d300 <arm_cfft_radix8by4_f32+0x130>
 800d506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d508:	9903      	ldr	r1, [sp, #12]
 800d50a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d50e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d512:	9103      	str	r1, [sp, #12]
 800d514:	9902      	ldr	r1, [sp, #8]
 800d516:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d51a:	9102      	str	r1, [sp, #8]
 800d51c:	9906      	ldr	r1, [sp, #24]
 800d51e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d522:	9106      	str	r1, [sp, #24]
 800d524:	9900      	ldr	r1, [sp, #0]
 800d526:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d52a:	9100      	str	r1, [sp, #0]
 800d52c:	9905      	ldr	r1, [sp, #20]
 800d52e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d532:	9105      	str	r1, [sp, #20]
 800d534:	9904      	ldr	r1, [sp, #16]
 800d536:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d53a:	9204      	str	r2, [sp, #16]
 800d53c:	9a01      	ldr	r2, [sp, #4]
 800d53e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	9c03      	ldr	r4, [sp, #12]
 800d546:	2304      	movs	r3, #4
 800d548:	9e05      	ldr	r6, [sp, #20]
 800d54a:	ed94 7a00 	vldr	s14, [r4]
 800d54e:	edd6 7a00 	vldr	s15, [r6]
 800d552:	9a06      	ldr	r2, [sp, #24]
 800d554:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d558:	9d04      	ldr	r5, [sp, #16]
 800d55a:	edd2 6a00 	vldr	s13, [r2]
 800d55e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d562:	ed95 3a00 	vldr	s6, [r5]
 800d566:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d56a:	ed96 5a01 	vldr	s10, [r6, #4]
 800d56e:	ed94 4a01 	vldr	s8, [r4, #4]
 800d572:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d576:	edd5 2a01 	vldr	s5, [r5, #4]
 800d57a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d57e:	edd2 7a01 	vldr	s15, [r2, #4]
 800d582:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d586:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800d58a:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d58e:	edc4 3a00 	vstr	s7, [r4]
 800d592:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d596:	edd2 3a01 	vldr	s7, [r2, #4]
 800d59a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d59e:	ed95 2a01 	vldr	s4, [r5, #4]
 800d5a2:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d5a6:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d5aa:	9103      	str	r1, [sp, #12]
 800d5ac:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d5b0:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d5b4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d5b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d5bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5c0:	edc4 3a01 	vstr	s7, [r4, #4]
 800d5c4:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d5c8:	9c02      	ldr	r4, [sp, #8]
 800d5ca:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d5ce:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d5d2:	edd4 3a00 	vldr	s7, [r4]
 800d5d6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d5da:	ed94 7a01 	vldr	s14, [r4, #4]
 800d5de:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d5e2:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d5e6:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d5ea:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d5ee:	ee34 7a07 	vadd.f32	s14, s8, s14
 800d5f2:	ee35 5a64 	vsub.f32	s10, s10, s9
 800d5f6:	ed82 7a00 	vstr	s14, [r2]
 800d5fa:	ed82 5a01 	vstr	s10, [r2, #4]
 800d5fe:	9a00      	ldr	r2, [sp, #0]
 800d600:	edd2 4a01 	vldr	s9, [r2, #4]
 800d604:	ed92 7a00 	vldr	s14, [r2]
 800d608:	9a01      	ldr	r2, [sp, #4]
 800d60a:	ee26 5a07 	vmul.f32	s10, s12, s14
 800d60e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d612:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d616:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d61a:	ee37 6a46 	vsub.f32	s12, s14, s12
 800d61e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d622:	ed86 6a01 	vstr	s12, [r6, #4]
 800d626:	edc6 5a00 	vstr	s11, [r6]
 800d62a:	edd2 5a01 	vldr	s11, [r2, #4]
 800d62e:	ed92 7a00 	vldr	s14, [r2]
 800d632:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d636:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d63a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d63e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d642:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d646:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d64a:	edc5 6a00 	vstr	s13, [r5]
 800d64e:	edc5 7a01 	vstr	s15, [r5, #4]
 800d652:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d654:	6862      	ldr	r2, [r4, #4]
 800d656:	f000 f907 	bl	800d868 <arm_radix8_butterfly_f32>
 800d65a:	9903      	ldr	r1, [sp, #12]
 800d65c:	9807      	ldr	r0, [sp, #28]
 800d65e:	2304      	movs	r3, #4
 800d660:	6862      	ldr	r2, [r4, #4]
 800d662:	9100      	str	r1, [sp, #0]
 800d664:	f000 f900 	bl	800d868 <arm_radix8_butterfly_f32>
 800d668:	4640      	mov	r0, r8
 800d66a:	9900      	ldr	r1, [sp, #0]
 800d66c:	6862      	ldr	r2, [r4, #4]
 800d66e:	2304      	movs	r3, #4
 800d670:	f000 f8fa 	bl	800d868 <arm_radix8_butterfly_f32>
 800d674:	9900      	ldr	r1, [sp, #0]
 800d676:	6862      	ldr	r2, [r4, #4]
 800d678:	2304      	movs	r3, #4
 800d67a:	9808      	ldr	r0, [sp, #32]
 800d67c:	b00d      	add	sp, #52	@ 0x34
 800d67e:	ecbd 8b04 	vpop	{d8-d9}
 800d682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d686:	f000 b8ef 	b.w	800d868 <arm_radix8_butterfly_f32>
 800d68a:	bf00      	nop

0800d68c <arm_cfft_f32>:
 800d68c:	2a01      	cmp	r2, #1
 800d68e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d692:	4607      	mov	r7, r0
 800d694:	4690      	mov	r8, r2
 800d696:	460c      	mov	r4, r1
 800d698:	4699      	mov	r9, r3
 800d69a:	8805      	ldrh	r5, [r0, #0]
 800d69c:	d05b      	beq.n	800d756 <arm_cfft_f32+0xca>
 800d69e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d6a2:	d053      	beq.n	800d74c <arm_cfft_f32+0xc0>
 800d6a4:	d810      	bhi.n	800d6c8 <arm_cfft_f32+0x3c>
 800d6a6:	2d40      	cmp	r5, #64	@ 0x40
 800d6a8:	d015      	beq.n	800d6d6 <arm_cfft_f32+0x4a>
 800d6aa:	d94b      	bls.n	800d744 <arm_cfft_f32+0xb8>
 800d6ac:	2d80      	cmp	r5, #128	@ 0x80
 800d6ae:	d103      	bne.n	800d6b8 <arm_cfft_f32+0x2c>
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	f7ff fcbe 	bl	800d034 <arm_cfft_radix8by2_f32>
 800d6b8:	f1b9 0f00 	cmp.w	r9, #0
 800d6bc:	d114      	bne.n	800d6e8 <arm_cfft_f32+0x5c>
 800d6be:	f1b8 0f01 	cmp.w	r8, #1
 800d6c2:	d019      	beq.n	800d6f8 <arm_cfft_f32+0x6c>
 800d6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c8:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800d6cc:	d03e      	beq.n	800d74c <arm_cfft_f32+0xc0>
 800d6ce:	d932      	bls.n	800d736 <arm_cfft_f32+0xaa>
 800d6d0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800d6d4:	d1f0      	bne.n	800d6b8 <arm_cfft_f32+0x2c>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 f8c3 	bl	800d868 <arm_radix8_butterfly_f32>
 800d6e2:	f1b9 0f00 	cmp.w	r9, #0
 800d6e6:	d0ea      	beq.n	800d6be <arm_cfft_f32+0x32>
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	89b9      	ldrh	r1, [r7, #12]
 800d6ee:	f000 f843 	bl	800d778 <arm_bitreversal_32>
 800d6f2:	f1b8 0f01 	cmp.w	r8, #1
 800d6f6:	d1e5      	bne.n	800d6c4 <arm_cfft_f32+0x38>
 800d6f8:	ee07 5a90 	vmov	s15, r5
 800d6fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d704:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d708:	2d00      	cmp	r5, #0
 800d70a:	d0db      	beq.n	800d6c4 <arm_cfft_f32+0x38>
 800d70c:	f104 0108 	add.w	r1, r4, #8
 800d710:	2300      	movs	r3, #0
 800d712:	ed11 7a02 	vldr	s14, [r1, #-8]
 800d716:	3301      	adds	r3, #1
 800d718:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d71c:	3108      	adds	r1, #8
 800d71e:	429d      	cmp	r5, r3
 800d720:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d724:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d728:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d72c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d730:	d1ef      	bne.n	800d712 <arm_cfft_f32+0x86>
 800d732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d736:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800d73a:	d0cc      	beq.n	800d6d6 <arm_cfft_f32+0x4a>
 800d73c:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800d740:	d0b6      	beq.n	800d6b0 <arm_cfft_f32+0x24>
 800d742:	e7b9      	b.n	800d6b8 <arm_cfft_f32+0x2c>
 800d744:	2d10      	cmp	r5, #16
 800d746:	d0b3      	beq.n	800d6b0 <arm_cfft_f32+0x24>
 800d748:	2d20      	cmp	r5, #32
 800d74a:	d1b5      	bne.n	800d6b8 <arm_cfft_f32+0x2c>
 800d74c:	4621      	mov	r1, r4
 800d74e:	4638      	mov	r0, r7
 800d750:	f7ff fd3e 	bl	800d1d0 <arm_cfft_radix8by4_f32>
 800d754:	e7b0      	b.n	800d6b8 <arm_cfft_f32+0x2c>
 800d756:	b165      	cbz	r5, 800d772 <arm_cfft_f32+0xe6>
 800d758:	310c      	adds	r1, #12
 800d75a:	2600      	movs	r6, #0
 800d75c:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d760:	3601      	adds	r6, #1
 800d762:	3108      	adds	r1, #8
 800d764:	eef1 7a67 	vneg.f32	s15, s15
 800d768:	42b5      	cmp	r5, r6
 800d76a:	ed41 7a04 	vstr	s15, [r1, #-16]
 800d76e:	d1f5      	bne.n	800d75c <arm_cfft_f32+0xd0>
 800d770:	e795      	b.n	800d69e <arm_cfft_f32+0x12>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d0a6      	beq.n	800d6c4 <arm_cfft_f32+0x38>
 800d776:	e7b7      	b.n	800d6e8 <arm_cfft_f32+0x5c>

0800d778 <arm_bitreversal_32>:
 800d778:	b321      	cbz	r1, 800d7c4 <arm_bitreversal_32+0x4c>
 800d77a:	f102 0c02 	add.w	ip, r2, #2
 800d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d782:	4690      	mov	r8, r2
 800d784:	2500      	movs	r5, #0
 800d786:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800d78a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800d78e:	3502      	adds	r5, #2
 800d790:	08a4      	lsrs	r4, r4, #2
 800d792:	089b      	lsrs	r3, r3, #2
 800d794:	428d      	cmp	r5, r1
 800d796:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800d79a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800d79e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800d7a2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d7a6:	f107 0704 	add.w	r7, r7, #4
 800d7aa:	f106 0604 	add.w	r6, r6, #4
 800d7ae:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800d7b2:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800d7b6:	59c4      	ldr	r4, [r0, r7]
 800d7b8:	5983      	ldr	r3, [r0, r6]
 800d7ba:	51c3      	str	r3, [r0, r7]
 800d7bc:	5184      	str	r4, [r0, r6]
 800d7be:	d3e2      	bcc.n	800d786 <arm_bitreversal_32+0xe>
 800d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop

0800d7c8 <arm_cfft_init_f32>:
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	b430      	push	{r4, r5}
 800d7d2:	6042      	str	r2, [r0, #4]
 800d7d4:	8001      	strh	r1, [r0, #0]
 800d7d6:	d032      	beq.n	800d83e <arm_cfft_init_f32+0x76>
 800d7d8:	d918      	bls.n	800d80c <arm_cfft_init_f32+0x44>
 800d7da:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800d7de:	d026      	beq.n	800d82e <arm_cfft_init_f32+0x66>
 800d7e0:	d90c      	bls.n	800d7fc <arm_cfft_init_f32+0x34>
 800d7e2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800d7e6:	d11e      	bne.n	800d826 <arm_cfft_init_f32+0x5e>
 800d7e8:	4916      	ldr	r1, [pc, #88]	@ (800d844 <arm_cfft_init_f32+0x7c>)
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	898d      	ldrh	r5, [r1, #12]
 800d7ee:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 800d7f2:	819d      	strh	r5, [r3, #12]
 800d7f4:	e9c3 2401 	strd	r2, r4, [r3, #4]
 800d7f8:	bc30      	pop	{r4, r5}
 800d7fa:	4770      	bx	lr
 800d7fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d800:	d017      	beq.n	800d832 <arm_cfft_init_f32+0x6a>
 800d802:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d806:	d10e      	bne.n	800d826 <arm_cfft_init_f32+0x5e>
 800d808:	490f      	ldr	r1, [pc, #60]	@ (800d848 <arm_cfft_init_f32+0x80>)
 800d80a:	e7ee      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d80c:	2940      	cmp	r1, #64	@ 0x40
 800d80e:	d012      	beq.n	800d836 <arm_cfft_init_f32+0x6e>
 800d810:	d903      	bls.n	800d81a <arm_cfft_init_f32+0x52>
 800d812:	2980      	cmp	r1, #128	@ 0x80
 800d814:	d107      	bne.n	800d826 <arm_cfft_init_f32+0x5e>
 800d816:	490d      	ldr	r1, [pc, #52]	@ (800d84c <arm_cfft_init_f32+0x84>)
 800d818:	e7e7      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d81a:	2910      	cmp	r1, #16
 800d81c:	d00d      	beq.n	800d83a <arm_cfft_init_f32+0x72>
 800d81e:	2920      	cmp	r1, #32
 800d820:	d101      	bne.n	800d826 <arm_cfft_init_f32+0x5e>
 800d822:	490b      	ldr	r1, [pc, #44]	@ (800d850 <arm_cfft_init_f32+0x88>)
 800d824:	e7e1      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d826:	f04f 30ff 	mov.w	r0, #4294967295
 800d82a:	bc30      	pop	{r4, r5}
 800d82c:	4770      	bx	lr
 800d82e:	4909      	ldr	r1, [pc, #36]	@ (800d854 <arm_cfft_init_f32+0x8c>)
 800d830:	e7db      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d832:	4909      	ldr	r1, [pc, #36]	@ (800d858 <arm_cfft_init_f32+0x90>)
 800d834:	e7d9      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d836:	4909      	ldr	r1, [pc, #36]	@ (800d85c <arm_cfft_init_f32+0x94>)
 800d838:	e7d7      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d83a:	4909      	ldr	r1, [pc, #36]	@ (800d860 <arm_cfft_init_f32+0x98>)
 800d83c:	e7d5      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d83e:	4909      	ldr	r1, [pc, #36]	@ (800d864 <arm_cfft_init_f32+0x9c>)
 800d840:	e7d3      	b.n	800d7ea <arm_cfft_init_f32+0x22>
 800d842:	bf00      	nop
 800d844:	080305a0 	.word	0x080305a0
 800d848:	08030540 	.word	0x08030540
 800d84c:	08030550 	.word	0x08030550
 800d850:	08030590 	.word	0x08030590
 800d854:	08030570 	.word	0x08030570
 800d858:	080305b0 	.word	0x080305b0
 800d85c:	080305c0 	.word	0x080305c0
 800d860:	08030560 	.word	0x08030560
 800d864:	08030580 	.word	0x08030580

0800d868 <arm_radix8_butterfly_f32>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	ed2d 8b10 	vpush	{d8-d15}
 800d870:	b093      	sub	sp, #76	@ 0x4c
 800d872:	468a      	mov	sl, r1
 800d874:	eddf 8aba 	vldr	s17, [pc, #744]	@ 800db60 <arm_radix8_butterfly_f32+0x2f8>
 800d878:	468b      	mov	fp, r1
 800d87a:	9010      	str	r0, [sp, #64]	@ 0x40
 800d87c:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800d880:	4603      	mov	r3, r0
 800d882:	3304      	adds	r3, #4
 800d884:	9311      	str	r3, [sp, #68]	@ 0x44
 800d886:	ea4f 06da 	mov.w	r6, sl, lsr #3
 800d88a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d88c:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 800d890:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d894:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 800d898:	960d      	str	r6, [sp, #52]	@ 0x34
 800d89a:	00f0      	lsls	r0, r6, #3
 800d89c:	f04f 0e00 	mov.w	lr, #0
 800d8a0:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 800d8a4:	0137      	lsls	r7, r6, #4
 800d8a6:	9003      	str	r0, [sp, #12]
 800d8a8:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 800d8ac:	9400      	str	r4, [sp, #0]
 800d8ae:	9702      	str	r7, [sp, #8]
 800d8b0:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800d8b4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800d8b8:	1d04      	adds	r4, r0, #4
 800d8ba:	1d38      	adds	r0, r7, #4
 800d8bc:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800d8c0:	442c      	add	r4, r5
 800d8c2:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 800d8c6:	9701      	str	r7, [sp, #4]
 800d8c8:	4428      	add	r0, r5
 800d8ca:	9d01      	ldr	r5, [sp, #4]
 800d8cc:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 800d8d0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d8d4:	00ed      	lsls	r5, r5, #3
 800d8d6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800d8da:	9501      	str	r5, [sp, #4]
 800d8dc:	ea4f 1508 	mov.w	r5, r8, lsl #4
 800d8e0:	9504      	str	r5, [sp, #16]
 800d8e2:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 800d8e6:	9505      	str	r5, [sp, #20]
 800d8e8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d8ea:	ea4f 1845 	mov.w	r8, r5, lsl #5
 800d8ee:	9d00      	ldr	r5, [sp, #0]
 800d8f0:	edd1 6a00 	vldr	s13, [r1]
 800d8f4:	44d6      	add	lr, sl
 800d8f6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d8fa:	ed95 7a00 	vldr	s14, [r5]
 800d8fe:	45f3      	cmp	fp, lr
 800d900:	ed14 6a01 	vldr	s12, [r4, #-4]
 800d904:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800d908:	edd6 2a00 	vldr	s5, [r6]
 800d90c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d910:	edd7 3a00 	vldr	s7, [r7]
 800d914:	ed10 5a01 	vldr	s10, [r0, #-4]
 800d918:	ee36 3a22 	vadd.f32	s6, s12, s5
 800d91c:	edd2 6a00 	vldr	s13, [r2]
 800d920:	ee75 5a07 	vadd.f32	s11, s10, s14
 800d924:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800d928:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800d92c:	ee72 4a25 	vadd.f32	s9, s4, s11
 800d930:	ee73 3a04 	vadd.f32	s7, s6, s8
 800d934:	ee35 5a47 	vsub.f32	s10, s10, s14
 800d938:	ee36 7a62 	vsub.f32	s14, s12, s5
 800d93c:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d940:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800d944:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800d948:	ee37 6a66 	vsub.f32	s12, s14, s13
 800d94c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800d950:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d954:	edc1 4a00 	vstr	s9, [r1]
 800d958:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d95c:	ed97 4a01 	vldr	s8, [r7, #4]
 800d960:	ee66 6a28 	vmul.f32	s13, s12, s17
 800d964:	edd4 5a00 	vldr	s11, [r4]
 800d968:	ed96 6a01 	vldr	s12, [r6, #4]
 800d96c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800d970:	edd2 3a01 	vldr	s7, [r2, #4]
 800d974:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800d978:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800d97c:	ed91 1a01 	vldr	s2, [r1, #4]
 800d980:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800d984:	edd5 0a01 	vldr	s1, [r5, #4]
 800d988:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d98c:	eddc 6a00 	vldr	s13, [ip]
 800d990:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d994:	ed90 6a00 	vldr	s12, [r0]
 800d998:	ee73 3a84 	vadd.f32	s7, s7, s8
 800d99c:	ee74 1a80 	vadd.f32	s3, s9, s0
 800d9a0:	ee36 4a81 	vadd.f32	s8, s13, s2
 800d9a4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d9a8:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800d9ac:	ee36 1a20 	vadd.f32	s2, s12, s1
 800d9b0:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800d9b4:	ee36 6a60 	vsub.f32	s12, s12, s1
 800d9b8:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800d9bc:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800d9c0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800d9c4:	ee74 3a01 	vadd.f32	s7, s8, s2
 800d9c8:	ee34 4a41 	vsub.f32	s8, s8, s2
 800d9cc:	ee36 1a21 	vadd.f32	s2, s12, s3
 800d9d0:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800d9d4:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d9d8:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800d9dc:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800d9e0:	ed8c 0a00 	vstr	s0, [ip]
 800d9e4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d9e8:	449c      	add	ip, r3
 800d9ea:	ee75 4a07 	vadd.f32	s9, s10, s14
 800d9ee:	edc1 3a01 	vstr	s7, [r1, #4]
 800d9f2:	ee35 7a47 	vsub.f32	s14, s10, s14
 800d9f6:	4419      	add	r1, r3
 800d9f8:	ee32 5a25 	vadd.f32	s10, s4, s11
 800d9fc:	ee72 5a65 	vsub.f32	s11, s4, s11
 800da00:	ee72 3a81 	vadd.f32	s7, s5, s2
 800da04:	ed00 5a01 	vstr	s10, [r0, #-4]
 800da08:	ee34 2a43 	vsub.f32	s4, s8, s6
 800da0c:	edc5 5a00 	vstr	s11, [r5]
 800da10:	ee37 5a86 	vadd.f32	s10, s15, s12
 800da14:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800da18:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800da1c:	ed80 2a00 	vstr	s4, [r0]
 800da20:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800da24:	4418      	add	r0, r3
 800da26:	ee33 4a04 	vadd.f32	s8, s6, s8
 800da2a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800da2e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800da32:	ee37 7a26 	vadd.f32	s14, s14, s13
 800da36:	ed85 4a01 	vstr	s8, [r5, #4]
 800da3a:	ed44 3a01 	vstr	s7, [r4, #-4]
 800da3e:	441d      	add	r5, r3
 800da40:	edc7 2a00 	vstr	s5, [r7]
 800da44:	ed86 5a00 	vstr	s10, [r6]
 800da48:	edc2 7a00 	vstr	s15, [r2]
 800da4c:	edc4 5a00 	vstr	s11, [r4]
 800da50:	441c      	add	r4, r3
 800da52:	edc7 4a01 	vstr	s9, [r7, #4]
 800da56:	441f      	add	r7, r3
 800da58:	ed86 6a01 	vstr	s12, [r6, #4]
 800da5c:	441e      	add	r6, r3
 800da5e:	ed82 7a01 	vstr	s14, [r2, #4]
 800da62:	441a      	add	r2, r3
 800da64:	f63f af44 	bhi.w	800d8f0 <arm_radix8_butterfly_f32+0x88>
 800da68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da6a:	2a07      	cmp	r2, #7
 800da6c:	f240 81b7 	bls.w	800ddde <arm_radix8_butterfly_f32+0x576>
 800da70:	9a03      	ldr	r2, [sp, #12]
 800da72:	f108 0808 	add.w	r8, r8, #8
 800da76:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800da78:	f109 0008 	add.w	r0, r9, #8
 800da7c:	3208      	adds	r2, #8
 800da7e:	9e01      	ldr	r6, [sp, #4]
 800da80:	9d04      	ldr	r5, [sp, #16]
 800da82:	4694      	mov	ip, r2
 800da84:	463a      	mov	r2, r7
 800da86:	3608      	adds	r6, #8
 800da88:	9c05      	ldr	r4, [sp, #20]
 800da8a:	4442      	add	r2, r8
 800da8c:	3508      	adds	r5, #8
 800da8e:	3408      	adds	r4, #8
 800da90:	9902      	ldr	r1, [sp, #8]
 800da92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800da94:	eb07 020c 	add.w	r2, r7, ip
 800da98:	310c      	adds	r1, #12
 800da9a:	f04f 0800 	mov.w	r8, #0
 800da9e:	920a      	str	r2, [sp, #40]	@ 0x28
 800daa0:	19ba      	adds	r2, r7, r6
 800daa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800daa4:	197a      	adds	r2, r7, r5
 800daa6:	9208      	str	r2, [sp, #32]
 800daa8:	193a      	adds	r2, r7, r4
 800daaa:	9207      	str	r2, [sp, #28]
 800daac:	183a      	adds	r2, r7, r0
 800daae:	9206      	str	r2, [sp, #24]
 800dab0:	187a      	adds	r2, r7, r1
 800dab2:	9204      	str	r2, [sp, #16]
 800dab4:	f107 020c 	add.w	r2, r7, #12
 800dab8:	9205      	str	r2, [sp, #20]
 800daba:	2201      	movs	r2, #1
 800dabc:	9203      	str	r2, [sp, #12]
 800dabe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dac0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800dac4:	4490      	add	r8, r2
 800dac6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dac8:	9f05      	ldr	r7, [sp, #20]
 800daca:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800dace:	9e06      	ldr	r6, [sp, #24]
 800dad0:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 800dad4:	9d07      	ldr	r5, [sp, #28]
 800dad6:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800dada:	ed92 ea00 	vldr	s28, [r2]
 800dade:	9c08      	ldr	r4, [sp, #32]
 800dae0:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800dae4:	edd1 da00 	vldr	s27, [r1]
 800dae8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800daea:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800daee:	ed92 da00 	vldr	s26, [r2]
 800daf2:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800daf6:	edd1 ca00 	vldr	s25, [r1]
 800dafa:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800dafe:	ed92 ca00 	vldr	s24, [r2]
 800db02:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800db06:	edd1 ba00 	vldr	s23, [r1]
 800db0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db0c:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800db10:	ed92 ba00 	vldr	s22, [r2]
 800db14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db16:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 800db1a:	910c      	str	r1, [sp, #48]	@ 0x30
 800db1c:	9200      	str	r2, [sp, #0]
 800db1e:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800db22:	ed99 aa01 	vldr	s20, [r9, #4]
 800db26:	edde aa01 	vldr	s21, [lr, #4]
 800db2a:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800db2e:	edd2 9a01 	vldr	s19, [r2, #4]
 800db32:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800db36:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800db3a:	ed99 9a01 	vldr	s18, [r9, #4]
 800db3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db40:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800db44:	ed92 8a01 	vldr	s16, [r2, #4]
 800db48:	edd9 7a01 	vldr	s15, [r9, #4]
 800db4c:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800db50:	edcd 7a01 	vstr	s15, [sp, #4]
 800db54:	edd2 7a01 	vldr	s15, [r2, #4]
 800db58:	9a00      	ldr	r2, [sp, #0]
 800db5a:	edcd 7a02 	vstr	s15, [sp, #8]
 800db5e:	e001      	b.n	800db64 <arm_radix8_butterfly_f32+0x2fc>
 800db60:	3f3504f3 	.word	0x3f3504f3
 800db64:	ed92 7a00 	vldr	s14, [r2]
 800db68:	44d6      	add	lr, sl
 800db6a:	ed17 1a01 	vldr	s2, [r7, #-4]
 800db6e:	ed90 5a00 	vldr	s10, [r0]
 800db72:	45f3      	cmp	fp, lr
 800db74:	ed1c fa01 	vldr	s30, [ip, #-4]
 800db78:	ee31 3a07 	vadd.f32	s6, s2, s14
 800db7c:	edd6 5a00 	vldr	s11, [r6]
 800db80:	ee31 1a47 	vsub.f32	s2, s2, s14
 800db84:	edd4 7a00 	vldr	s15, [r4]
 800db88:	ed95 7a00 	vldr	s14, [r5]
 800db8c:	ed91 4a00 	vldr	s8, [r1]
 800db90:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800db94:	ee77 6a25 	vadd.f32	s13, s14, s11
 800db98:	edd7 ea00 	vldr	s29, [r7]
 800db9c:	ee74 fa05 	vadd.f32	s31, s8, s10
 800dba0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800dba4:	ee34 4a45 	vsub.f32	s8, s8, s10
 800dba8:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800dbac:	ee37 7a65 	vsub.f32	s14, s14, s11
 800dbb0:	ee33 3a46 	vsub.f32	s6, s6, s12
 800dbb4:	ee31 6a85 	vadd.f32	s12, s3, s10
 800dbb8:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800dbbc:	ee34 fa07 	vadd.f32	s30, s8, s14
 800dbc0:	ed07 6a01 	vstr	s12, [r7, #-4]
 800dbc4:	ee34 4a47 	vsub.f32	s8, s8, s14
 800dbc8:	edd5 3a01 	vldr	s7, [r5, #4]
 800dbcc:	ee7f fae6 	vsub.f32	s31, s31, s13
 800dbd0:	ed90 7a01 	vldr	s14, [r0, #4]
 800dbd4:	ee2f fa28 	vmul.f32	s30, s30, s17
 800dbd8:	edd1 5a01 	vldr	s11, [r1, #4]
 800dbdc:	ee24 4a28 	vmul.f32	s8, s8, s17
 800dbe0:	ed96 6a01 	vldr	s12, [r6, #4]
 800dbe4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800dbe8:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800dbec:	edd2 6a01 	vldr	s13, [r2, #4]
 800dbf0:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800dbf4:	edd4 4a01 	vldr	s9, [r4, #4]
 800dbf8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800dbfc:	ed9c 7a00 	vldr	s14, [ip]
 800dc00:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800dc04:	ee33 6a86 	vadd.f32	s12, s7, s12
 800dc08:	ee37 facf 	vsub.f32	s30, s15, s30
 800dc0c:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800dc10:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800dc14:	ee7e eae6 	vsub.f32	s29, s29, s13
 800dc18:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800dc1c:	ee77 6a24 	vadd.f32	s13, s14, s9
 800dc20:	ee75 0a86 	vadd.f32	s1, s11, s12
 800dc24:	ee37 7a64 	vsub.f32	s14, s14, s9
 800dc28:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800dc2c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800dc30:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800dc34:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800dc38:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800dc3c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800dc40:	ee77 4a22 	vadd.f32	s9, s14, s5
 800dc44:	ee7e eae7 	vsub.f32	s29, s29, s15
 800dc48:	ee77 7a62 	vsub.f32	s15, s14, s5
 800dc4c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800dc50:	ee31 7a44 	vsub.f32	s14, s2, s8
 800dc54:	ee30 1a60 	vsub.f32	s2, s0, s1
 800dc58:	ee73 1a06 	vadd.f32	s3, s6, s12
 800dc5c:	ee33 6a46 	vsub.f32	s12, s6, s12
 800dc60:	ee33 3aef 	vsub.f32	s6, s7, s31
 800dc64:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800dc68:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800dc6c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800dc70:	ee72 5a25 	vadd.f32	s11, s4, s11
 800dc74:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800dc78:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800dc7c:	ee77 2a27 	vadd.f32	s5, s14, s15
 800dc80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc84:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800dc88:	ee2c fa85 	vmul.f32	s30, s25, s10
 800dc8c:	ee69 ea01 	vmul.f32	s29, s18, s2
 800dc90:	ee29 5a05 	vmul.f32	s10, s18, s10
 800dc94:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800dc98:	ee6d faa1 	vmul.f32	s31, s27, s3
 800dc9c:	ee70 0a20 	vadd.f32	s1, s0, s1
 800dca0:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800dca4:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800dca8:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800dcac:	edc7 0a00 	vstr	s1, [r7]
 800dcb0:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800dcb4:	441f      	add	r7, r3
 800dcb6:	ee2a faa3 	vmul.f32	s30, s21, s7
 800dcba:	ee31 5a45 	vsub.f32	s10, s2, s10
 800dcbe:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800dcc2:	edc2 ea00 	vstr	s29, [r2]
 800dcc6:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800dcca:	ee33 3a61 	vsub.f32	s6, s6, s3
 800dcce:	ed82 5a01 	vstr	s10, [r2, #4]
 800dcd2:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800dcd6:	ed9d 5a02 	vldr	s10, [sp, #8]
 800dcda:	edcd 3a00 	vstr	s7, [sp]
 800dcde:	ee6b ea86 	vmul.f32	s29, s23, s12
 800dce2:	eddd 3a01 	vldr	s7, [sp, #4]
 800dce6:	ee6b fa24 	vmul.f32	s31, s22, s9
 800dcea:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800dcee:	ee65 4a24 	vmul.f32	s9, s10, s9
 800dcf2:	ed8c 3a00 	vstr	s6, [ip]
 800dcf6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800dcfa:	ee23 6a86 	vmul.f32	s12, s7, s12
 800dcfe:	eddd 3a00 	vldr	s7, [sp]
 800dd02:	ee25 5a25 	vmul.f32	s10, s10, s11
 800dd06:	441a      	add	r2, r3
 800dd08:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800dd0c:	449c      	add	ip, r3
 800dd0e:	ee68 1a04 	vmul.f32	s3, s16, s8
 800dd12:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800dd16:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800dd1a:	ee29 faa7 	vmul.f32	s30, s19, s15
 800dd1e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800dd22:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800dd26:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800dd2a:	ee68 2a22 	vmul.f32	s5, s16, s5
 800dd2e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800dd32:	ee29 7a87 	vmul.f32	s14, s19, s14
 800dd36:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800dd3a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800dd3e:	ee7e ea81 	vadd.f32	s29, s29, s2
 800dd42:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800dd46:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800dd4a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800dd4e:	edc4 ea00 	vstr	s29, [r4]
 800dd52:	ee30 0a21 	vadd.f32	s0, s0, s3
 800dd56:	ed84 6a01 	vstr	s12, [r4, #4]
 800dd5a:	ee74 2a62 	vsub.f32	s5, s8, s5
 800dd5e:	edc1 0a00 	vstr	s1, [r1]
 800dd62:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800dd66:	edc1 3a01 	vstr	s7, [r1, #4]
 800dd6a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800dd6e:	ed86 5a00 	vstr	s10, [r6]
 800dd72:	edc6 4a01 	vstr	s9, [r6, #4]
 800dd76:	4419      	add	r1, r3
 800dd78:	ed80 0a00 	vstr	s0, [r0]
 800dd7c:	441c      	add	r4, r3
 800dd7e:	edc0 2a01 	vstr	s5, [r0, #4]
 800dd82:	441e      	add	r6, r3
 800dd84:	ed85 3a00 	vstr	s6, [r5]
 800dd88:	4418      	add	r0, r3
 800dd8a:	ed85 7a01 	vstr	s14, [r5, #4]
 800dd8e:	441d      	add	r5, r3
 800dd90:	f63f aee8 	bhi.w	800db64 <arm_radix8_butterfly_f32+0x2fc>
 800dd94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd96:	9a03      	ldr	r2, [sp, #12]
 800dd98:	3108      	adds	r1, #8
 800dd9a:	3201      	adds	r2, #1
 800dd9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dda0:	9203      	str	r2, [sp, #12]
 800dda2:	3108      	adds	r1, #8
 800dda4:	910a      	str	r1, [sp, #40]	@ 0x28
 800dda6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dda8:	3108      	adds	r1, #8
 800ddaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800ddac:	9908      	ldr	r1, [sp, #32]
 800ddae:	3108      	adds	r1, #8
 800ddb0:	9108      	str	r1, [sp, #32]
 800ddb2:	9907      	ldr	r1, [sp, #28]
 800ddb4:	3108      	adds	r1, #8
 800ddb6:	9107      	str	r1, [sp, #28]
 800ddb8:	9906      	ldr	r1, [sp, #24]
 800ddba:	3108      	adds	r1, #8
 800ddbc:	9106      	str	r1, [sp, #24]
 800ddbe:	9905      	ldr	r1, [sp, #20]
 800ddc0:	3108      	adds	r1, #8
 800ddc2:	9105      	str	r1, [sp, #20]
 800ddc4:	9904      	ldr	r1, [sp, #16]
 800ddc6:	3108      	adds	r1, #8
 800ddc8:	9104      	str	r1, [sp, #16]
 800ddca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ddcc:	4291      	cmp	r1, r2
 800ddce:	f47f ae76 	bne.w	800dabe <arm_radix8_butterfly_f32+0x256>
 800ddd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddd4:	468a      	mov	sl, r1
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	930e      	str	r3, [sp, #56]	@ 0x38
 800dddc:	e553      	b.n	800d886 <arm_radix8_butterfly_f32+0x1e>
 800ddde:	b013      	add	sp, #76	@ 0x4c
 800dde0:	ecbd 8b10 	vpop	{d8-d15}
 800dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dde8 <sqrtf>:
 800dde8:	b508      	push	{r3, lr}
 800ddea:	ed2d 8b02 	vpush	{d8}
 800ddee:	eeb0 8a40 	vmov.f32	s16, s0
 800ddf2:	f000 f85d 	bl	800deb0 <__ieee754_sqrtf>
 800ddf6:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	d60c      	bvs.n	800de1a <sqrtf+0x32>
 800de00:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800de20 <sqrtf+0x38>
 800de04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0c:	d505      	bpl.n	800de1a <sqrtf+0x32>
 800de0e:	f001 fea5 	bl	800fb5c <__errno>
 800de12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de16:	2321      	movs	r3, #33	@ 0x21
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	ecbd 8b02 	vpop	{d8}
 800de1e:	bd08      	pop	{r3, pc}
 800de20:	00000000 	.word	0x00000000

0800de24 <sinf>:
 800de24:	ee10 3a10 	vmov	r3, s0
 800de28:	b507      	push	{r0, r1, r2, lr}
 800de2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de2e:	4a1e      	ldr	r2, [pc, #120]	@ (800dea8 <sinf+0x84>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d807      	bhi.n	800de44 <sinf+0x20>
 800de34:	2000      	movs	r0, #0
 800de36:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800deac <sinf+0x88>
 800de3a:	b003      	add	sp, #12
 800de3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de40:	f000 b892 	b.w	800df68 <__kernel_sinf>
 800de44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800de48:	d304      	bcc.n	800de54 <sinf+0x30>
 800de4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800de4e:	b003      	add	sp, #12
 800de50:	f85d fb04 	ldr.w	pc, [sp], #4
 800de54:	4668      	mov	r0, sp
 800de56:	f000 f8cf 	bl	800dff8 <__ieee754_rem_pio2f>
 800de5a:	f000 0003 	and.w	r0, r0, #3
 800de5e:	2801      	cmp	r0, #1
 800de60:	d00a      	beq.n	800de78 <sinf+0x54>
 800de62:	2802      	cmp	r0, #2
 800de64:	d00f      	beq.n	800de86 <sinf+0x62>
 800de66:	b9c0      	cbnz	r0, 800de9a <sinf+0x76>
 800de68:	2001      	movs	r0, #1
 800de6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800de6e:	ed9d 0a00 	vldr	s0, [sp]
 800de72:	f000 f879 	bl	800df68 <__kernel_sinf>
 800de76:	e7ea      	b.n	800de4e <sinf+0x2a>
 800de78:	eddd 0a01 	vldr	s1, [sp, #4]
 800de7c:	ed9d 0a00 	vldr	s0, [sp]
 800de80:	f000 f81a 	bl	800deb8 <__kernel_cosf>
 800de84:	e7e3      	b.n	800de4e <sinf+0x2a>
 800de86:	2001      	movs	r0, #1
 800de88:	eddd 0a01 	vldr	s1, [sp, #4]
 800de8c:	ed9d 0a00 	vldr	s0, [sp]
 800de90:	f000 f86a 	bl	800df68 <__kernel_sinf>
 800de94:	eeb1 0a40 	vneg.f32	s0, s0
 800de98:	e7d9      	b.n	800de4e <sinf+0x2a>
 800de9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800de9e:	ed9d 0a00 	vldr	s0, [sp]
 800dea2:	f000 f809 	bl	800deb8 <__kernel_cosf>
 800dea6:	e7f5      	b.n	800de94 <sinf+0x70>
 800dea8:	3f490fd8 	.word	0x3f490fd8
 800deac:	00000000 	.word	0x00000000

0800deb0 <__ieee754_sqrtf>:
 800deb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800deb4:	4770      	bx	lr
	...

0800deb8 <__kernel_cosf>:
 800deb8:	ee10 3a10 	vmov	r3, s0
 800debc:	eef0 6a40 	vmov.f32	s13, s0
 800dec0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dec4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dec8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800decc:	d204      	bcs.n	800ded8 <__kernel_cosf+0x20>
 800dece:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ded2:	ee17 2a90 	vmov	r2, s15
 800ded6:	b342      	cbz	r2, 800df2a <__kernel_cosf+0x72>
 800ded8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800dedc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800df48 <__kernel_cosf+0x90>
 800dee0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800df4c <__kernel_cosf+0x94>
 800dee4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800dee8:	4a19      	ldr	r2, [pc, #100]	@ (800df50 <__kernel_cosf+0x98>)
 800deea:	eea7 6a27 	vfma.f32	s12, s14, s15
 800deee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800df54 <__kernel_cosf+0x9c>
 800def2:	4293      	cmp	r3, r2
 800def4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800def8:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 800df58 <__kernel_cosf+0xa0>
 800defc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df00:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800df5c <__kernel_cosf+0xa4>
 800df04:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df08:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800df60 <__kernel_cosf+0xa8>
 800df0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800df14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df18:	ee26 6a07 	vmul.f32	s12, s12, s14
 800df1c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800df20:	d804      	bhi.n	800df2c <__kernel_cosf+0x74>
 800df22:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800df26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df2a:	4770      	bx	lr
 800df2c:	4a0d      	ldr	r2, [pc, #52]	@ (800df64 <__kernel_cosf+0xac>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	bf96      	itet	ls
 800df32:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800df36:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800df3a:	ee07 3a10 	vmovls	s14, r3
 800df3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df46:	e7ec      	b.n	800df22 <__kernel_cosf+0x6a>
 800df48:	ad47d74e 	.word	0xad47d74e
 800df4c:	310f74f6 	.word	0x310f74f6
 800df50:	3e999999 	.word	0x3e999999
 800df54:	b493f27c 	.word	0xb493f27c
 800df58:	37d00d01 	.word	0x37d00d01
 800df5c:	bab60b61 	.word	0xbab60b61
 800df60:	3d2aaaab 	.word	0x3d2aaaab
 800df64:	3f480000 	.word	0x3f480000

0800df68 <__kernel_sinf>:
 800df68:	ee10 3a10 	vmov	r3, s0
 800df6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df70:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800df74:	d204      	bcs.n	800df80 <__kernel_sinf+0x18>
 800df76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df7a:	ee17 3a90 	vmov	r3, s15
 800df7e:	b35b      	cbz	r3, 800dfd8 <__kernel_sinf+0x70>
 800df80:	ee20 7a00 	vmul.f32	s14, s0, s0
 800df84:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dfdc <__kernel_sinf+0x74>
 800df88:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800dfe0 <__kernel_sinf+0x78>
 800df8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800df90:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800dfe4 <__kernel_sinf+0x7c>
 800df94:	ee60 6a07 	vmul.f32	s13, s0, s14
 800df98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df9c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 800dfe8 <__kernel_sinf+0x80>
 800dfa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dfa4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800dfec <__kernel_sinf+0x84>
 800dfa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfac:	b930      	cbnz	r0, 800dfbc <__kernel_sinf+0x54>
 800dfae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800dff0 <__kernel_sinf+0x88>
 800dfb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dfb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dfba:	4770      	bx	lr
 800dfbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dfc0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800dfc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dfc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dfcc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800dff4 <__kernel_sinf+0x8c>
 800dfd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dfd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	2f2ec9d3 	.word	0x2f2ec9d3
 800dfe0:	b2d72f34 	.word	0xb2d72f34
 800dfe4:	3638ef1b 	.word	0x3638ef1b
 800dfe8:	b9500d01 	.word	0xb9500d01
 800dfec:	3c088889 	.word	0x3c088889
 800dff0:	be2aaaab 	.word	0xbe2aaaab
 800dff4:	3e2aaaab 	.word	0x3e2aaaab

0800dff8 <__ieee754_rem_pio2f>:
 800dff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dffa:	ee10 6a10 	vmov	r6, s0
 800dffe:	4b87      	ldr	r3, [pc, #540]	@ (800e21c <__ieee754_rem_pio2f+0x224>)
 800e000:	b087      	sub	sp, #28
 800e002:	4604      	mov	r4, r0
 800e004:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e008:	429d      	cmp	r5, r3
 800e00a:	d805      	bhi.n	800e018 <__ieee754_rem_pio2f+0x20>
 800e00c:	2300      	movs	r3, #0
 800e00e:	ed80 0a00 	vstr	s0, [r0]
 800e012:	6043      	str	r3, [r0, #4]
 800e014:	2000      	movs	r0, #0
 800e016:	e022      	b.n	800e05e <__ieee754_rem_pio2f+0x66>
 800e018:	4b81      	ldr	r3, [pc, #516]	@ (800e220 <__ieee754_rem_pio2f+0x228>)
 800e01a:	429d      	cmp	r5, r3
 800e01c:	d83a      	bhi.n	800e094 <__ieee754_rem_pio2f+0x9c>
 800e01e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e022:	2e00      	cmp	r6, #0
 800e024:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800e224 <__ieee754_rem_pio2f+0x22c>
 800e028:	f023 030f 	bic.w	r3, r3, #15
 800e02c:	4a7e      	ldr	r2, [pc, #504]	@ (800e228 <__ieee754_rem_pio2f+0x230>)
 800e02e:	dd18      	ble.n	800e062 <__ieee754_rem_pio2f+0x6a>
 800e030:	4293      	cmp	r3, r2
 800e032:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e036:	bf09      	itett	eq
 800e038:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 800e22c <__ieee754_rem_pio2f+0x234>
 800e03c:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 800e230 <__ieee754_rem_pio2f+0x238>
 800e040:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e044:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 800e234 <__ieee754_rem_pio2f+0x23c>
 800e048:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e050:	ed80 7a00 	vstr	s14, [r0]
 800e054:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e058:	edc0 7a01 	vstr	s15, [r0, #4]
 800e05c:	2001      	movs	r0, #1
 800e05e:	b007      	add	sp, #28
 800e060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e062:	4293      	cmp	r3, r2
 800e064:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e068:	bf09      	itett	eq
 800e06a:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 800e22c <__ieee754_rem_pio2f+0x234>
 800e06e:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 800e230 <__ieee754_rem_pio2f+0x238>
 800e072:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e076:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 800e234 <__ieee754_rem_pio2f+0x23c>
 800e07a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e07e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e082:	ed80 7a00 	vstr	s14, [r0]
 800e086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e08a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e08e:	f04f 30ff 	mov.w	r0, #4294967295
 800e092:	e7e4      	b.n	800e05e <__ieee754_rem_pio2f+0x66>
 800e094:	4b68      	ldr	r3, [pc, #416]	@ (800e238 <__ieee754_rem_pio2f+0x240>)
 800e096:	429d      	cmp	r5, r3
 800e098:	d872      	bhi.n	800e180 <__ieee754_rem_pio2f+0x188>
 800e09a:	f000 f8db 	bl	800e254 <fabsf>
 800e09e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e0a2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800e23c <__ieee754_rem_pio2f+0x244>
 800e0a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e0aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0b2:	ee17 0a90 	vmov	r0, s15
 800e0b6:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 800e224 <__ieee754_rem_pio2f+0x22c>
 800e0ba:	281f      	cmp	r0, #31
 800e0bc:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e0c0:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 800e230 <__ieee754_rem_pio2f+0x238>
 800e0c4:	eeb1 6a47 	vneg.f32	s12, s14
 800e0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e0d0:	ee16 1a90 	vmov	r1, s13
 800e0d4:	dc09      	bgt.n	800e0ea <__ieee754_rem_pio2f+0xf2>
 800e0d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e0da:	1e47      	subs	r7, r0, #1
 800e0dc:	4a58      	ldr	r2, [pc, #352]	@ (800e240 <__ieee754_rem_pio2f+0x248>)
 800e0de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e0e2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d106      	bne.n	800e0f8 <__ieee754_rem_pio2f+0x100>
 800e0ea:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e0ee:	15eb      	asrs	r3, r5, #23
 800e0f0:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e0f4:	2a08      	cmp	r2, #8
 800e0f6:	dc14      	bgt.n	800e122 <__ieee754_rem_pio2f+0x12a>
 800e0f8:	6021      	str	r1, [r4, #0]
 800e0fa:	ed94 7a00 	vldr	s14, [r4]
 800e0fe:	2e00      	cmp	r6, #0
 800e100:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e104:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e108:	ed84 0a01 	vstr	s0, [r4, #4]
 800e10c:	daa7      	bge.n	800e05e <__ieee754_rem_pio2f+0x66>
 800e10e:	eeb1 7a47 	vneg.f32	s14, s14
 800e112:	eeb1 0a40 	vneg.f32	s0, s0
 800e116:	ed84 7a00 	vstr	s14, [r4]
 800e11a:	ed84 0a01 	vstr	s0, [r4, #4]
 800e11e:	4240      	negs	r0, r0
 800e120:	e79d      	b.n	800e05e <__ieee754_rem_pio2f+0x66>
 800e122:	eef0 6a40 	vmov.f32	s13, s0
 800e126:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800e22c <__ieee754_rem_pio2f+0x234>
 800e12a:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e12e:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e132:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e136:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e234 <__ieee754_rem_pio2f+0x23c>
 800e13a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e13e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e142:	ee15 2a90 	vmov	r2, s11
 800e146:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e14a:	1a5b      	subs	r3, r3, r1
 800e14c:	2b19      	cmp	r3, #25
 800e14e:	dc04      	bgt.n	800e15a <__ieee754_rem_pio2f+0x162>
 800e150:	eeb0 0a66 	vmov.f32	s0, s13
 800e154:	edc4 5a00 	vstr	s11, [r4]
 800e158:	e7cf      	b.n	800e0fa <__ieee754_rem_pio2f+0x102>
 800e15a:	eeb0 0a66 	vmov.f32	s0, s13
 800e15e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800e244 <__ieee754_rem_pio2f+0x24c>
 800e162:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e166:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e16a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e248 <__ieee754_rem_pio2f+0x250>
 800e16e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e172:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e176:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e17a:	ed84 7a00 	vstr	s14, [r4]
 800e17e:	e7bc      	b.n	800e0fa <__ieee754_rem_pio2f+0x102>
 800e180:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e184:	d306      	bcc.n	800e194 <__ieee754_rem_pio2f+0x19c>
 800e186:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e18a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e18e:	edc0 7a00 	vstr	s15, [r0]
 800e192:	e73f      	b.n	800e014 <__ieee754_rem_pio2f+0x1c>
 800e194:	15ea      	asrs	r2, r5, #23
 800e196:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800e24c <__ieee754_rem_pio2f+0x254>
 800e19a:	3a86      	subs	r2, #134	@ 0x86
 800e19c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e1a0:	ee07 3a90 	vmov	s15, r3
 800e1a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1b0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e1b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1c4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e1c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1d0:	edcd 7a05 	vstr	s15, [sp, #20]
 800e1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d8:	d11e      	bne.n	800e218 <__ieee754_rem_pio2f+0x220>
 800e1da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	bf0c      	ite	eq
 800e1e4:	2301      	moveq	r3, #1
 800e1e6:	2302      	movne	r3, #2
 800e1e8:	4919      	ldr	r1, [pc, #100]	@ (800e250 <__ieee754_rem_pio2f+0x258>)
 800e1ea:	a803      	add	r0, sp, #12
 800e1ec:	9101      	str	r1, [sp, #4]
 800e1ee:	2102      	movs	r1, #2
 800e1f0:	9100      	str	r1, [sp, #0]
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	f000 f836 	bl	800e264 <__kernel_rem_pio2f>
 800e1f8:	2e00      	cmp	r6, #0
 800e1fa:	f6bf af30 	bge.w	800e05e <__ieee754_rem_pio2f+0x66>
 800e1fe:	edd4 7a00 	vldr	s15, [r4]
 800e202:	eef1 7a67 	vneg.f32	s15, s15
 800e206:	edc4 7a00 	vstr	s15, [r4]
 800e20a:	edd4 7a01 	vldr	s15, [r4, #4]
 800e20e:	eef1 7a67 	vneg.f32	s15, s15
 800e212:	edc4 7a01 	vstr	s15, [r4, #4]
 800e216:	e782      	b.n	800e11e <__ieee754_rem_pio2f+0x126>
 800e218:	2303      	movs	r3, #3
 800e21a:	e7e5      	b.n	800e1e8 <__ieee754_rem_pio2f+0x1f0>
 800e21c:	3f490fd8 	.word	0x3f490fd8
 800e220:	4016cbe3 	.word	0x4016cbe3
 800e224:	3fc90f80 	.word	0x3fc90f80
 800e228:	3fc90fd0 	.word	0x3fc90fd0
 800e22c:	37354400 	.word	0x37354400
 800e230:	37354443 	.word	0x37354443
 800e234:	2e85a308 	.word	0x2e85a308
 800e238:	43490f80 	.word	0x43490f80
 800e23c:	3f22f984 	.word	0x3f22f984
 800e240:	080305d0 	.word	0x080305d0
 800e244:	2e85a300 	.word	0x2e85a300
 800e248:	248d3132 	.word	0x248d3132
 800e24c:	43800000 	.word	0x43800000
 800e250:	08030650 	.word	0x08030650

0800e254 <fabsf>:
 800e254:	ee10 3a10 	vmov	r3, s0
 800e258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e25c:	ee00 3a10 	vmov	s0, r3
 800e260:	4770      	bx	lr
	...

0800e264 <__kernel_rem_pio2f>:
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	4690      	mov	r8, r2
 800e26a:	4ab9      	ldr	r2, [pc, #740]	@ (800e550 <__kernel_rem_pio2f+0x2ec>)
 800e26c:	460f      	mov	r7, r1
 800e26e:	f103 3bff 	add.w	fp, r3, #4294967295
 800e272:	f118 0f04 	cmn.w	r8, #4
 800e276:	ed2d 8b04 	vpush	{d8-d9}
 800e27a:	b0d9      	sub	sp, #356	@ 0x164
 800e27c:	9001      	str	r0, [sp, #4]
 800e27e:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e280:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e284:	db26      	blt.n	800e2d4 <__kernel_rem_pio2f+0x70>
 800e286:	f1b8 0203 	subs.w	r2, r8, #3
 800e28a:	bf48      	it	mi
 800e28c:	f108 0204 	addmi.w	r2, r8, #4
 800e290:	10d2      	asrs	r2, r2, #3
 800e292:	1c55      	adds	r5, r2, #1
 800e294:	eba2 060b 	sub.w	r6, r2, fp
 800e298:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e29a:	eb0a 0c0b 	add.w	ip, sl, fp
 800e29e:	00e8      	lsls	r0, r5, #3
 800e2a0:	ac1c      	add	r4, sp, #112	@ 0x70
 800e2a2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e2a6:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e2aa:	9002      	str	r0, [sp, #8]
 800e2ac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	4560      	cmp	r0, ip
 800e2b4:	dd10      	ble.n	800e2d8 <__kernel_rem_pio2f+0x74>
 800e2b6:	a91c      	add	r1, sp, #112	@ 0x70
 800e2b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e2bc:	2600      	movs	r6, #0
 800e2be:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e2c2:	4556      	cmp	r6, sl
 800e2c4:	dc26      	bgt.n	800e314 <__kernel_rem_pio2f+0xb0>
 800e2c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e2ca:	4684      	mov	ip, r0
 800e2cc:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e2d0:	2400      	movs	r4, #0
 800e2d2:	e018      	b.n	800e306 <__kernel_rem_pio2f+0xa2>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	e7dc      	b.n	800e292 <__kernel_rem_pio2f+0x2e>
 800e2d8:	42c6      	cmn	r6, r0
 800e2da:	bf54      	ite	pl
 800e2dc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e2e0:	eef0 7a47 	vmovmi.f32	s15, s14
 800e2e4:	f100 0001 	add.w	r0, r0, #1
 800e2e8:	bf5c      	itt	pl
 800e2ea:	ee07 1a90 	vmovpl	s15, r1
 800e2ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e2f2:	ece4 7a01 	vstmia	r4!, {s15}
 800e2f6:	e7dc      	b.n	800e2b2 <__kernel_rem_pio2f+0x4e>
 800e2f8:	ecfe 6a01 	vldmia	lr!, {s13}
 800e2fc:	3401      	adds	r4, #1
 800e2fe:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e302:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e306:	455c      	cmp	r4, fp
 800e308:	ddf6      	ble.n	800e2f8 <__kernel_rem_pio2f+0x94>
 800e30a:	3601      	adds	r6, #1
 800e30c:	3004      	adds	r0, #4
 800e30e:	ece9 7a01 	vstmia	r9!, {s15}
 800e312:	e7d6      	b.n	800e2c2 <__kernel_rem_pio2f+0x5e>
 800e314:	a908      	add	r1, sp, #32
 800e316:	4654      	mov	r4, sl
 800e318:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800e55c <__kernel_rem_pio2f+0x2f8>
 800e31c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e320:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800e558 <__kernel_rem_pio2f+0x2f4>
 800e324:	9104      	str	r1, [sp, #16]
 800e326:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e328:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e32c:	9203      	str	r2, [sp, #12]
 800e32e:	00a2      	lsls	r2, r4, #2
 800e330:	a944      	add	r1, sp, #272	@ 0x110
 800e332:	4626      	mov	r6, r4
 800e334:	9205      	str	r2, [sp, #20]
 800e336:	aa58      	add	r2, sp, #352	@ 0x160
 800e338:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e33c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e340:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e344:	aa08      	add	r2, sp, #32
 800e346:	4694      	mov	ip, r2
 800e348:	2e00      	cmp	r6, #0
 800e34a:	dc4c      	bgt.n	800e3e6 <__kernel_rem_pio2f+0x182>
 800e34c:	4628      	mov	r0, r5
 800e34e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e352:	f000 f9f1 	bl	800e738 <scalbnf>
 800e356:	eeb0 8a40 	vmov.f32	s16, s0
 800e35a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e35e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e362:	f000 fa4d 	bl	800e800 <floorf>
 800e366:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e36a:	2d00      	cmp	r5, #0
 800e36c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e374:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e378:	ee17 9a90 	vmov	r9, s15
 800e37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e380:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e384:	dd41      	ble.n	800e40a <__kernel_rem_pio2f+0x1a6>
 800e386:	f104 3cff 	add.w	ip, r4, #4294967295
 800e38a:	a908      	add	r1, sp, #32
 800e38c:	f1c5 0e08 	rsb	lr, r5, #8
 800e390:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e394:	fa46 f00e 	asr.w	r0, r6, lr
 800e398:	4481      	add	r9, r0
 800e39a:	fa00 f00e 	lsl.w	r0, r0, lr
 800e39e:	1a36      	subs	r6, r6, r0
 800e3a0:	f1c5 0007 	rsb	r0, r5, #7
 800e3a4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e3a8:	4106      	asrs	r6, r0
 800e3aa:	2e00      	cmp	r6, #0
 800e3ac:	dd3c      	ble.n	800e428 <__kernel_rem_pio2f+0x1c4>
 800e3ae:	f04f 0e00 	mov.w	lr, #0
 800e3b2:	f109 0901 	add.w	r9, r9, #1
 800e3b6:	4670      	mov	r0, lr
 800e3b8:	4574      	cmp	r4, lr
 800e3ba:	dc68      	bgt.n	800e48e <__kernel_rem_pio2f+0x22a>
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	dd03      	ble.n	800e3c8 <__kernel_rem_pio2f+0x164>
 800e3c0:	2d01      	cmp	r5, #1
 800e3c2:	d074      	beq.n	800e4ae <__kernel_rem_pio2f+0x24a>
 800e3c4:	2d02      	cmp	r5, #2
 800e3c6:	d07d      	beq.n	800e4c4 <__kernel_rem_pio2f+0x260>
 800e3c8:	2e02      	cmp	r6, #2
 800e3ca:	d12d      	bne.n	800e428 <__kernel_rem_pio2f+0x1c4>
 800e3cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e3d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e3d4:	b340      	cbz	r0, 800e428 <__kernel_rem_pio2f+0x1c4>
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	9306      	str	r3, [sp, #24]
 800e3da:	f000 f9ad 	bl	800e738 <scalbnf>
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e3e4:	e020      	b.n	800e428 <__kernel_rem_pio2f+0x1c4>
 800e3e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e3ea:	3e01      	subs	r6, #1
 800e3ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e3f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e3fc:	ecac 0a01 	vstmia	ip!, {s0}
 800e400:	ed30 0a01 	vldmdb	r0!, {s0}
 800e404:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e408:	e79e      	b.n	800e348 <__kernel_rem_pio2f+0xe4>
 800e40a:	d105      	bne.n	800e418 <__kernel_rem_pio2f+0x1b4>
 800e40c:	1e60      	subs	r0, r4, #1
 800e40e:	a908      	add	r1, sp, #32
 800e410:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e414:	11f6      	asrs	r6, r6, #7
 800e416:	e7c8      	b.n	800e3aa <__kernel_rem_pio2f+0x146>
 800e418:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e41c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	da31      	bge.n	800e48a <__kernel_rem_pio2f+0x226>
 800e426:	2600      	movs	r6, #0
 800e428:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e430:	f040 8098 	bne.w	800e564 <__kernel_rem_pio2f+0x300>
 800e434:	1e60      	subs	r0, r4, #1
 800e436:	2200      	movs	r2, #0
 800e438:	4550      	cmp	r0, sl
 800e43a:	da4b      	bge.n	800e4d4 <__kernel_rem_pio2f+0x270>
 800e43c:	2a00      	cmp	r2, #0
 800e43e:	d065      	beq.n	800e50c <__kernel_rem_pio2f+0x2a8>
 800e440:	3c01      	subs	r4, #1
 800e442:	ab08      	add	r3, sp, #32
 800e444:	3d08      	subs	r5, #8
 800e446:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d0f8      	beq.n	800e440 <__kernel_rem_pio2f+0x1dc>
 800e44e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e452:	4628      	mov	r0, r5
 800e454:	f000 f970 	bl	800e738 <scalbnf>
 800e458:	1c63      	adds	r3, r4, #1
 800e45a:	aa44      	add	r2, sp, #272	@ 0x110
 800e45c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e55c <__kernel_rem_pio2f+0x2f8>
 800e460:	0099      	lsls	r1, r3, #2
 800e462:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e466:	4623      	mov	r3, r4
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f280 80a9 	bge.w	800e5c0 <__kernel_rem_pio2f+0x35c>
 800e46e:	4623      	mov	r3, r4
 800e470:	2b00      	cmp	r3, #0
 800e472:	f2c0 80c7 	blt.w	800e604 <__kernel_rem_pio2f+0x3a0>
 800e476:	aa44      	add	r2, sp, #272	@ 0x110
 800e478:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800e554 <__kernel_rem_pio2f+0x2f0>
 800e47c:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e480:	2000      	movs	r0, #0
 800e482:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e486:	1ae2      	subs	r2, r4, r3
 800e488:	e0b1      	b.n	800e5ee <__kernel_rem_pio2f+0x38a>
 800e48a:	2602      	movs	r6, #2
 800e48c:	e78f      	b.n	800e3ae <__kernel_rem_pio2f+0x14a>
 800e48e:	f852 1b04 	ldr.w	r1, [r2], #4
 800e492:	b948      	cbnz	r0, 800e4a8 <__kernel_rem_pio2f+0x244>
 800e494:	b121      	cbz	r1, 800e4a0 <__kernel_rem_pio2f+0x23c>
 800e496:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e49a:	f842 1c04 	str.w	r1, [r2, #-4]
 800e49e:	2101      	movs	r1, #1
 800e4a0:	f10e 0e01 	add.w	lr, lr, #1
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	e787      	b.n	800e3b8 <__kernel_rem_pio2f+0x154>
 800e4a8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e4ac:	e7f5      	b.n	800e49a <__kernel_rem_pio2f+0x236>
 800e4ae:	f104 3cff 	add.w	ip, r4, #4294967295
 800e4b2:	aa08      	add	r2, sp, #32
 800e4b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e4bc:	a908      	add	r1, sp, #32
 800e4be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e4c2:	e781      	b.n	800e3c8 <__kernel_rem_pio2f+0x164>
 800e4c4:	f104 3cff 	add.w	ip, r4, #4294967295
 800e4c8:	aa08      	add	r2, sp, #32
 800e4ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e4d2:	e7f3      	b.n	800e4bc <__kernel_rem_pio2f+0x258>
 800e4d4:	a908      	add	r1, sp, #32
 800e4d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e4da:	3801      	subs	r0, #1
 800e4dc:	430a      	orrs	r2, r1
 800e4de:	e7ab      	b.n	800e438 <__kernel_rem_pio2f+0x1d4>
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e4e6:	2e00      	cmp	r6, #0
 800e4e8:	d0fa      	beq.n	800e4e0 <__kernel_rem_pio2f+0x27c>
 800e4ea:	9905      	ldr	r1, [sp, #20]
 800e4ec:	18e6      	adds	r6, r4, r3
 800e4ee:	f104 0c01 	add.w	ip, r4, #1
 800e4f2:	4422      	add	r2, r4
 800e4f4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e4f8:	eb0d 0001 	add.w	r0, sp, r1
 800e4fc:	a91c      	add	r1, sp, #112	@ 0x70
 800e4fe:	384c      	subs	r0, #76	@ 0x4c
 800e500:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e504:	4562      	cmp	r2, ip
 800e506:	da04      	bge.n	800e512 <__kernel_rem_pio2f+0x2ae>
 800e508:	4614      	mov	r4, r2
 800e50a:	e710      	b.n	800e32e <__kernel_rem_pio2f+0xca>
 800e50c:	9804      	ldr	r0, [sp, #16]
 800e50e:	2201      	movs	r2, #1
 800e510:	e7e7      	b.n	800e4e2 <__kernel_rem_pio2f+0x27e>
 800e512:	9903      	ldr	r1, [sp, #12]
 800e514:	2400      	movs	r4, #0
 800e516:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e51a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e51e:	ee07 1a90 	vmov	s15, r1
 800e522:	9105      	str	r1, [sp, #20]
 800e524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e528:	ece6 7a01 	vstmia	r6!, {s15}
 800e52c:	46b1      	mov	r9, r6
 800e52e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e532:	455c      	cmp	r4, fp
 800e534:	dd04      	ble.n	800e540 <__kernel_rem_pio2f+0x2dc>
 800e536:	f10c 0c01 	add.w	ip, ip, #1
 800e53a:	ece0 7a01 	vstmia	r0!, {s15}
 800e53e:	e7e1      	b.n	800e504 <__kernel_rem_pio2f+0x2a0>
 800e540:	ecfe 6a01 	vldmia	lr!, {s13}
 800e544:	3401      	adds	r4, #1
 800e546:	ed39 7a01 	vldmdb	r9!, {s14}
 800e54a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e54e:	e7f0      	b.n	800e532 <__kernel_rem_pio2f+0x2ce>
 800e550:	08030994 	.word	0x08030994
 800e554:	08030968 	.word	0x08030968
 800e558:	43800000 	.word	0x43800000
 800e55c:	3b800000 	.word	0x3b800000
 800e560:	00000000 	.word	0x00000000
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	eeb0 0a48 	vmov.f32	s0, s16
 800e56a:	eba3 0008 	sub.w	r0, r3, r8
 800e56e:	f000 f8e3 	bl	800e738 <scalbnf>
 800e572:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e558 <__kernel_rem_pio2f+0x2f4>
 800e576:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	db19      	blt.n	800e5b4 <__kernel_rem_pio2f+0x350>
 800e580:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e55c <__kernel_rem_pio2f+0x2f8>
 800e584:	aa08      	add	r2, sp, #32
 800e586:	3508      	adds	r5, #8
 800e588:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e58c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e594:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e59c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e5a0:	ee10 3a10 	vmov	r3, s0
 800e5a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e5a8:	3401      	adds	r4, #1
 800e5aa:	ee17 3a90 	vmov	r3, s15
 800e5ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e5b2:	e74c      	b.n	800e44e <__kernel_rem_pio2f+0x1ea>
 800e5b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e5b8:	aa08      	add	r2, sp, #32
 800e5ba:	ee10 3a10 	vmov	r3, s0
 800e5be:	e7f6      	b.n	800e5ae <__kernel_rem_pio2f+0x34a>
 800e5c0:	a808      	add	r0, sp, #32
 800e5c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	ee07 0a90 	vmov	s15, r0
 800e5cc:	9001      	str	r0, [sp, #4]
 800e5ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e5d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e5da:	ed62 7a01 	vstmdb	r2!, {s15}
 800e5de:	e743      	b.n	800e468 <__kernel_rem_pio2f+0x204>
 800e5e0:	ecfc 6a01 	vldmia	ip!, {s13}
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	ecb5 7a01 	vldmia	r5!, {s14}
 800e5ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5ee:	4550      	cmp	r0, sl
 800e5f0:	dc01      	bgt.n	800e5f6 <__kernel_rem_pio2f+0x392>
 800e5f2:	4290      	cmp	r0, r2
 800e5f4:	ddf4      	ble.n	800e5e0 <__kernel_rem_pio2f+0x37c>
 800e5f6:	a858      	add	r0, sp, #352	@ 0x160
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e5fe:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e602:	e735      	b.n	800e470 <__kernel_rem_pio2f+0x20c>
 800e604:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e606:	2b02      	cmp	r3, #2
 800e608:	dc09      	bgt.n	800e61e <__kernel_rem_pio2f+0x3ba>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dc27      	bgt.n	800e65e <__kernel_rem_pio2f+0x3fa>
 800e60e:	d040      	beq.n	800e692 <__kernel_rem_pio2f+0x42e>
 800e610:	f009 0007 	and.w	r0, r9, #7
 800e614:	b059      	add	sp, #356	@ 0x164
 800e616:	ecbd 8b04 	vpop	{d8-d9}
 800e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e620:	2b03      	cmp	r3, #3
 800e622:	d1f5      	bne.n	800e610 <__kernel_rem_pio2f+0x3ac>
 800e624:	aa30      	add	r2, sp, #192	@ 0xc0
 800e626:	1f0b      	subs	r3, r1, #4
 800e628:	4620      	mov	r0, r4
 800e62a:	4413      	add	r3, r2
 800e62c:	461a      	mov	r2, r3
 800e62e:	2800      	cmp	r0, #0
 800e630:	dc50      	bgt.n	800e6d4 <__kernel_rem_pio2f+0x470>
 800e632:	4622      	mov	r2, r4
 800e634:	2a01      	cmp	r2, #1
 800e636:	dc5d      	bgt.n	800e6f4 <__kernel_rem_pio2f+0x490>
 800e638:	ab30      	add	r3, sp, #192	@ 0xc0
 800e63a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e63e:	440b      	add	r3, r1
 800e640:	2c01      	cmp	r4, #1
 800e642:	dc67      	bgt.n	800e714 <__kernel_rem_pio2f+0x4b0>
 800e644:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e648:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e64c:	2e00      	cmp	r6, #0
 800e64e:	d167      	bne.n	800e720 <__kernel_rem_pio2f+0x4bc>
 800e650:	edc7 6a00 	vstr	s13, [r7]
 800e654:	ed87 7a01 	vstr	s14, [r7, #4]
 800e658:	edc7 7a02 	vstr	s15, [r7, #8]
 800e65c:	e7d8      	b.n	800e610 <__kernel_rem_pio2f+0x3ac>
 800e65e:	ab30      	add	r3, sp, #192	@ 0xc0
 800e660:	4622      	mov	r2, r4
 800e662:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e666:	440b      	add	r3, r1
 800e668:	2a00      	cmp	r2, #0
 800e66a:	da24      	bge.n	800e6b6 <__kernel_rem_pio2f+0x452>
 800e66c:	b34e      	cbz	r6, 800e6c2 <__kernel_rem_pio2f+0x45e>
 800e66e:	eef1 7a47 	vneg.f32	s15, s14
 800e672:	edc7 7a00 	vstr	s15, [r7]
 800e676:	aa31      	add	r2, sp, #196	@ 0xc4
 800e678:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e67c:	2301      	movs	r3, #1
 800e67e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e682:	429c      	cmp	r4, r3
 800e684:	da20      	bge.n	800e6c8 <__kernel_rem_pio2f+0x464>
 800e686:	b10e      	cbz	r6, 800e68c <__kernel_rem_pio2f+0x428>
 800e688:	eef1 7a67 	vneg.f32	s15, s15
 800e68c:	edc7 7a01 	vstr	s15, [r7, #4]
 800e690:	e7be      	b.n	800e610 <__kernel_rem_pio2f+0x3ac>
 800e692:	ab30      	add	r3, sp, #192	@ 0xc0
 800e694:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800e560 <__kernel_rem_pio2f+0x2fc>
 800e698:	440b      	add	r3, r1
 800e69a:	2c00      	cmp	r4, #0
 800e69c:	da05      	bge.n	800e6aa <__kernel_rem_pio2f+0x446>
 800e69e:	b10e      	cbz	r6, 800e6a4 <__kernel_rem_pio2f+0x440>
 800e6a0:	eef1 7a67 	vneg.f32	s15, s15
 800e6a4:	edc7 7a00 	vstr	s15, [r7]
 800e6a8:	e7b2      	b.n	800e610 <__kernel_rem_pio2f+0x3ac>
 800e6aa:	ed33 7a01 	vldmdb	r3!, {s14}
 800e6ae:	3c01      	subs	r4, #1
 800e6b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6b4:	e7f1      	b.n	800e69a <__kernel_rem_pio2f+0x436>
 800e6b6:	ed73 7a01 	vldmdb	r3!, {s15}
 800e6ba:	3a01      	subs	r2, #1
 800e6bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6c0:	e7d2      	b.n	800e668 <__kernel_rem_pio2f+0x404>
 800e6c2:	eef0 7a47 	vmov.f32	s15, s14
 800e6c6:	e7d4      	b.n	800e672 <__kernel_rem_pio2f+0x40e>
 800e6c8:	ecb2 7a01 	vldmia	r2!, {s14}
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6d2:	e7d6      	b.n	800e682 <__kernel_rem_pio2f+0x41e>
 800e6d4:	ed72 7a01 	vldmdb	r2!, {s15}
 800e6d8:	3801      	subs	r0, #1
 800e6da:	edd2 6a01 	vldr	s13, [r2, #4]
 800e6de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e6e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6e6:	ed82 7a00 	vstr	s14, [r2]
 800e6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6ee:	edc2 7a01 	vstr	s15, [r2, #4]
 800e6f2:	e79c      	b.n	800e62e <__kernel_rem_pio2f+0x3ca>
 800e6f4:	ed73 7a01 	vldmdb	r3!, {s15}
 800e6f8:	3a01      	subs	r2, #1
 800e6fa:	edd3 6a01 	vldr	s13, [r3, #4]
 800e6fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e706:	ed83 7a00 	vstr	s14, [r3]
 800e70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e70e:	edc3 7a01 	vstr	s15, [r3, #4]
 800e712:	e78f      	b.n	800e634 <__kernel_rem_pio2f+0x3d0>
 800e714:	ed33 7a01 	vldmdb	r3!, {s14}
 800e718:	3c01      	subs	r4, #1
 800e71a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e71e:	e78f      	b.n	800e640 <__kernel_rem_pio2f+0x3dc>
 800e720:	eef1 6a66 	vneg.f32	s13, s13
 800e724:	eeb1 7a47 	vneg.f32	s14, s14
 800e728:	eef1 7a67 	vneg.f32	s15, s15
 800e72c:	edc7 6a00 	vstr	s13, [r7]
 800e730:	ed87 7a01 	vstr	s14, [r7, #4]
 800e734:	e790      	b.n	800e658 <__kernel_rem_pio2f+0x3f4>
 800e736:	bf00      	nop

0800e738 <scalbnf>:
 800e738:	ee10 3a10 	vmov	r3, s0
 800e73c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e740:	d02a      	beq.n	800e798 <scalbnf+0x60>
 800e742:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e746:	d302      	bcc.n	800e74e <scalbnf+0x16>
 800e748:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e74c:	4770      	bx	lr
 800e74e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e752:	d122      	bne.n	800e79a <scalbnf+0x62>
 800e754:	4b23      	ldr	r3, [pc, #140]	@ (800e7e4 <scalbnf+0xac>)
 800e756:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e7e8 <scalbnf+0xb0>
 800e75a:	4298      	cmp	r0, r3
 800e75c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e760:	db16      	blt.n	800e790 <scalbnf+0x58>
 800e762:	ee10 3a10 	vmov	r3, s0
 800e766:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e76a:	3a19      	subs	r2, #25
 800e76c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e770:	4288      	cmp	r0, r1
 800e772:	dd14      	ble.n	800e79e <scalbnf+0x66>
 800e774:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800e7ec <scalbnf+0xb4>
 800e778:	ee10 3a10 	vmov	r3, s0
 800e77c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800e7f0 <scalbnf+0xb8>
 800e780:	eeb0 7a67 	vmov.f32	s14, s15
 800e784:	2b00      	cmp	r3, #0
 800e786:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800e78a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e78e:	4770      	bx	lr
 800e790:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e7f4 <scalbnf+0xbc>
 800e794:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e798:	4770      	bx	lr
 800e79a:	0dd2      	lsrs	r2, r2, #23
 800e79c:	e7e6      	b.n	800e76c <scalbnf+0x34>
 800e79e:	4410      	add	r0, r2
 800e7a0:	28fe      	cmp	r0, #254	@ 0xfe
 800e7a2:	dce7      	bgt.n	800e774 <scalbnf+0x3c>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	dd06      	ble.n	800e7b6 <scalbnf+0x7e>
 800e7a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e7ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e7b0:	ee00 3a10 	vmov	s0, r3
 800e7b4:	4770      	bx	lr
 800e7b6:	f110 0f16 	cmn.w	r0, #22
 800e7ba:	da09      	bge.n	800e7d0 <scalbnf+0x98>
 800e7bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e7f4 <scalbnf+0xbc>
 800e7c0:	ee10 3a10 	vmov	r3, s0
 800e7c4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800e7f8 <scalbnf+0xc0>
 800e7c8:	eeb0 7a67 	vmov.f32	s14, s15
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	e7da      	b.n	800e786 <scalbnf+0x4e>
 800e7d0:	3019      	adds	r0, #25
 800e7d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e7d6:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800e7fc <scalbnf+0xc4>
 800e7da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e7de:	ee07 3a90 	vmov	s15, r3
 800e7e2:	e7d7      	b.n	800e794 <scalbnf+0x5c>
 800e7e4:	ffff3cb0 	.word	0xffff3cb0
 800e7e8:	4c000000 	.word	0x4c000000
 800e7ec:	7149f2ca 	.word	0x7149f2ca
 800e7f0:	f149f2ca 	.word	0xf149f2ca
 800e7f4:	0da24260 	.word	0x0da24260
 800e7f8:	8da24260 	.word	0x8da24260
 800e7fc:	33000000 	.word	0x33000000

0800e800 <floorf>:
 800e800:	febb 0a40 	vrintm.f32	s0, s0
 800e804:	4770      	bx	lr
	...

0800e808 <malloc>:
 800e808:	4b02      	ldr	r3, [pc, #8]	@ (800e814 <malloc+0xc>)
 800e80a:	4601      	mov	r1, r0
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f000 b825 	b.w	800e85c <_malloc_r>
 800e812:	bf00      	nop
 800e814:	20000018 	.word	0x20000018

0800e818 <sbrk_aligned>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	4e0f      	ldr	r6, [pc, #60]	@ (800e858 <sbrk_aligned+0x40>)
 800e81c:	460c      	mov	r4, r1
 800e81e:	4605      	mov	r5, r0
 800e820:	6831      	ldr	r1, [r6, #0]
 800e822:	b911      	cbnz	r1, 800e82a <sbrk_aligned+0x12>
 800e824:	f001 f978 	bl	800fb18 <_sbrk_r>
 800e828:	6030      	str	r0, [r6, #0]
 800e82a:	4621      	mov	r1, r4
 800e82c:	4628      	mov	r0, r5
 800e82e:	f001 f973 	bl	800fb18 <_sbrk_r>
 800e832:	1c43      	adds	r3, r0, #1
 800e834:	d103      	bne.n	800e83e <sbrk_aligned+0x26>
 800e836:	f04f 34ff 	mov.w	r4, #4294967295
 800e83a:	4620      	mov	r0, r4
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
 800e83e:	1cc4      	adds	r4, r0, #3
 800e840:	f024 0403 	bic.w	r4, r4, #3
 800e844:	42a0      	cmp	r0, r4
 800e846:	d0f8      	beq.n	800e83a <sbrk_aligned+0x22>
 800e848:	1a21      	subs	r1, r4, r0
 800e84a:	4628      	mov	r0, r5
 800e84c:	f001 f964 	bl	800fb18 <_sbrk_r>
 800e850:	3001      	adds	r0, #1
 800e852:	d1f2      	bne.n	800e83a <sbrk_aligned+0x22>
 800e854:	e7ef      	b.n	800e836 <sbrk_aligned+0x1e>
 800e856:	bf00      	nop
 800e858:	2000c5dc 	.word	0x2000c5dc

0800e85c <_malloc_r>:
 800e85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e860:	1ccd      	adds	r5, r1, #3
 800e862:	4606      	mov	r6, r0
 800e864:	f025 0503 	bic.w	r5, r5, #3
 800e868:	3508      	adds	r5, #8
 800e86a:	2d0c      	cmp	r5, #12
 800e86c:	bf38      	it	cc
 800e86e:	250c      	movcc	r5, #12
 800e870:	2d00      	cmp	r5, #0
 800e872:	db01      	blt.n	800e878 <_malloc_r+0x1c>
 800e874:	42a9      	cmp	r1, r5
 800e876:	d904      	bls.n	800e882 <_malloc_r+0x26>
 800e878:	230c      	movs	r3, #12
 800e87a:	6033      	str	r3, [r6, #0]
 800e87c:	2000      	movs	r0, #0
 800e87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e958 <_malloc_r+0xfc>
 800e886:	f000 f869 	bl	800e95c <__malloc_lock>
 800e88a:	f8d8 3000 	ldr.w	r3, [r8]
 800e88e:	461c      	mov	r4, r3
 800e890:	bb44      	cbnz	r4, 800e8e4 <_malloc_r+0x88>
 800e892:	4629      	mov	r1, r5
 800e894:	4630      	mov	r0, r6
 800e896:	f7ff ffbf 	bl	800e818 <sbrk_aligned>
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	4604      	mov	r4, r0
 800e89e:	d158      	bne.n	800e952 <_malloc_r+0xf6>
 800e8a0:	f8d8 4000 	ldr.w	r4, [r8]
 800e8a4:	4627      	mov	r7, r4
 800e8a6:	2f00      	cmp	r7, #0
 800e8a8:	d143      	bne.n	800e932 <_malloc_r+0xd6>
 800e8aa:	2c00      	cmp	r4, #0
 800e8ac:	d04b      	beq.n	800e946 <_malloc_r+0xea>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	eb04 0903 	add.w	r9, r4, r3
 800e8b8:	f001 f92e 	bl	800fb18 <_sbrk_r>
 800e8bc:	4581      	cmp	r9, r0
 800e8be:	d142      	bne.n	800e946 <_malloc_r+0xea>
 800e8c0:	6821      	ldr	r1, [r4, #0]
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	1a6d      	subs	r5, r5, r1
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	f7ff ffa6 	bl	800e818 <sbrk_aligned>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d03a      	beq.n	800e946 <_malloc_r+0xea>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	442b      	add	r3, r5
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	bb62      	cbnz	r2, 800e938 <_malloc_r+0xdc>
 800e8de:	f8c8 7000 	str.w	r7, [r8]
 800e8e2:	e00f      	b.n	800e904 <_malloc_r+0xa8>
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	1b52      	subs	r2, r2, r5
 800e8e8:	d420      	bmi.n	800e92c <_malloc_r+0xd0>
 800e8ea:	2a0b      	cmp	r2, #11
 800e8ec:	d917      	bls.n	800e91e <_malloc_r+0xc2>
 800e8ee:	1961      	adds	r1, r4, r5
 800e8f0:	42a3      	cmp	r3, r4
 800e8f2:	6025      	str	r5, [r4, #0]
 800e8f4:	bf18      	it	ne
 800e8f6:	6059      	strne	r1, [r3, #4]
 800e8f8:	6863      	ldr	r3, [r4, #4]
 800e8fa:	bf08      	it	eq
 800e8fc:	f8c8 1000 	streq.w	r1, [r8]
 800e900:	5162      	str	r2, [r4, r5]
 800e902:	604b      	str	r3, [r1, #4]
 800e904:	4630      	mov	r0, r6
 800e906:	f000 f82f 	bl	800e968 <__malloc_unlock>
 800e90a:	f104 000b 	add.w	r0, r4, #11
 800e90e:	1d23      	adds	r3, r4, #4
 800e910:	f020 0007 	bic.w	r0, r0, #7
 800e914:	1ac2      	subs	r2, r0, r3
 800e916:	bf1c      	itt	ne
 800e918:	1a1b      	subne	r3, r3, r0
 800e91a:	50a3      	strne	r3, [r4, r2]
 800e91c:	e7af      	b.n	800e87e <_malloc_r+0x22>
 800e91e:	6862      	ldr	r2, [r4, #4]
 800e920:	42a3      	cmp	r3, r4
 800e922:	bf0c      	ite	eq
 800e924:	f8c8 2000 	streq.w	r2, [r8]
 800e928:	605a      	strne	r2, [r3, #4]
 800e92a:	e7eb      	b.n	800e904 <_malloc_r+0xa8>
 800e92c:	4623      	mov	r3, r4
 800e92e:	6864      	ldr	r4, [r4, #4]
 800e930:	e7ae      	b.n	800e890 <_malloc_r+0x34>
 800e932:	463c      	mov	r4, r7
 800e934:	687f      	ldr	r7, [r7, #4]
 800e936:	e7b6      	b.n	800e8a6 <_malloc_r+0x4a>
 800e938:	461a      	mov	r2, r3
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	42a3      	cmp	r3, r4
 800e93e:	d1fb      	bne.n	800e938 <_malloc_r+0xdc>
 800e940:	2300      	movs	r3, #0
 800e942:	6053      	str	r3, [r2, #4]
 800e944:	e7de      	b.n	800e904 <_malloc_r+0xa8>
 800e946:	230c      	movs	r3, #12
 800e948:	4630      	mov	r0, r6
 800e94a:	6033      	str	r3, [r6, #0]
 800e94c:	f000 f80c 	bl	800e968 <__malloc_unlock>
 800e950:	e794      	b.n	800e87c <_malloc_r+0x20>
 800e952:	6005      	str	r5, [r0, #0]
 800e954:	e7d6      	b.n	800e904 <_malloc_r+0xa8>
 800e956:	bf00      	nop
 800e958:	2000c5e0 	.word	0x2000c5e0

0800e95c <__malloc_lock>:
 800e95c:	4801      	ldr	r0, [pc, #4]	@ (800e964 <__malloc_lock+0x8>)
 800e95e:	f7f3 bf0a 	b.w	8002776 <__retarget_lock_acquire_recursive>
 800e962:	bf00      	nop
 800e964:	2000c5b0 	.word	0x2000c5b0

0800e968 <__malloc_unlock>:
 800e968:	4801      	ldr	r0, [pc, #4]	@ (800e970 <__malloc_unlock+0x8>)
 800e96a:	f7f3 bf19 	b.w	80027a0 <__retarget_lock_release_recursive>
 800e96e:	bf00      	nop
 800e970:	2000c5b0 	.word	0x2000c5b0

0800e974 <__cvt>:
 800e974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e978:	ec57 6b10 	vmov	r6, r7, d0
 800e97c:	2f00      	cmp	r7, #0
 800e97e:	460c      	mov	r4, r1
 800e980:	4619      	mov	r1, r3
 800e982:	463b      	mov	r3, r7
 800e984:	bfb4      	ite	lt
 800e986:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e98a:	2300      	movge	r3, #0
 800e98c:	4691      	mov	r9, r2
 800e98e:	bfbf      	itttt	lt
 800e990:	4632      	movlt	r2, r6
 800e992:	461f      	movlt	r7, r3
 800e994:	232d      	movlt	r3, #45	@ 0x2d
 800e996:	4616      	movlt	r6, r2
 800e998:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e99c:	700b      	strb	r3, [r1, #0]
 800e99e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9a0:	f023 0820 	bic.w	r8, r3, #32
 800e9a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e9a8:	d005      	beq.n	800e9b6 <__cvt+0x42>
 800e9aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e9ae:	d100      	bne.n	800e9b2 <__cvt+0x3e>
 800e9b0:	3401      	adds	r4, #1
 800e9b2:	2102      	movs	r1, #2
 800e9b4:	e000      	b.n	800e9b8 <__cvt+0x44>
 800e9b6:	2103      	movs	r1, #3
 800e9b8:	ab03      	add	r3, sp, #12
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	ab02      	add	r3, sp, #8
 800e9c0:	ec47 6b10 	vmov	d0, r6, r7
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	4653      	mov	r3, sl
 800e9c8:	f001 f9a2 	bl	800fd10 <_dtoa_r>
 800e9cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	d119      	bne.n	800ea08 <__cvt+0x94>
 800e9d4:	f019 0f01 	tst.w	r9, #1
 800e9d8:	d00e      	beq.n	800e9f8 <__cvt+0x84>
 800e9da:	eb00 0904 	add.w	r9, r0, r4
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	f7f2 f873 	bl	8000ad0 <__aeabi_dcmpeq>
 800e9ea:	b108      	cbz	r0, 800e9f0 <__cvt+0x7c>
 800e9ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9f0:	2230      	movs	r2, #48	@ 0x30
 800e9f2:	9b03      	ldr	r3, [sp, #12]
 800e9f4:	454b      	cmp	r3, r9
 800e9f6:	d31e      	bcc.n	800ea36 <__cvt+0xc2>
 800e9f8:	9b03      	ldr	r3, [sp, #12]
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9fe:	1b5b      	subs	r3, r3, r5
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	b004      	add	sp, #16
 800ea04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ea0c:	eb00 0904 	add.w	r9, r0, r4
 800ea10:	d1e5      	bne.n	800e9de <__cvt+0x6a>
 800ea12:	7803      	ldrb	r3, [r0, #0]
 800ea14:	2b30      	cmp	r3, #48	@ 0x30
 800ea16:	d10a      	bne.n	800ea2e <__cvt+0xba>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	4639      	mov	r1, r7
 800ea20:	f7f2 f856 	bl	8000ad0 <__aeabi_dcmpeq>
 800ea24:	b918      	cbnz	r0, 800ea2e <__cvt+0xba>
 800ea26:	f1c4 0401 	rsb	r4, r4, #1
 800ea2a:	f8ca 4000 	str.w	r4, [sl]
 800ea2e:	f8da 3000 	ldr.w	r3, [sl]
 800ea32:	4499      	add	r9, r3
 800ea34:	e7d3      	b.n	800e9de <__cvt+0x6a>
 800ea36:	1c59      	adds	r1, r3, #1
 800ea38:	9103      	str	r1, [sp, #12]
 800ea3a:	701a      	strb	r2, [r3, #0]
 800ea3c:	e7d9      	b.n	800e9f2 <__cvt+0x7e>

0800ea3e <__exponent>:
 800ea3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea40:	2900      	cmp	r1, #0
 800ea42:	7002      	strb	r2, [r0, #0]
 800ea44:	bfba      	itte	lt
 800ea46:	4249      	neglt	r1, r1
 800ea48:	232d      	movlt	r3, #45	@ 0x2d
 800ea4a:	232b      	movge	r3, #43	@ 0x2b
 800ea4c:	2909      	cmp	r1, #9
 800ea4e:	7043      	strb	r3, [r0, #1]
 800ea50:	dd28      	ble.n	800eaa4 <__exponent+0x66>
 800ea52:	f10d 0307 	add.w	r3, sp, #7
 800ea56:	270a      	movs	r7, #10
 800ea58:	461d      	mov	r5, r3
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ea62:	fb07 1416 	mls	r4, r7, r6, r1
 800ea66:	3430      	adds	r4, #48	@ 0x30
 800ea68:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	4631      	mov	r1, r6
 800ea70:	2c63      	cmp	r4, #99	@ 0x63
 800ea72:	dcf2      	bgt.n	800ea5a <__exponent+0x1c>
 800ea74:	3130      	adds	r1, #48	@ 0x30
 800ea76:	1e94      	subs	r4, r2, #2
 800ea78:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ea7c:	1c41      	adds	r1, r0, #1
 800ea7e:	4623      	mov	r3, r4
 800ea80:	42ab      	cmp	r3, r5
 800ea82:	d30a      	bcc.n	800ea9a <__exponent+0x5c>
 800ea84:	f10d 0309 	add.w	r3, sp, #9
 800ea88:	1a9b      	subs	r3, r3, r2
 800ea8a:	42ac      	cmp	r4, r5
 800ea8c:	bf88      	it	hi
 800ea8e:	2300      	movhi	r3, #0
 800ea90:	3302      	adds	r3, #2
 800ea92:	4403      	add	r3, r0
 800ea94:	1a18      	subs	r0, r3, r0
 800ea96:	b003      	add	sp, #12
 800ea98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ea9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eaa2:	e7ed      	b.n	800ea80 <__exponent+0x42>
 800eaa4:	2330      	movs	r3, #48	@ 0x30
 800eaa6:	3130      	adds	r1, #48	@ 0x30
 800eaa8:	7083      	strb	r3, [r0, #2]
 800eaaa:	1d03      	adds	r3, r0, #4
 800eaac:	70c1      	strb	r1, [r0, #3]
 800eaae:	e7f1      	b.n	800ea94 <__exponent+0x56>

0800eab0 <_printf_float>:
 800eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab4:	b08d      	sub	sp, #52	@ 0x34
 800eab6:	460c      	mov	r4, r1
 800eab8:	4616      	mov	r6, r2
 800eaba:	461f      	mov	r7, r3
 800eabc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eac0:	4605      	mov	r5, r0
 800eac2:	f000 fff1 	bl	800faa8 <_localeconv_r>
 800eac6:	6803      	ldr	r3, [r0, #0]
 800eac8:	4618      	mov	r0, r3
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	f7f1 fbd4 	bl	8000278 <strlen>
 800ead0:	2300      	movs	r3, #0
 800ead2:	9005      	str	r0, [sp, #20]
 800ead4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ead6:	f8d8 3000 	ldr.w	r3, [r8]
 800eada:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eade:	3307      	adds	r3, #7
 800eae0:	f8d4 b000 	ldr.w	fp, [r4]
 800eae4:	f023 0307 	bic.w	r3, r3, #7
 800eae8:	f103 0208 	add.w	r2, r3, #8
 800eaec:	f8c8 2000 	str.w	r2, [r8]
 800eaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eaf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eafc:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb00:	9307      	str	r3, [sp, #28]
 800eb02:	4b9d      	ldr	r3, [pc, #628]	@ (800ed78 <_printf_float+0x2c8>)
 800eb04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb08:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eb0c:	f7f2 f812 	bl	8000b34 <__aeabi_dcmpun>
 800eb10:	bb70      	cbnz	r0, 800eb70 <_printf_float+0xc0>
 800eb12:	f04f 32ff 	mov.w	r2, #4294967295
 800eb16:	4b98      	ldr	r3, [pc, #608]	@ (800ed78 <_printf_float+0x2c8>)
 800eb18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb1c:	f7f1 ffec 	bl	8000af8 <__aeabi_dcmple>
 800eb20:	bb30      	cbnz	r0, 800eb70 <_printf_float+0xc0>
 800eb22:	2200      	movs	r2, #0
 800eb24:	2300      	movs	r3, #0
 800eb26:	4640      	mov	r0, r8
 800eb28:	4649      	mov	r1, r9
 800eb2a:	f7f1 ffdb 	bl	8000ae4 <__aeabi_dcmplt>
 800eb2e:	b110      	cbz	r0, 800eb36 <_printf_float+0x86>
 800eb30:	232d      	movs	r3, #45	@ 0x2d
 800eb32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb36:	4a91      	ldr	r2, [pc, #580]	@ (800ed7c <_printf_float+0x2cc>)
 800eb38:	4b91      	ldr	r3, [pc, #580]	@ (800ed80 <_printf_float+0x2d0>)
 800eb3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eb3e:	bf8c      	ite	hi
 800eb40:	4690      	movhi	r8, r2
 800eb42:	4698      	movls	r8, r3
 800eb44:	2303      	movs	r3, #3
 800eb46:	f04f 0900 	mov.w	r9, #0
 800eb4a:	6123      	str	r3, [r4, #16]
 800eb4c:	f02b 0304 	bic.w	r3, fp, #4
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	4633      	mov	r3, r6
 800eb54:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eb56:	4621      	mov	r1, r4
 800eb58:	4628      	mov	r0, r5
 800eb5a:	9700      	str	r7, [sp, #0]
 800eb5c:	f000 f9d2 	bl	800ef04 <_printf_common>
 800eb60:	3001      	adds	r0, #1
 800eb62:	f040 808d 	bne.w	800ec80 <_printf_float+0x1d0>
 800eb66:	f04f 30ff 	mov.w	r0, #4294967295
 800eb6a:	b00d      	add	sp, #52	@ 0x34
 800eb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb70:	4642      	mov	r2, r8
 800eb72:	464b      	mov	r3, r9
 800eb74:	4640      	mov	r0, r8
 800eb76:	4649      	mov	r1, r9
 800eb78:	f7f1 ffdc 	bl	8000b34 <__aeabi_dcmpun>
 800eb7c:	b140      	cbz	r0, 800eb90 <_printf_float+0xe0>
 800eb7e:	464b      	mov	r3, r9
 800eb80:	4a80      	ldr	r2, [pc, #512]	@ (800ed84 <_printf_float+0x2d4>)
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	bfbc      	itt	lt
 800eb86:	232d      	movlt	r3, #45	@ 0x2d
 800eb88:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eb8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ed88 <_printf_float+0x2d8>)
 800eb8e:	e7d4      	b.n	800eb3a <_printf_float+0x8a>
 800eb90:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eb94:	6863      	ldr	r3, [r4, #4]
 800eb96:	9206      	str	r2, [sp, #24]
 800eb98:	1c5a      	adds	r2, r3, #1
 800eb9a:	d13b      	bne.n	800ec14 <_printf_float+0x164>
 800eb9c:	2306      	movs	r3, #6
 800eb9e:	6063      	str	r3, [r4, #4]
 800eba0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eba4:	2300      	movs	r3, #0
 800eba6:	4628      	mov	r0, r5
 800eba8:	6022      	str	r2, [r4, #0]
 800ebaa:	9303      	str	r3, [sp, #12]
 800ebac:	ab0a      	add	r3, sp, #40	@ 0x28
 800ebae:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ebb2:	ab09      	add	r3, sp, #36	@ 0x24
 800ebb4:	ec49 8b10 	vmov	d0, r8, r9
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ebbe:	6861      	ldr	r1, [r4, #4]
 800ebc0:	f7ff fed8 	bl	800e974 <__cvt>
 800ebc4:	9b06      	ldr	r3, [sp, #24]
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebca:	2b47      	cmp	r3, #71	@ 0x47
 800ebcc:	d129      	bne.n	800ec22 <_printf_float+0x172>
 800ebce:	1cc8      	adds	r0, r1, #3
 800ebd0:	db02      	blt.n	800ebd8 <_printf_float+0x128>
 800ebd2:	6863      	ldr	r3, [r4, #4]
 800ebd4:	4299      	cmp	r1, r3
 800ebd6:	dd41      	ble.n	800ec5c <_printf_float+0x1ac>
 800ebd8:	f1aa 0a02 	sub.w	sl, sl, #2
 800ebdc:	fa5f fa8a 	uxtb.w	sl, sl
 800ebe0:	3901      	subs	r1, #1
 800ebe2:	4652      	mov	r2, sl
 800ebe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ebe8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ebea:	f7ff ff28 	bl	800ea3e <__exponent>
 800ebee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebf0:	4681      	mov	r9, r0
 800ebf2:	1813      	adds	r3, r2, r0
 800ebf4:	2a01      	cmp	r2, #1
 800ebf6:	6123      	str	r3, [r4, #16]
 800ebf8:	dc02      	bgt.n	800ec00 <_printf_float+0x150>
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	07d2      	lsls	r2, r2, #31
 800ebfe:	d501      	bpl.n	800ec04 <_printf_float+0x154>
 800ec00:	3301      	adds	r3, #1
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0a2      	beq.n	800eb52 <_printf_float+0xa2>
 800ec0c:	232d      	movs	r3, #45	@ 0x2d
 800ec0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec12:	e79e      	b.n	800eb52 <_printf_float+0xa2>
 800ec14:	9a06      	ldr	r2, [sp, #24]
 800ec16:	2a47      	cmp	r2, #71	@ 0x47
 800ec18:	d1c2      	bne.n	800eba0 <_printf_float+0xf0>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1c0      	bne.n	800eba0 <_printf_float+0xf0>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e7bd      	b.n	800eb9e <_printf_float+0xee>
 800ec22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec26:	d9db      	bls.n	800ebe0 <_printf_float+0x130>
 800ec28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ec2c:	d118      	bne.n	800ec60 <_printf_float+0x1b0>
 800ec2e:	2900      	cmp	r1, #0
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	dd0b      	ble.n	800ec4c <_printf_float+0x19c>
 800ec34:	6121      	str	r1, [r4, #16]
 800ec36:	b913      	cbnz	r3, 800ec3e <_printf_float+0x18e>
 800ec38:	6822      	ldr	r2, [r4, #0]
 800ec3a:	07d0      	lsls	r0, r2, #31
 800ec3c:	d502      	bpl.n	800ec44 <_printf_float+0x194>
 800ec3e:	3301      	adds	r3, #1
 800ec40:	440b      	add	r3, r1
 800ec42:	6123      	str	r3, [r4, #16]
 800ec44:	f04f 0900 	mov.w	r9, #0
 800ec48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ec4a:	e7db      	b.n	800ec04 <_printf_float+0x154>
 800ec4c:	b913      	cbnz	r3, 800ec54 <_printf_float+0x1a4>
 800ec4e:	6822      	ldr	r2, [r4, #0]
 800ec50:	07d2      	lsls	r2, r2, #31
 800ec52:	d501      	bpl.n	800ec58 <_printf_float+0x1a8>
 800ec54:	3302      	adds	r3, #2
 800ec56:	e7f4      	b.n	800ec42 <_printf_float+0x192>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e7f2      	b.n	800ec42 <_printf_float+0x192>
 800ec5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ec60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec62:	4299      	cmp	r1, r3
 800ec64:	db05      	blt.n	800ec72 <_printf_float+0x1c2>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	6121      	str	r1, [r4, #16]
 800ec6a:	07d8      	lsls	r0, r3, #31
 800ec6c:	d5ea      	bpl.n	800ec44 <_printf_float+0x194>
 800ec6e:	1c4b      	adds	r3, r1, #1
 800ec70:	e7e7      	b.n	800ec42 <_printf_float+0x192>
 800ec72:	2900      	cmp	r1, #0
 800ec74:	bfd4      	ite	le
 800ec76:	f1c1 0202 	rsble	r2, r1, #2
 800ec7a:	2201      	movgt	r2, #1
 800ec7c:	4413      	add	r3, r2
 800ec7e:	e7e0      	b.n	800ec42 <_printf_float+0x192>
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	055a      	lsls	r2, r3, #21
 800ec84:	d407      	bmi.n	800ec96 <_printf_float+0x1e6>
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	4642      	mov	r2, r8
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b8      	blx	r7
 800ec90:	3001      	adds	r0, #1
 800ec92:	d12b      	bne.n	800ecec <_printf_float+0x23c>
 800ec94:	e767      	b.n	800eb66 <_printf_float+0xb6>
 800ec96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec9a:	f240 80dd 	bls.w	800ee58 <_printf_float+0x3a8>
 800ec9e:	2200      	movs	r2, #0
 800eca0:	2300      	movs	r3, #0
 800eca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eca6:	f7f1 ff13 	bl	8000ad0 <__aeabi_dcmpeq>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d033      	beq.n	800ed16 <_printf_float+0x266>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	4a36      	ldr	r2, [pc, #216]	@ (800ed8c <_printf_float+0x2dc>)
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	47b8      	blx	r7
 800ecb8:	3001      	adds	r0, #1
 800ecba:	f43f af54 	beq.w	800eb66 <_printf_float+0xb6>
 800ecbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ecc2:	4543      	cmp	r3, r8
 800ecc4:	db02      	blt.n	800eccc <_printf_float+0x21c>
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	07d8      	lsls	r0, r3, #31
 800ecca:	d50f      	bpl.n	800ecec <_printf_float+0x23c>
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecd4:	47b8      	blx	r7
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	f43f af45 	beq.w	800eb66 <_printf_float+0xb6>
 800ecdc:	f04f 0900 	mov.w	r9, #0
 800ece0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ece4:	f104 0a1a 	add.w	sl, r4, #26
 800ece8:	45c8      	cmp	r8, r9
 800ecea:	dc09      	bgt.n	800ed00 <_printf_float+0x250>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	079b      	lsls	r3, r3, #30
 800ecf0:	f100 8103 	bmi.w	800eefa <_printf_float+0x44a>
 800ecf4:	68e0      	ldr	r0, [r4, #12]
 800ecf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecf8:	4298      	cmp	r0, r3
 800ecfa:	bfb8      	it	lt
 800ecfc:	4618      	movlt	r0, r3
 800ecfe:	e734      	b.n	800eb6a <_printf_float+0xba>
 800ed00:	2301      	movs	r3, #1
 800ed02:	4652      	mov	r2, sl
 800ed04:	4631      	mov	r1, r6
 800ed06:	4628      	mov	r0, r5
 800ed08:	47b8      	blx	r7
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	f43f af2b 	beq.w	800eb66 <_printf_float+0xb6>
 800ed10:	f109 0901 	add.w	r9, r9, #1
 800ed14:	e7e8      	b.n	800ece8 <_printf_float+0x238>
 800ed16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	dc39      	bgt.n	800ed90 <_printf_float+0x2e0>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ed8c <_printf_float+0x2dc>)
 800ed20:	4631      	mov	r1, r6
 800ed22:	4628      	mov	r0, r5
 800ed24:	47b8      	blx	r7
 800ed26:	3001      	adds	r0, #1
 800ed28:	f43f af1d 	beq.w	800eb66 <_printf_float+0xb6>
 800ed2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ed30:	ea59 0303 	orrs.w	r3, r9, r3
 800ed34:	d102      	bne.n	800ed3c <_printf_float+0x28c>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	07d9      	lsls	r1, r3, #31
 800ed3a:	d5d7      	bpl.n	800ecec <_printf_float+0x23c>
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4628      	mov	r0, r5
 800ed40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed44:	47b8      	blx	r7
 800ed46:	3001      	adds	r0, #1
 800ed48:	f43f af0d 	beq.w	800eb66 <_printf_float+0xb6>
 800ed4c:	f04f 0a00 	mov.w	sl, #0
 800ed50:	f104 0b1a 	add.w	fp, r4, #26
 800ed54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed56:	425b      	negs	r3, r3
 800ed58:	4553      	cmp	r3, sl
 800ed5a:	dc01      	bgt.n	800ed60 <_printf_float+0x2b0>
 800ed5c:	464b      	mov	r3, r9
 800ed5e:	e793      	b.n	800ec88 <_printf_float+0x1d8>
 800ed60:	2301      	movs	r3, #1
 800ed62:	465a      	mov	r2, fp
 800ed64:	4631      	mov	r1, r6
 800ed66:	4628      	mov	r0, r5
 800ed68:	47b8      	blx	r7
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	f43f aefb 	beq.w	800eb66 <_printf_float+0xb6>
 800ed70:	f10a 0a01 	add.w	sl, sl, #1
 800ed74:	e7ee      	b.n	800ed54 <_printf_float+0x2a4>
 800ed76:	bf00      	nop
 800ed78:	7fefffff 	.word	0x7fefffff
 800ed7c:	080309a4 	.word	0x080309a4
 800ed80:	080309a0 	.word	0x080309a0
 800ed84:	080309ac 	.word	0x080309ac
 800ed88:	080309a8 	.word	0x080309a8
 800ed8c:	080309b0 	.word	0x080309b0
 800ed90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed96:	4553      	cmp	r3, sl
 800ed98:	bfa8      	it	ge
 800ed9a:	4653      	movge	r3, sl
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	4699      	mov	r9, r3
 800eda0:	dc36      	bgt.n	800ee10 <_printf_float+0x360>
 800eda2:	f04f 0b00 	mov.w	fp, #0
 800eda6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edaa:	f104 021a 	add.w	r2, r4, #26
 800edae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800edb0:	9306      	str	r3, [sp, #24]
 800edb2:	eba3 0309 	sub.w	r3, r3, r9
 800edb6:	455b      	cmp	r3, fp
 800edb8:	dc31      	bgt.n	800ee1e <_printf_float+0x36e>
 800edba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edbc:	459a      	cmp	sl, r3
 800edbe:	dc3a      	bgt.n	800ee36 <_printf_float+0x386>
 800edc0:	6823      	ldr	r3, [r4, #0]
 800edc2:	07da      	lsls	r2, r3, #31
 800edc4:	d437      	bmi.n	800ee36 <_printf_float+0x386>
 800edc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc8:	ebaa 0903 	sub.w	r9, sl, r3
 800edcc:	9b06      	ldr	r3, [sp, #24]
 800edce:	ebaa 0303 	sub.w	r3, sl, r3
 800edd2:	4599      	cmp	r9, r3
 800edd4:	bfa8      	it	ge
 800edd6:	4699      	movge	r9, r3
 800edd8:	f1b9 0f00 	cmp.w	r9, #0
 800eddc:	dc33      	bgt.n	800ee46 <_printf_float+0x396>
 800edde:	f04f 0800 	mov.w	r8, #0
 800ede2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ede6:	f104 0b1a 	add.w	fp, r4, #26
 800edea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edec:	ebaa 0303 	sub.w	r3, sl, r3
 800edf0:	eba3 0309 	sub.w	r3, r3, r9
 800edf4:	4543      	cmp	r3, r8
 800edf6:	f77f af79 	ble.w	800ecec <_printf_float+0x23c>
 800edfa:	2301      	movs	r3, #1
 800edfc:	465a      	mov	r2, fp
 800edfe:	4631      	mov	r1, r6
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	f43f aeae 	beq.w	800eb66 <_printf_float+0xb6>
 800ee0a:	f108 0801 	add.w	r8, r8, #1
 800ee0e:	e7ec      	b.n	800edea <_printf_float+0x33a>
 800ee10:	4642      	mov	r2, r8
 800ee12:	4631      	mov	r1, r6
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b8      	blx	r7
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d1c2      	bne.n	800eda2 <_printf_float+0x2f2>
 800ee1c:	e6a3      	b.n	800eb66 <_printf_float+0xb6>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	9206      	str	r2, [sp, #24]
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f ae9c 	beq.w	800eb66 <_printf_float+0xb6>
 800ee2e:	f10b 0b01 	add.w	fp, fp, #1
 800ee32:	9a06      	ldr	r2, [sp, #24]
 800ee34:	e7bb      	b.n	800edae <_printf_float+0x2fe>
 800ee36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee3a:	4631      	mov	r1, r6
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	47b8      	blx	r7
 800ee40:	3001      	adds	r0, #1
 800ee42:	d1c0      	bne.n	800edc6 <_printf_float+0x316>
 800ee44:	e68f      	b.n	800eb66 <_printf_float+0xb6>
 800ee46:	9a06      	ldr	r2, [sp, #24]
 800ee48:	464b      	mov	r3, r9
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	4442      	add	r2, r8
 800ee50:	47b8      	blx	r7
 800ee52:	3001      	adds	r0, #1
 800ee54:	d1c3      	bne.n	800edde <_printf_float+0x32e>
 800ee56:	e686      	b.n	800eb66 <_printf_float+0xb6>
 800ee58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee5c:	f1ba 0f01 	cmp.w	sl, #1
 800ee60:	dc01      	bgt.n	800ee66 <_printf_float+0x3b6>
 800ee62:	07db      	lsls	r3, r3, #31
 800ee64:	d536      	bpl.n	800eed4 <_printf_float+0x424>
 800ee66:	2301      	movs	r3, #1
 800ee68:	4642      	mov	r2, r8
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	47b8      	blx	r7
 800ee70:	3001      	adds	r0, #1
 800ee72:	f43f ae78 	beq.w	800eb66 <_printf_float+0xb6>
 800ee76:	4631      	mov	r1, r6
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee7e:	47b8      	blx	r7
 800ee80:	3001      	adds	r0, #1
 800ee82:	f43f ae70 	beq.w	800eb66 <_printf_float+0xb6>
 800ee86:	2200      	movs	r2, #0
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ee92:	f7f1 fe1d 	bl	8000ad0 <__aeabi_dcmpeq>
 800ee96:	b9c0      	cbnz	r0, 800eeca <_printf_float+0x41a>
 800ee98:	4653      	mov	r3, sl
 800ee9a:	f108 0201 	add.w	r2, r8, #1
 800ee9e:	4631      	mov	r1, r6
 800eea0:	4628      	mov	r0, r5
 800eea2:	47b8      	blx	r7
 800eea4:	3001      	adds	r0, #1
 800eea6:	d10c      	bne.n	800eec2 <_printf_float+0x412>
 800eea8:	e65d      	b.n	800eb66 <_printf_float+0xb6>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	465a      	mov	r2, fp
 800eeae:	4631      	mov	r1, r6
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	47b8      	blx	r7
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	f43f ae56 	beq.w	800eb66 <_printf_float+0xb6>
 800eeba:	f108 0801 	add.w	r8, r8, #1
 800eebe:	45d0      	cmp	r8, sl
 800eec0:	dbf3      	blt.n	800eeaa <_printf_float+0x3fa>
 800eec2:	464b      	mov	r3, r9
 800eec4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eec8:	e6df      	b.n	800ec8a <_printf_float+0x1da>
 800eeca:	f04f 0800 	mov.w	r8, #0
 800eece:	f104 0b1a 	add.w	fp, r4, #26
 800eed2:	e7f4      	b.n	800eebe <_printf_float+0x40e>
 800eed4:	2301      	movs	r3, #1
 800eed6:	4642      	mov	r2, r8
 800eed8:	e7e1      	b.n	800ee9e <_printf_float+0x3ee>
 800eeda:	2301      	movs	r3, #1
 800eedc:	464a      	mov	r2, r9
 800eede:	4631      	mov	r1, r6
 800eee0:	4628      	mov	r0, r5
 800eee2:	47b8      	blx	r7
 800eee4:	3001      	adds	r0, #1
 800eee6:	f43f ae3e 	beq.w	800eb66 <_printf_float+0xb6>
 800eeea:	f108 0801 	add.w	r8, r8, #1
 800eeee:	68e3      	ldr	r3, [r4, #12]
 800eef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eef2:	1a5b      	subs	r3, r3, r1
 800eef4:	4543      	cmp	r3, r8
 800eef6:	dcf0      	bgt.n	800eeda <_printf_float+0x42a>
 800eef8:	e6fc      	b.n	800ecf4 <_printf_float+0x244>
 800eefa:	f04f 0800 	mov.w	r8, #0
 800eefe:	f104 0919 	add.w	r9, r4, #25
 800ef02:	e7f4      	b.n	800eeee <_printf_float+0x43e>

0800ef04 <_printf_common>:
 800ef04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef08:	4616      	mov	r6, r2
 800ef0a:	4698      	mov	r8, r3
 800ef0c:	688a      	ldr	r2, [r1, #8]
 800ef0e:	4607      	mov	r7, r0
 800ef10:	690b      	ldr	r3, [r1, #16]
 800ef12:	460c      	mov	r4, r1
 800ef14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	bfb8      	it	lt
 800ef1c:	4613      	movlt	r3, r2
 800ef1e:	6033      	str	r3, [r6, #0]
 800ef20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef24:	b10a      	cbz	r2, 800ef2a <_printf_common+0x26>
 800ef26:	3301      	adds	r3, #1
 800ef28:	6033      	str	r3, [r6, #0]
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	0699      	lsls	r1, r3, #26
 800ef2e:	bf42      	ittt	mi
 800ef30:	6833      	ldrmi	r3, [r6, #0]
 800ef32:	3302      	addmi	r3, #2
 800ef34:	6033      	strmi	r3, [r6, #0]
 800ef36:	6825      	ldr	r5, [r4, #0]
 800ef38:	f015 0506 	ands.w	r5, r5, #6
 800ef3c:	d106      	bne.n	800ef4c <_printf_common+0x48>
 800ef3e:	f104 0a19 	add.w	sl, r4, #25
 800ef42:	68e3      	ldr	r3, [r4, #12]
 800ef44:	6832      	ldr	r2, [r6, #0]
 800ef46:	1a9b      	subs	r3, r3, r2
 800ef48:	42ab      	cmp	r3, r5
 800ef4a:	dc2b      	bgt.n	800efa4 <_printf_common+0xa0>
 800ef4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef50:	6822      	ldr	r2, [r4, #0]
 800ef52:	3b00      	subs	r3, #0
 800ef54:	bf18      	it	ne
 800ef56:	2301      	movne	r3, #1
 800ef58:	0692      	lsls	r2, r2, #26
 800ef5a:	d430      	bmi.n	800efbe <_printf_common+0xba>
 800ef5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef60:	4641      	mov	r1, r8
 800ef62:	4638      	mov	r0, r7
 800ef64:	47c8      	blx	r9
 800ef66:	3001      	adds	r0, #1
 800ef68:	d023      	beq.n	800efb2 <_printf_common+0xae>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	341a      	adds	r4, #26
 800ef6e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ef72:	f003 0306 	and.w	r3, r3, #6
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	bf0a      	itet	eq
 800ef7a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ef7e:	2500      	movne	r5, #0
 800ef80:	6833      	ldreq	r3, [r6, #0]
 800ef82:	f04f 0600 	mov.w	r6, #0
 800ef86:	bf08      	it	eq
 800ef88:	1aed      	subeq	r5, r5, r3
 800ef8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ef8e:	bf08      	it	eq
 800ef90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef94:	4293      	cmp	r3, r2
 800ef96:	bfc4      	itt	gt
 800ef98:	1a9b      	subgt	r3, r3, r2
 800ef9a:	18ed      	addgt	r5, r5, r3
 800ef9c:	42b5      	cmp	r5, r6
 800ef9e:	d11a      	bne.n	800efd6 <_printf_common+0xd2>
 800efa0:	2000      	movs	r0, #0
 800efa2:	e008      	b.n	800efb6 <_printf_common+0xb2>
 800efa4:	2301      	movs	r3, #1
 800efa6:	4652      	mov	r2, sl
 800efa8:	4641      	mov	r1, r8
 800efaa:	4638      	mov	r0, r7
 800efac:	47c8      	blx	r9
 800efae:	3001      	adds	r0, #1
 800efb0:	d103      	bne.n	800efba <_printf_common+0xb6>
 800efb2:	f04f 30ff 	mov.w	r0, #4294967295
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	3501      	adds	r5, #1
 800efbc:	e7c1      	b.n	800ef42 <_printf_common+0x3e>
 800efbe:	18e1      	adds	r1, r4, r3
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	2030      	movs	r0, #48	@ 0x30
 800efc4:	3302      	adds	r3, #2
 800efc6:	4422      	add	r2, r4
 800efc8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efd4:	e7c2      	b.n	800ef5c <_printf_common+0x58>
 800efd6:	2301      	movs	r3, #1
 800efd8:	4622      	mov	r2, r4
 800efda:	4641      	mov	r1, r8
 800efdc:	4638      	mov	r0, r7
 800efde:	47c8      	blx	r9
 800efe0:	3001      	adds	r0, #1
 800efe2:	d0e6      	beq.n	800efb2 <_printf_common+0xae>
 800efe4:	3601      	adds	r6, #1
 800efe6:	e7d9      	b.n	800ef9c <_printf_common+0x98>

0800efe8 <_printf_i>:
 800efe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efec:	7e0f      	ldrb	r7, [r1, #24]
 800efee:	4691      	mov	r9, r2
 800eff0:	4680      	mov	r8, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	2f78      	cmp	r7, #120	@ 0x78
 800eff6:	469a      	mov	sl, r3
 800eff8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800effa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800effe:	d807      	bhi.n	800f010 <_printf_i+0x28>
 800f000:	2f62      	cmp	r7, #98	@ 0x62
 800f002:	d80a      	bhi.n	800f01a <_printf_i+0x32>
 800f004:	2f00      	cmp	r7, #0
 800f006:	f000 80d1 	beq.w	800f1ac <_printf_i+0x1c4>
 800f00a:	2f58      	cmp	r7, #88	@ 0x58
 800f00c:	f000 80b8 	beq.w	800f180 <_printf_i+0x198>
 800f010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f018:	e03a      	b.n	800f090 <_printf_i+0xa8>
 800f01a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f01e:	2b15      	cmp	r3, #21
 800f020:	d8f6      	bhi.n	800f010 <_printf_i+0x28>
 800f022:	a101      	add	r1, pc, #4	@ (adr r1, 800f028 <_printf_i+0x40>)
 800f024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f028:	0800f081 	.word	0x0800f081
 800f02c:	0800f095 	.word	0x0800f095
 800f030:	0800f011 	.word	0x0800f011
 800f034:	0800f011 	.word	0x0800f011
 800f038:	0800f011 	.word	0x0800f011
 800f03c:	0800f011 	.word	0x0800f011
 800f040:	0800f095 	.word	0x0800f095
 800f044:	0800f011 	.word	0x0800f011
 800f048:	0800f011 	.word	0x0800f011
 800f04c:	0800f011 	.word	0x0800f011
 800f050:	0800f011 	.word	0x0800f011
 800f054:	0800f193 	.word	0x0800f193
 800f058:	0800f0bf 	.word	0x0800f0bf
 800f05c:	0800f14d 	.word	0x0800f14d
 800f060:	0800f011 	.word	0x0800f011
 800f064:	0800f011 	.word	0x0800f011
 800f068:	0800f1b5 	.word	0x0800f1b5
 800f06c:	0800f011 	.word	0x0800f011
 800f070:	0800f0bf 	.word	0x0800f0bf
 800f074:	0800f011 	.word	0x0800f011
 800f078:	0800f011 	.word	0x0800f011
 800f07c:	0800f155 	.word	0x0800f155
 800f080:	6833      	ldr	r3, [r6, #0]
 800f082:	1d1a      	adds	r2, r3, #4
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6032      	str	r2, [r6, #0]
 800f088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f08c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f090:	2301      	movs	r3, #1
 800f092:	e09c      	b.n	800f1ce <_printf_i+0x1e6>
 800f094:	6833      	ldr	r3, [r6, #0]
 800f096:	6820      	ldr	r0, [r4, #0]
 800f098:	1d19      	adds	r1, r3, #4
 800f09a:	6031      	str	r1, [r6, #0]
 800f09c:	0606      	lsls	r6, r0, #24
 800f09e:	d501      	bpl.n	800f0a4 <_printf_i+0xbc>
 800f0a0:	681d      	ldr	r5, [r3, #0]
 800f0a2:	e003      	b.n	800f0ac <_printf_i+0xc4>
 800f0a4:	0645      	lsls	r5, r0, #25
 800f0a6:	d5fb      	bpl.n	800f0a0 <_printf_i+0xb8>
 800f0a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0ac:	2d00      	cmp	r5, #0
 800f0ae:	da03      	bge.n	800f0b8 <_printf_i+0xd0>
 800f0b0:	232d      	movs	r3, #45	@ 0x2d
 800f0b2:	426d      	negs	r5, r5
 800f0b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0b8:	4858      	ldr	r0, [pc, #352]	@ (800f21c <_printf_i+0x234>)
 800f0ba:	230a      	movs	r3, #10
 800f0bc:	e011      	b.n	800f0e2 <_printf_i+0xfa>
 800f0be:	6821      	ldr	r1, [r4, #0]
 800f0c0:	6833      	ldr	r3, [r6, #0]
 800f0c2:	0608      	lsls	r0, r1, #24
 800f0c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0c8:	d402      	bmi.n	800f0d0 <_printf_i+0xe8>
 800f0ca:	0649      	lsls	r1, r1, #25
 800f0cc:	bf48      	it	mi
 800f0ce:	b2ad      	uxthmi	r5, r5
 800f0d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0d2:	6033      	str	r3, [r6, #0]
 800f0d4:	4851      	ldr	r0, [pc, #324]	@ (800f21c <_printf_i+0x234>)
 800f0d6:	bf14      	ite	ne
 800f0d8:	230a      	movne	r3, #10
 800f0da:	2308      	moveq	r3, #8
 800f0dc:	2100      	movs	r1, #0
 800f0de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0e2:	6866      	ldr	r6, [r4, #4]
 800f0e4:	2e00      	cmp	r6, #0
 800f0e6:	60a6      	str	r6, [r4, #8]
 800f0e8:	db05      	blt.n	800f0f6 <_printf_i+0x10e>
 800f0ea:	6821      	ldr	r1, [r4, #0]
 800f0ec:	432e      	orrs	r6, r5
 800f0ee:	f021 0104 	bic.w	r1, r1, #4
 800f0f2:	6021      	str	r1, [r4, #0]
 800f0f4:	d04b      	beq.n	800f18e <_printf_i+0x1a6>
 800f0f6:	4616      	mov	r6, r2
 800f0f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0fc:	fb03 5711 	mls	r7, r3, r1, r5
 800f100:	5dc7      	ldrb	r7, [r0, r7]
 800f102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f106:	462f      	mov	r7, r5
 800f108:	460d      	mov	r5, r1
 800f10a:	42bb      	cmp	r3, r7
 800f10c:	d9f4      	bls.n	800f0f8 <_printf_i+0x110>
 800f10e:	2b08      	cmp	r3, #8
 800f110:	d10b      	bne.n	800f12a <_printf_i+0x142>
 800f112:	6823      	ldr	r3, [r4, #0]
 800f114:	07df      	lsls	r7, r3, #31
 800f116:	d508      	bpl.n	800f12a <_printf_i+0x142>
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	6861      	ldr	r1, [r4, #4]
 800f11c:	4299      	cmp	r1, r3
 800f11e:	bfde      	ittt	le
 800f120:	2330      	movle	r3, #48	@ 0x30
 800f122:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f12a:	1b92      	subs	r2, r2, r6
 800f12c:	6122      	str	r2, [r4, #16]
 800f12e:	464b      	mov	r3, r9
 800f130:	aa03      	add	r2, sp, #12
 800f132:	4621      	mov	r1, r4
 800f134:	4640      	mov	r0, r8
 800f136:	f8cd a000 	str.w	sl, [sp]
 800f13a:	f7ff fee3 	bl	800ef04 <_printf_common>
 800f13e:	3001      	adds	r0, #1
 800f140:	d14a      	bne.n	800f1d8 <_printf_i+0x1f0>
 800f142:	f04f 30ff 	mov.w	r0, #4294967295
 800f146:	b004      	add	sp, #16
 800f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	f043 0320 	orr.w	r3, r3, #32
 800f152:	6023      	str	r3, [r4, #0]
 800f154:	2778      	movs	r7, #120	@ 0x78
 800f156:	4832      	ldr	r0, [pc, #200]	@ (800f220 <_printf_i+0x238>)
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f15e:	061f      	lsls	r7, r3, #24
 800f160:	6831      	ldr	r1, [r6, #0]
 800f162:	f851 5b04 	ldr.w	r5, [r1], #4
 800f166:	d402      	bmi.n	800f16e <_printf_i+0x186>
 800f168:	065f      	lsls	r7, r3, #25
 800f16a:	bf48      	it	mi
 800f16c:	b2ad      	uxthmi	r5, r5
 800f16e:	6031      	str	r1, [r6, #0]
 800f170:	07d9      	lsls	r1, r3, #31
 800f172:	bf44      	itt	mi
 800f174:	f043 0320 	orrmi.w	r3, r3, #32
 800f178:	6023      	strmi	r3, [r4, #0]
 800f17a:	b11d      	cbz	r5, 800f184 <_printf_i+0x19c>
 800f17c:	2310      	movs	r3, #16
 800f17e:	e7ad      	b.n	800f0dc <_printf_i+0xf4>
 800f180:	4826      	ldr	r0, [pc, #152]	@ (800f21c <_printf_i+0x234>)
 800f182:	e7e9      	b.n	800f158 <_printf_i+0x170>
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	f023 0320 	bic.w	r3, r3, #32
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	e7f6      	b.n	800f17c <_printf_i+0x194>
 800f18e:	4616      	mov	r6, r2
 800f190:	e7bd      	b.n	800f10e <_printf_i+0x126>
 800f192:	6833      	ldr	r3, [r6, #0]
 800f194:	6825      	ldr	r5, [r4, #0]
 800f196:	1d18      	adds	r0, r3, #4
 800f198:	6961      	ldr	r1, [r4, #20]
 800f19a:	6030      	str	r0, [r6, #0]
 800f19c:	062e      	lsls	r6, r5, #24
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	d501      	bpl.n	800f1a6 <_printf_i+0x1be>
 800f1a2:	6019      	str	r1, [r3, #0]
 800f1a4:	e002      	b.n	800f1ac <_printf_i+0x1c4>
 800f1a6:	0668      	lsls	r0, r5, #25
 800f1a8:	d5fb      	bpl.n	800f1a2 <_printf_i+0x1ba>
 800f1aa:	8019      	strh	r1, [r3, #0]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	4616      	mov	r6, r2
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	e7bc      	b.n	800f12e <_printf_i+0x146>
 800f1b4:	6833      	ldr	r3, [r6, #0]
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	6032      	str	r2, [r6, #0]
 800f1bc:	681e      	ldr	r6, [r3, #0]
 800f1be:	6862      	ldr	r2, [r4, #4]
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	f000 fcf5 	bl	800fbb0 <memchr>
 800f1c6:	b108      	cbz	r0, 800f1cc <_printf_i+0x1e4>
 800f1c8:	1b80      	subs	r0, r0, r6
 800f1ca:	6060      	str	r0, [r4, #4]
 800f1cc:	6863      	ldr	r3, [r4, #4]
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1d6:	e7aa      	b.n	800f12e <_printf_i+0x146>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	4632      	mov	r2, r6
 800f1dc:	4649      	mov	r1, r9
 800f1de:	4640      	mov	r0, r8
 800f1e0:	47d0      	blx	sl
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	d0ad      	beq.n	800f142 <_printf_i+0x15a>
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	079b      	lsls	r3, r3, #30
 800f1ea:	d413      	bmi.n	800f214 <_printf_i+0x22c>
 800f1ec:	68e0      	ldr	r0, [r4, #12]
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	4298      	cmp	r0, r3
 800f1f2:	bfb8      	it	lt
 800f1f4:	4618      	movlt	r0, r3
 800f1f6:	e7a6      	b.n	800f146 <_printf_i+0x15e>
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	4632      	mov	r2, r6
 800f1fc:	4649      	mov	r1, r9
 800f1fe:	4640      	mov	r0, r8
 800f200:	47d0      	blx	sl
 800f202:	3001      	adds	r0, #1
 800f204:	d09d      	beq.n	800f142 <_printf_i+0x15a>
 800f206:	3501      	adds	r5, #1
 800f208:	68e3      	ldr	r3, [r4, #12]
 800f20a:	9903      	ldr	r1, [sp, #12]
 800f20c:	1a5b      	subs	r3, r3, r1
 800f20e:	42ab      	cmp	r3, r5
 800f210:	dcf2      	bgt.n	800f1f8 <_printf_i+0x210>
 800f212:	e7eb      	b.n	800f1ec <_printf_i+0x204>
 800f214:	2500      	movs	r5, #0
 800f216:	f104 0619 	add.w	r6, r4, #25
 800f21a:	e7f5      	b.n	800f208 <_printf_i+0x220>
 800f21c:	080309b2 	.word	0x080309b2
 800f220:	080309c3 	.word	0x080309c3

0800f224 <_scanf_float>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	b087      	sub	sp, #28
 800f22a:	4691      	mov	r9, r2
 800f22c:	4680      	mov	r8, r0
 800f22e:	460c      	mov	r4, r1
 800f230:	9303      	str	r3, [sp, #12]
 800f232:	688b      	ldr	r3, [r1, #8]
 800f234:	1e5a      	subs	r2, r3, #1
 800f236:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f23a:	460a      	mov	r2, r1
 800f23c:	bf89      	itett	hi
 800f23e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f242:	f04f 0b00 	movls.w	fp, #0
 800f246:	eb03 0b05 	addhi.w	fp, r3, r5
 800f24a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f24e:	f04f 0500 	mov.w	r5, #0
 800f252:	bf88      	it	hi
 800f254:	608b      	strhi	r3, [r1, #8]
 800f256:	680b      	ldr	r3, [r1, #0]
 800f258:	46aa      	mov	sl, r5
 800f25a:	462f      	mov	r7, r5
 800f25c:	9502      	str	r5, [sp, #8]
 800f25e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f262:	f842 3b1c 	str.w	r3, [r2], #28
 800f266:	4616      	mov	r6, r2
 800f268:	9201      	str	r2, [sp, #4]
 800f26a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f26e:	68a2      	ldr	r2, [r4, #8]
 800f270:	b15a      	cbz	r2, 800f28a <_scanf_float+0x66>
 800f272:	f8d9 3000 	ldr.w	r3, [r9]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	2b4e      	cmp	r3, #78	@ 0x4e
 800f27a:	d863      	bhi.n	800f344 <_scanf_float+0x120>
 800f27c:	2b40      	cmp	r3, #64	@ 0x40
 800f27e:	d83b      	bhi.n	800f2f8 <_scanf_float+0xd4>
 800f280:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f284:	b2c8      	uxtb	r0, r1
 800f286:	280e      	cmp	r0, #14
 800f288:	d939      	bls.n	800f2fe <_scanf_float+0xda>
 800f28a:	b11f      	cbz	r7, 800f294 <_scanf_float+0x70>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f292:	6023      	str	r3, [r4, #0]
 800f294:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f298:	f1ba 0f01 	cmp.w	sl, #1
 800f29c:	f200 8115 	bhi.w	800f4ca <_scanf_float+0x2a6>
 800f2a0:	9b01      	ldr	r3, [sp, #4]
 800f2a2:	429e      	cmp	r6, r3
 800f2a4:	f200 8106 	bhi.w	800f4b4 <_scanf_float+0x290>
 800f2a8:	2001      	movs	r0, #1
 800f2aa:	b007      	add	sp, #28
 800f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f2b4:	2a0d      	cmp	r2, #13
 800f2b6:	d8e8      	bhi.n	800f28a <_scanf_float+0x66>
 800f2b8:	a101      	add	r1, pc, #4	@ (adr r1, 800f2c0 <_scanf_float+0x9c>)
 800f2ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f409 	.word	0x0800f409
 800f2c4:	0800f28b 	.word	0x0800f28b
 800f2c8:	0800f28b 	.word	0x0800f28b
 800f2cc:	0800f28b 	.word	0x0800f28b
 800f2d0:	0800f465 	.word	0x0800f465
 800f2d4:	0800f43f 	.word	0x0800f43f
 800f2d8:	0800f28b 	.word	0x0800f28b
 800f2dc:	0800f28b 	.word	0x0800f28b
 800f2e0:	0800f417 	.word	0x0800f417
 800f2e4:	0800f28b 	.word	0x0800f28b
 800f2e8:	0800f28b 	.word	0x0800f28b
 800f2ec:	0800f28b 	.word	0x0800f28b
 800f2f0:	0800f28b 	.word	0x0800f28b
 800f2f4:	0800f3d3 	.word	0x0800f3d3
 800f2f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f2fc:	e7da      	b.n	800f2b4 <_scanf_float+0x90>
 800f2fe:	290e      	cmp	r1, #14
 800f300:	d8c3      	bhi.n	800f28a <_scanf_float+0x66>
 800f302:	a001      	add	r0, pc, #4	@ (adr r0, 800f308 <_scanf_float+0xe4>)
 800f304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f308:	0800f3c3 	.word	0x0800f3c3
 800f30c:	0800f28b 	.word	0x0800f28b
 800f310:	0800f3c3 	.word	0x0800f3c3
 800f314:	0800f453 	.word	0x0800f453
 800f318:	0800f28b 	.word	0x0800f28b
 800f31c:	0800f365 	.word	0x0800f365
 800f320:	0800f3a9 	.word	0x0800f3a9
 800f324:	0800f3a9 	.word	0x0800f3a9
 800f328:	0800f3a9 	.word	0x0800f3a9
 800f32c:	0800f3a9 	.word	0x0800f3a9
 800f330:	0800f3a9 	.word	0x0800f3a9
 800f334:	0800f3a9 	.word	0x0800f3a9
 800f338:	0800f3a9 	.word	0x0800f3a9
 800f33c:	0800f3a9 	.word	0x0800f3a9
 800f340:	0800f3a9 	.word	0x0800f3a9
 800f344:	2b6e      	cmp	r3, #110	@ 0x6e
 800f346:	d809      	bhi.n	800f35c <_scanf_float+0x138>
 800f348:	2b60      	cmp	r3, #96	@ 0x60
 800f34a:	d8b1      	bhi.n	800f2b0 <_scanf_float+0x8c>
 800f34c:	2b54      	cmp	r3, #84	@ 0x54
 800f34e:	d07b      	beq.n	800f448 <_scanf_float+0x224>
 800f350:	2b59      	cmp	r3, #89	@ 0x59
 800f352:	d19a      	bne.n	800f28a <_scanf_float+0x66>
 800f354:	2d07      	cmp	r5, #7
 800f356:	d198      	bne.n	800f28a <_scanf_float+0x66>
 800f358:	2508      	movs	r5, #8
 800f35a:	e02f      	b.n	800f3bc <_scanf_float+0x198>
 800f35c:	2b74      	cmp	r3, #116	@ 0x74
 800f35e:	d073      	beq.n	800f448 <_scanf_float+0x224>
 800f360:	2b79      	cmp	r3, #121	@ 0x79
 800f362:	e7f6      	b.n	800f352 <_scanf_float+0x12e>
 800f364:	6821      	ldr	r1, [r4, #0]
 800f366:	05c8      	lsls	r0, r1, #23
 800f368:	d51e      	bpl.n	800f3a8 <_scanf_float+0x184>
 800f36a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f36e:	3701      	adds	r7, #1
 800f370:	6021      	str	r1, [r4, #0]
 800f372:	f1bb 0f00 	cmp.w	fp, #0
 800f376:	d003      	beq.n	800f380 <_scanf_float+0x15c>
 800f378:	3201      	adds	r2, #1
 800f37a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f37e:	60a2      	str	r2, [r4, #8]
 800f380:	68a3      	ldr	r3, [r4, #8]
 800f382:	3b01      	subs	r3, #1
 800f384:	60a3      	str	r3, [r4, #8]
 800f386:	6923      	ldr	r3, [r4, #16]
 800f388:	3301      	adds	r3, #1
 800f38a:	6123      	str	r3, [r4, #16]
 800f38c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f390:	3b01      	subs	r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	f8c9 3004 	str.w	r3, [r9, #4]
 800f398:	f340 8083 	ble.w	800f4a2 <_scanf_float+0x27e>
 800f39c:	f8d9 3000 	ldr.w	r3, [r9]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	f8c9 3000 	str.w	r3, [r9]
 800f3a6:	e762      	b.n	800f26e <_scanf_float+0x4a>
 800f3a8:	eb1a 0105 	adds.w	r1, sl, r5
 800f3ac:	f47f af6d 	bne.w	800f28a <_scanf_float+0x66>
 800f3b0:	6822      	ldr	r2, [r4, #0]
 800f3b2:	460d      	mov	r5, r1
 800f3b4:	468a      	mov	sl, r1
 800f3b6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f3ba:	6022      	str	r2, [r4, #0]
 800f3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800f3c0:	e7de      	b.n	800f380 <_scanf_float+0x15c>
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	0610      	lsls	r0, r2, #24
 800f3c6:	f57f af60 	bpl.w	800f28a <_scanf_float+0x66>
 800f3ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f3ce:	6022      	str	r2, [r4, #0]
 800f3d0:	e7f4      	b.n	800f3bc <_scanf_float+0x198>
 800f3d2:	f1ba 0f00 	cmp.w	sl, #0
 800f3d6:	d10c      	bne.n	800f3f2 <_scanf_float+0x1ce>
 800f3d8:	b977      	cbnz	r7, 800f3f8 <_scanf_float+0x1d4>
 800f3da:	6822      	ldr	r2, [r4, #0]
 800f3dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f3e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f3e4:	d108      	bne.n	800f3f8 <_scanf_float+0x1d4>
 800f3e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3ea:	f04f 0a01 	mov.w	sl, #1
 800f3ee:	6022      	str	r2, [r4, #0]
 800f3f0:	e7e4      	b.n	800f3bc <_scanf_float+0x198>
 800f3f2:	f1ba 0f02 	cmp.w	sl, #2
 800f3f6:	d051      	beq.n	800f49c <_scanf_float+0x278>
 800f3f8:	2d01      	cmp	r5, #1
 800f3fa:	d002      	beq.n	800f402 <_scanf_float+0x1de>
 800f3fc:	2d04      	cmp	r5, #4
 800f3fe:	f47f af44 	bne.w	800f28a <_scanf_float+0x66>
 800f402:	3501      	adds	r5, #1
 800f404:	b2ed      	uxtb	r5, r5
 800f406:	e7d9      	b.n	800f3bc <_scanf_float+0x198>
 800f408:	f1ba 0f01 	cmp.w	sl, #1
 800f40c:	f47f af3d 	bne.w	800f28a <_scanf_float+0x66>
 800f410:	f04f 0a02 	mov.w	sl, #2
 800f414:	e7d2      	b.n	800f3bc <_scanf_float+0x198>
 800f416:	b975      	cbnz	r5, 800f436 <_scanf_float+0x212>
 800f418:	2f00      	cmp	r7, #0
 800f41a:	f47f af37 	bne.w	800f28c <_scanf_float+0x68>
 800f41e:	6822      	ldr	r2, [r4, #0]
 800f420:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f424:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f428:	f040 8103 	bne.w	800f632 <_scanf_float+0x40e>
 800f42c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f430:	2501      	movs	r5, #1
 800f432:	6022      	str	r2, [r4, #0]
 800f434:	e7c2      	b.n	800f3bc <_scanf_float+0x198>
 800f436:	2d03      	cmp	r5, #3
 800f438:	d0e3      	beq.n	800f402 <_scanf_float+0x1de>
 800f43a:	2d05      	cmp	r5, #5
 800f43c:	e7df      	b.n	800f3fe <_scanf_float+0x1da>
 800f43e:	2d02      	cmp	r5, #2
 800f440:	f47f af23 	bne.w	800f28a <_scanf_float+0x66>
 800f444:	2503      	movs	r5, #3
 800f446:	e7b9      	b.n	800f3bc <_scanf_float+0x198>
 800f448:	2d06      	cmp	r5, #6
 800f44a:	f47f af1e 	bne.w	800f28a <_scanf_float+0x66>
 800f44e:	2507      	movs	r5, #7
 800f450:	e7b4      	b.n	800f3bc <_scanf_float+0x198>
 800f452:	6822      	ldr	r2, [r4, #0]
 800f454:	0591      	lsls	r1, r2, #22
 800f456:	f57f af18 	bpl.w	800f28a <_scanf_float+0x66>
 800f45a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f45e:	9702      	str	r7, [sp, #8]
 800f460:	6022      	str	r2, [r4, #0]
 800f462:	e7ab      	b.n	800f3bc <_scanf_float+0x198>
 800f464:	6822      	ldr	r2, [r4, #0]
 800f466:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f46a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f46e:	d005      	beq.n	800f47c <_scanf_float+0x258>
 800f470:	0550      	lsls	r0, r2, #21
 800f472:	f57f af0a 	bpl.w	800f28a <_scanf_float+0x66>
 800f476:	2f00      	cmp	r7, #0
 800f478:	f000 80db 	beq.w	800f632 <_scanf_float+0x40e>
 800f47c:	0591      	lsls	r1, r2, #22
 800f47e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f482:	bf58      	it	pl
 800f484:	9902      	ldrpl	r1, [sp, #8]
 800f486:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f48a:	bf58      	it	pl
 800f48c:	1a79      	subpl	r1, r7, r1
 800f48e:	6022      	str	r2, [r4, #0]
 800f490:	f04f 0700 	mov.w	r7, #0
 800f494:	bf58      	it	pl
 800f496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f49a:	e78f      	b.n	800f3bc <_scanf_float+0x198>
 800f49c:	f04f 0a03 	mov.w	sl, #3
 800f4a0:	e78c      	b.n	800f3bc <_scanf_float+0x198>
 800f4a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	4640      	mov	r0, r8
 800f4aa:	4798      	blx	r3
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	f43f aede 	beq.w	800f26e <_scanf_float+0x4a>
 800f4b2:	e6ea      	b.n	800f28a <_scanf_float+0x66>
 800f4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4b8:	464a      	mov	r2, r9
 800f4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4be:	4640      	mov	r0, r8
 800f4c0:	4798      	blx	r3
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	6123      	str	r3, [r4, #16]
 800f4c8:	e6ea      	b.n	800f2a0 <_scanf_float+0x7c>
 800f4ca:	1e6b      	subs	r3, r5, #1
 800f4cc:	2b06      	cmp	r3, #6
 800f4ce:	d824      	bhi.n	800f51a <_scanf_float+0x2f6>
 800f4d0:	2d02      	cmp	r5, #2
 800f4d2:	d836      	bhi.n	800f542 <_scanf_float+0x31e>
 800f4d4:	9b01      	ldr	r3, [sp, #4]
 800f4d6:	429e      	cmp	r6, r3
 800f4d8:	f67f aee6 	bls.w	800f2a8 <_scanf_float+0x84>
 800f4dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4e0:	464a      	mov	r2, r9
 800f4e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4e6:	4640      	mov	r0, r8
 800f4e8:	4798      	blx	r3
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	6123      	str	r3, [r4, #16]
 800f4f0:	e7f0      	b.n	800f4d4 <_scanf_float+0x2b0>
 800f4f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4f6:	464a      	mov	r2, r9
 800f4f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	4798      	blx	r3
 800f500:	6923      	ldr	r3, [r4, #16]
 800f502:	3b01      	subs	r3, #1
 800f504:	6123      	str	r3, [r4, #16]
 800f506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f50a:	fa5f fa8a 	uxtb.w	sl, sl
 800f50e:	f1ba 0f02 	cmp.w	sl, #2
 800f512:	d1ee      	bne.n	800f4f2 <_scanf_float+0x2ce>
 800f514:	3d03      	subs	r5, #3
 800f516:	b2ed      	uxtb	r5, r5
 800f518:	1b76      	subs	r6, r6, r5
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	05da      	lsls	r2, r3, #23
 800f51e:	d52f      	bpl.n	800f580 <_scanf_float+0x35c>
 800f520:	055b      	lsls	r3, r3, #21
 800f522:	d511      	bpl.n	800f548 <_scanf_float+0x324>
 800f524:	9b01      	ldr	r3, [sp, #4]
 800f526:	429e      	cmp	r6, r3
 800f528:	f67f aebe 	bls.w	800f2a8 <_scanf_float+0x84>
 800f52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f530:	464a      	mov	r2, r9
 800f532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f536:	4640      	mov	r0, r8
 800f538:	4798      	blx	r3
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	6123      	str	r3, [r4, #16]
 800f540:	e7f0      	b.n	800f524 <_scanf_float+0x300>
 800f542:	46aa      	mov	sl, r5
 800f544:	46b3      	mov	fp, r6
 800f546:	e7de      	b.n	800f506 <_scanf_float+0x2e2>
 800f548:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f54c:	1e75      	subs	r5, r6, #1
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	2965      	cmp	r1, #101	@ 0x65
 800f552:	f103 33ff 	add.w	r3, r3, #4294967295
 800f556:	6123      	str	r3, [r4, #16]
 800f558:	d00c      	beq.n	800f574 <_scanf_float+0x350>
 800f55a:	2945      	cmp	r1, #69	@ 0x45
 800f55c:	d00a      	beq.n	800f574 <_scanf_float+0x350>
 800f55e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f562:	464a      	mov	r2, r9
 800f564:	4640      	mov	r0, r8
 800f566:	1eb5      	subs	r5, r6, #2
 800f568:	4798      	blx	r3
 800f56a:	6923      	ldr	r3, [r4, #16]
 800f56c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f570:	3b01      	subs	r3, #1
 800f572:	6123      	str	r3, [r4, #16]
 800f574:	462e      	mov	r6, r5
 800f576:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f57a:	464a      	mov	r2, r9
 800f57c:	4640      	mov	r0, r8
 800f57e:	4798      	blx	r3
 800f580:	6822      	ldr	r2, [r4, #0]
 800f582:	f012 0210 	ands.w	r2, r2, #16
 800f586:	d001      	beq.n	800f58c <_scanf_float+0x368>
 800f588:	2000      	movs	r0, #0
 800f58a:	e68e      	b.n	800f2aa <_scanf_float+0x86>
 800f58c:	7032      	strb	r2, [r6, #0]
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f598:	d125      	bne.n	800f5e6 <_scanf_float+0x3c2>
 800f59a:	9b02      	ldr	r3, [sp, #8]
 800f59c:	429f      	cmp	r7, r3
 800f59e:	d00a      	beq.n	800f5b6 <_scanf_float+0x392>
 800f5a0:	1bda      	subs	r2, r3, r7
 800f5a2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f5a6:	4924      	ldr	r1, [pc, #144]	@ (800f638 <_scanf_float+0x414>)
 800f5a8:	429e      	cmp	r6, r3
 800f5aa:	bf28      	it	cs
 800f5ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f000 f977 	bl	800f8a4 <siprintf>
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	9901      	ldr	r1, [sp, #4]
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	f002 fc7c 	bl	8011eb8 <_strtod_r>
 800f5c0:	6821      	ldr	r1, [r4, #0]
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	f011 0f02 	tst.w	r1, #2
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	ec57 6b10 	vmov	r6, r7, d0
 800f5ce:	f103 0204 	add.w	r2, r3, #4
 800f5d2:	d015      	beq.n	800f600 <_scanf_float+0x3dc>
 800f5d4:	9903      	ldr	r1, [sp, #12]
 800f5d6:	600a      	str	r2, [r1, #0]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	e9c3 6700 	strd	r6, r7, [r3]
 800f5de:	68e3      	ldr	r3, [r4, #12]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	60e3      	str	r3, [r4, #12]
 800f5e4:	e7d0      	b.n	800f588 <_scanf_float+0x364>
 800f5e6:	9b04      	ldr	r3, [sp, #16]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d0e4      	beq.n	800f5b6 <_scanf_float+0x392>
 800f5ec:	9905      	ldr	r1, [sp, #20]
 800f5ee:	230a      	movs	r3, #10
 800f5f0:	4640      	mov	r0, r8
 800f5f2:	3101      	adds	r1, #1
 800f5f4:	f002 fce0 	bl	8011fb8 <_strtol_r>
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	9e05      	ldr	r6, [sp, #20]
 800f5fc:	1ac2      	subs	r2, r0, r3
 800f5fe:	e7d0      	b.n	800f5a2 <_scanf_float+0x37e>
 800f600:	f011 0f04 	tst.w	r1, #4
 800f604:	9903      	ldr	r1, [sp, #12]
 800f606:	600a      	str	r2, [r1, #0]
 800f608:	d1e6      	bne.n	800f5d8 <_scanf_float+0x3b4>
 800f60a:	681d      	ldr	r5, [r3, #0]
 800f60c:	4632      	mov	r2, r6
 800f60e:	463b      	mov	r3, r7
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f1 fa8e 	bl	8000b34 <__aeabi_dcmpun>
 800f618:	b128      	cbz	r0, 800f626 <_scanf_float+0x402>
 800f61a:	4808      	ldr	r0, [pc, #32]	@ (800f63c <_scanf_float+0x418>)
 800f61c:	f000 fae4 	bl	800fbe8 <nanf>
 800f620:	ed85 0a00 	vstr	s0, [r5]
 800f624:	e7db      	b.n	800f5de <_scanf_float+0x3ba>
 800f626:	4630      	mov	r0, r6
 800f628:	4639      	mov	r1, r7
 800f62a:	f7f1 fae1 	bl	8000bf0 <__aeabi_d2f>
 800f62e:	6028      	str	r0, [r5, #0]
 800f630:	e7d5      	b.n	800f5de <_scanf_float+0x3ba>
 800f632:	2700      	movs	r7, #0
 800f634:	e62e      	b.n	800f294 <_scanf_float+0x70>
 800f636:	bf00      	nop
 800f638:	080309d4 	.word	0x080309d4
 800f63c:	08030b15 	.word	0x08030b15

0800f640 <std>:
 800f640:	2300      	movs	r3, #0
 800f642:	b510      	push	{r4, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	6083      	str	r3, [r0, #8]
 800f648:	8181      	strh	r1, [r0, #12]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6643      	str	r3, [r0, #100]	@ 0x64
 800f64e:	81c2      	strh	r2, [r0, #14]
 800f650:	2208      	movs	r2, #8
 800f652:	6183      	str	r3, [r0, #24]
 800f654:	e9c0 3300 	strd	r3, r3, [r0]
 800f658:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f65c:	305c      	adds	r0, #92	@ 0x5c
 800f65e:	f000 fa1b 	bl	800fa98 <memset>
 800f662:	4b0d      	ldr	r3, [pc, #52]	@ (800f698 <std+0x58>)
 800f664:	6224      	str	r4, [r4, #32]
 800f666:	6263      	str	r3, [r4, #36]	@ 0x24
 800f668:	4b0c      	ldr	r3, [pc, #48]	@ (800f69c <std+0x5c>)
 800f66a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f66c:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a0 <std+0x60>)
 800f66e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f670:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a4 <std+0x64>)
 800f672:	6323      	str	r3, [r4, #48]	@ 0x30
 800f674:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a8 <std+0x68>)
 800f676:	429c      	cmp	r4, r3
 800f678:	d006      	beq.n	800f688 <std+0x48>
 800f67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f67e:	4294      	cmp	r4, r2
 800f680:	d002      	beq.n	800f688 <std+0x48>
 800f682:	33d0      	adds	r3, #208	@ 0xd0
 800f684:	429c      	cmp	r4, r3
 800f686:	d105      	bne.n	800f694 <std+0x54>
 800f688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f690:	f7f3 b84a 	b.w	8002728 <__retarget_lock_init_recursive>
 800f694:	bd10      	pop	{r4, pc}
 800f696:	bf00      	nop
 800f698:	0800f8e9 	.word	0x0800f8e9
 800f69c:	0800f90b 	.word	0x0800f90b
 800f6a0:	0800f943 	.word	0x0800f943
 800f6a4:	0800f967 	.word	0x0800f967
 800f6a8:	2000c5e4 	.word	0x2000c5e4

0800f6ac <stdio_exit_handler>:
 800f6ac:	4a02      	ldr	r2, [pc, #8]	@ (800f6b8 <stdio_exit_handler+0xc>)
 800f6ae:	4903      	ldr	r1, [pc, #12]	@ (800f6bc <stdio_exit_handler+0x10>)
 800f6b0:	4803      	ldr	r0, [pc, #12]	@ (800f6c0 <stdio_exit_handler+0x14>)
 800f6b2:	f000 b869 	b.w	800f788 <_fwalk_sglue>
 800f6b6:	bf00      	nop
 800f6b8:	2000000c 	.word	0x2000000c
 800f6bc:	080125f9 	.word	0x080125f9
 800f6c0:	2000001c 	.word	0x2000001c

0800f6c4 <cleanup_stdio>:
 800f6c4:	6841      	ldr	r1, [r0, #4]
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f8 <cleanup_stdio+0x34>)
 800f6c8:	4299      	cmp	r1, r3
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	d001      	beq.n	800f6d4 <cleanup_stdio+0x10>
 800f6d0:	f002 ff92 	bl	80125f8 <_fflush_r>
 800f6d4:	68a1      	ldr	r1, [r4, #8]
 800f6d6:	4b09      	ldr	r3, [pc, #36]	@ (800f6fc <cleanup_stdio+0x38>)
 800f6d8:	4299      	cmp	r1, r3
 800f6da:	d002      	beq.n	800f6e2 <cleanup_stdio+0x1e>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f002 ff8b 	bl	80125f8 <_fflush_r>
 800f6e2:	68e1      	ldr	r1, [r4, #12]
 800f6e4:	4b06      	ldr	r3, [pc, #24]	@ (800f700 <cleanup_stdio+0x3c>)
 800f6e6:	4299      	cmp	r1, r3
 800f6e8:	d004      	beq.n	800f6f4 <cleanup_stdio+0x30>
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f0:	f002 bf82 	b.w	80125f8 <_fflush_r>
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	bf00      	nop
 800f6f8:	2000c5e4 	.word	0x2000c5e4
 800f6fc:	2000c64c 	.word	0x2000c64c
 800f700:	2000c6b4 	.word	0x2000c6b4

0800f704 <global_stdio_init.part.0>:
 800f704:	b510      	push	{r4, lr}
 800f706:	4b0b      	ldr	r3, [pc, #44]	@ (800f734 <global_stdio_init.part.0+0x30>)
 800f708:	2104      	movs	r1, #4
 800f70a:	4c0b      	ldr	r4, [pc, #44]	@ (800f738 <global_stdio_init.part.0+0x34>)
 800f70c:	4a0b      	ldr	r2, [pc, #44]	@ (800f73c <global_stdio_init.part.0+0x38>)
 800f70e:	4620      	mov	r0, r4
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	2200      	movs	r2, #0
 800f714:	f7ff ff94 	bl	800f640 <std>
 800f718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f71c:	2201      	movs	r2, #1
 800f71e:	2109      	movs	r1, #9
 800f720:	f7ff ff8e 	bl	800f640 <std>
 800f724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f728:	2202      	movs	r2, #2
 800f72a:	2112      	movs	r1, #18
 800f72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f730:	f7ff bf86 	b.w	800f640 <std>
 800f734:	2000c71c 	.word	0x2000c71c
 800f738:	2000c5e4 	.word	0x2000c5e4
 800f73c:	0800f6ad 	.word	0x0800f6ad

0800f740 <__sfp_lock_acquire>:
 800f740:	4801      	ldr	r0, [pc, #4]	@ (800f748 <__sfp_lock_acquire+0x8>)
 800f742:	f7f3 b818 	b.w	8002776 <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	2000c5ac 	.word	0x2000c5ac

0800f74c <__sfp_lock_release>:
 800f74c:	4801      	ldr	r0, [pc, #4]	@ (800f754 <__sfp_lock_release+0x8>)
 800f74e:	f7f3 b827 	b.w	80027a0 <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	2000c5ac 	.word	0x2000c5ac

0800f758 <__sinit>:
 800f758:	b510      	push	{r4, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	f7ff fff0 	bl	800f740 <__sfp_lock_acquire>
 800f760:	6a23      	ldr	r3, [r4, #32]
 800f762:	b11b      	cbz	r3, 800f76c <__sinit+0x14>
 800f764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f768:	f7ff bff0 	b.w	800f74c <__sfp_lock_release>
 800f76c:	4b04      	ldr	r3, [pc, #16]	@ (800f780 <__sinit+0x28>)
 800f76e:	6223      	str	r3, [r4, #32]
 800f770:	4b04      	ldr	r3, [pc, #16]	@ (800f784 <__sinit+0x2c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1f5      	bne.n	800f764 <__sinit+0xc>
 800f778:	f7ff ffc4 	bl	800f704 <global_stdio_init.part.0>
 800f77c:	e7f2      	b.n	800f764 <__sinit+0xc>
 800f77e:	bf00      	nop
 800f780:	0800f6c5 	.word	0x0800f6c5
 800f784:	2000c71c 	.word	0x2000c71c

0800f788 <_fwalk_sglue>:
 800f788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f78c:	4607      	mov	r7, r0
 800f78e:	4688      	mov	r8, r1
 800f790:	4614      	mov	r4, r2
 800f792:	2600      	movs	r6, #0
 800f794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f798:	f1b9 0901 	subs.w	r9, r9, #1
 800f79c:	d505      	bpl.n	800f7aa <_fwalk_sglue+0x22>
 800f79e:	6824      	ldr	r4, [r4, #0]
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	d1f7      	bne.n	800f794 <_fwalk_sglue+0xc>
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7aa:	89ab      	ldrh	r3, [r5, #12]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d907      	bls.n	800f7c0 <_fwalk_sglue+0x38>
 800f7b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	d003      	beq.n	800f7c0 <_fwalk_sglue+0x38>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	47c0      	blx	r8
 800f7be:	4306      	orrs	r6, r0
 800f7c0:	3568      	adds	r5, #104	@ 0x68
 800f7c2:	e7e9      	b.n	800f798 <_fwalk_sglue+0x10>

0800f7c4 <iprintf>:
 800f7c4:	b40f      	push	{r0, r1, r2, r3}
 800f7c6:	b507      	push	{r0, r1, r2, lr}
 800f7c8:	4906      	ldr	r1, [pc, #24]	@ (800f7e4 <iprintf+0x20>)
 800f7ca:	ab04      	add	r3, sp, #16
 800f7cc:	6808      	ldr	r0, [r1, #0]
 800f7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d2:	6881      	ldr	r1, [r0, #8]
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	f002 fd73 	bl	80122c0 <_vfiprintf_r>
 800f7da:	b003      	add	sp, #12
 800f7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e0:	b004      	add	sp, #16
 800f7e2:	4770      	bx	lr
 800f7e4:	20000018 	.word	0x20000018

0800f7e8 <_puts_r>:
 800f7e8:	6a03      	ldr	r3, [r0, #32]
 800f7ea:	b570      	push	{r4, r5, r6, lr}
 800f7ec:	4605      	mov	r5, r0
 800f7ee:	460e      	mov	r6, r1
 800f7f0:	6884      	ldr	r4, [r0, #8]
 800f7f2:	b90b      	cbnz	r3, 800f7f8 <_puts_r+0x10>
 800f7f4:	f7ff ffb0 	bl	800f758 <__sinit>
 800f7f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7fa:	07db      	lsls	r3, r3, #31
 800f7fc:	d405      	bmi.n	800f80a <_puts_r+0x22>
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	0598      	lsls	r0, r3, #22
 800f802:	d402      	bmi.n	800f80a <_puts_r+0x22>
 800f804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f806:	f7f2 ffb6 	bl	8002776 <__retarget_lock_acquire_recursive>
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	0719      	lsls	r1, r3, #28
 800f80e:	d502      	bpl.n	800f816 <_puts_r+0x2e>
 800f810:	6923      	ldr	r3, [r4, #16]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d135      	bne.n	800f882 <_puts_r+0x9a>
 800f816:	4621      	mov	r1, r4
 800f818:	4628      	mov	r0, r5
 800f81a:	f000 f8e7 	bl	800f9ec <__swsetup_r>
 800f81e:	b380      	cbz	r0, 800f882 <_puts_r+0x9a>
 800f820:	f04f 35ff 	mov.w	r5, #4294967295
 800f824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f826:	07da      	lsls	r2, r3, #31
 800f828:	d405      	bmi.n	800f836 <_puts_r+0x4e>
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	059b      	lsls	r3, r3, #22
 800f82e:	d402      	bmi.n	800f836 <_puts_r+0x4e>
 800f830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f832:	f7f2 ffb5 	bl	80027a0 <__retarget_lock_release_recursive>
 800f836:	4628      	mov	r0, r5
 800f838:	bd70      	pop	{r4, r5, r6, pc}
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	da04      	bge.n	800f848 <_puts_r+0x60>
 800f83e:	69a2      	ldr	r2, [r4, #24]
 800f840:	429a      	cmp	r2, r3
 800f842:	dc17      	bgt.n	800f874 <_puts_r+0x8c>
 800f844:	290a      	cmp	r1, #10
 800f846:	d015      	beq.n	800f874 <_puts_r+0x8c>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	6022      	str	r2, [r4, #0]
 800f84e:	7019      	strb	r1, [r3, #0]
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f856:	3b01      	subs	r3, #1
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	2900      	cmp	r1, #0
 800f85c:	d1ed      	bne.n	800f83a <_puts_r+0x52>
 800f85e:	2b00      	cmp	r3, #0
 800f860:	da11      	bge.n	800f886 <_puts_r+0x9e>
 800f862:	4622      	mov	r2, r4
 800f864:	210a      	movs	r1, #10
 800f866:	4628      	mov	r0, r5
 800f868:	f000 f881 	bl	800f96e <__swbuf_r>
 800f86c:	3001      	adds	r0, #1
 800f86e:	d0d7      	beq.n	800f820 <_puts_r+0x38>
 800f870:	250a      	movs	r5, #10
 800f872:	e7d7      	b.n	800f824 <_puts_r+0x3c>
 800f874:	4622      	mov	r2, r4
 800f876:	4628      	mov	r0, r5
 800f878:	f000 f879 	bl	800f96e <__swbuf_r>
 800f87c:	3001      	adds	r0, #1
 800f87e:	d1e7      	bne.n	800f850 <_puts_r+0x68>
 800f880:	e7ce      	b.n	800f820 <_puts_r+0x38>
 800f882:	3e01      	subs	r6, #1
 800f884:	e7e4      	b.n	800f850 <_puts_r+0x68>
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	1c5a      	adds	r2, r3, #1
 800f88a:	6022      	str	r2, [r4, #0]
 800f88c:	220a      	movs	r2, #10
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	e7ee      	b.n	800f870 <_puts_r+0x88>
	...

0800f894 <puts>:
 800f894:	4b02      	ldr	r3, [pc, #8]	@ (800f8a0 <puts+0xc>)
 800f896:	4601      	mov	r1, r0
 800f898:	6818      	ldr	r0, [r3, #0]
 800f89a:	f7ff bfa5 	b.w	800f7e8 <_puts_r>
 800f89e:	bf00      	nop
 800f8a0:	20000018 	.word	0x20000018

0800f8a4 <siprintf>:
 800f8a4:	b40e      	push	{r1, r2, r3}
 800f8a6:	b510      	push	{r4, lr}
 800f8a8:	b09d      	sub	sp, #116	@ 0x74
 800f8aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f8ae:	2400      	movs	r4, #0
 800f8b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f8b2:	9002      	str	r0, [sp, #8]
 800f8b4:	9006      	str	r0, [sp, #24]
 800f8b6:	9107      	str	r1, [sp, #28]
 800f8b8:	9104      	str	r1, [sp, #16]
 800f8ba:	4809      	ldr	r0, [pc, #36]	@ (800f8e0 <siprintf+0x3c>)
 800f8bc:	4909      	ldr	r1, [pc, #36]	@ (800f8e4 <siprintf+0x40>)
 800f8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8c2:	9105      	str	r1, [sp, #20]
 800f8c4:	a902      	add	r1, sp, #8
 800f8c6:	6800      	ldr	r0, [r0, #0]
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f8cc:	f002 fbd2 	bl	8012074 <_svfiprintf_r>
 800f8d0:	9b02      	ldr	r3, [sp, #8]
 800f8d2:	701c      	strb	r4, [r3, #0]
 800f8d4:	b01d      	add	sp, #116	@ 0x74
 800f8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8da:	b003      	add	sp, #12
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	20000018 	.word	0x20000018
 800f8e4:	ffff0208 	.word	0xffff0208

0800f8e8 <__sread>:
 800f8e8:	b510      	push	{r4, lr}
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f0:	f000 f900 	bl	800faf4 <_read_r>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	bfab      	itete	ge
 800f8f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f8fc:	181b      	addge	r3, r3, r0
 800f8fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f902:	bfac      	ite	ge
 800f904:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f906:	81a3      	strhlt	r3, [r4, #12]
 800f908:	bd10      	pop	{r4, pc}

0800f90a <__swrite>:
 800f90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f90e:	461f      	mov	r7, r3
 800f910:	898b      	ldrh	r3, [r1, #12]
 800f912:	4605      	mov	r5, r0
 800f914:	460c      	mov	r4, r1
 800f916:	05db      	lsls	r3, r3, #23
 800f918:	4616      	mov	r6, r2
 800f91a:	d505      	bpl.n	800f928 <__swrite+0x1e>
 800f91c:	2302      	movs	r3, #2
 800f91e:	2200      	movs	r2, #0
 800f920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f924:	f000 f8d4 	bl	800fad0 <_lseek_r>
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	4632      	mov	r2, r6
 800f92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f930:	4628      	mov	r0, r5
 800f932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f936:	81a3      	strh	r3, [r4, #12]
 800f938:	463b      	mov	r3, r7
 800f93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f93e:	f000 b8fb 	b.w	800fb38 <_write_r>

0800f942 <__sseek>:
 800f942:	b510      	push	{r4, lr}
 800f944:	460c      	mov	r4, r1
 800f946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f94a:	f000 f8c1 	bl	800fad0 <_lseek_r>
 800f94e:	1c43      	adds	r3, r0, #1
 800f950:	89a3      	ldrh	r3, [r4, #12]
 800f952:	bf15      	itete	ne
 800f954:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f95a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f95e:	81a3      	strheq	r3, [r4, #12]
 800f960:	bf18      	it	ne
 800f962:	81a3      	strhne	r3, [r4, #12]
 800f964:	bd10      	pop	{r4, pc}

0800f966 <__sclose>:
 800f966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f96a:	f000 b8a1 	b.w	800fab0 <_close_r>

0800f96e <__swbuf_r>:
 800f96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f970:	460e      	mov	r6, r1
 800f972:	4614      	mov	r4, r2
 800f974:	4605      	mov	r5, r0
 800f976:	b118      	cbz	r0, 800f980 <__swbuf_r+0x12>
 800f978:	6a03      	ldr	r3, [r0, #32]
 800f97a:	b90b      	cbnz	r3, 800f980 <__swbuf_r+0x12>
 800f97c:	f7ff feec 	bl	800f758 <__sinit>
 800f980:	69a3      	ldr	r3, [r4, #24]
 800f982:	60a3      	str	r3, [r4, #8]
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	071a      	lsls	r2, r3, #28
 800f988:	d501      	bpl.n	800f98e <__swbuf_r+0x20>
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	b943      	cbnz	r3, 800f9a0 <__swbuf_r+0x32>
 800f98e:	4621      	mov	r1, r4
 800f990:	4628      	mov	r0, r5
 800f992:	f000 f82b 	bl	800f9ec <__swsetup_r>
 800f996:	b118      	cbz	r0, 800f9a0 <__swbuf_r+0x32>
 800f998:	f04f 37ff 	mov.w	r7, #4294967295
 800f99c:	4638      	mov	r0, r7
 800f99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	b2f6      	uxtb	r6, r6
 800f9a4:	6922      	ldr	r2, [r4, #16]
 800f9a6:	4637      	mov	r7, r6
 800f9a8:	1a98      	subs	r0, r3, r2
 800f9aa:	6963      	ldr	r3, [r4, #20]
 800f9ac:	4283      	cmp	r3, r0
 800f9ae:	dc05      	bgt.n	800f9bc <__swbuf_r+0x4e>
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f002 fe20 	bl	80125f8 <_fflush_r>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d1ed      	bne.n	800f998 <__swbuf_r+0x2a>
 800f9bc:	68a3      	ldr	r3, [r4, #8]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	60a3      	str	r3, [r4, #8]
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	1c5a      	adds	r2, r3, #1
 800f9c6:	6022      	str	r2, [r4, #0]
 800f9c8:	701e      	strb	r6, [r3, #0]
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	6962      	ldr	r2, [r4, #20]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d004      	beq.n	800f9dc <__swbuf_r+0x6e>
 800f9d2:	89a3      	ldrh	r3, [r4, #12]
 800f9d4:	07db      	lsls	r3, r3, #31
 800f9d6:	d5e1      	bpl.n	800f99c <__swbuf_r+0x2e>
 800f9d8:	2e0a      	cmp	r6, #10
 800f9da:	d1df      	bne.n	800f99c <__swbuf_r+0x2e>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f002 fe0a 	bl	80125f8 <_fflush_r>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d0d9      	beq.n	800f99c <__swbuf_r+0x2e>
 800f9e8:	e7d6      	b.n	800f998 <__swbuf_r+0x2a>
	...

0800f9ec <__swsetup_r>:
 800f9ec:	b538      	push	{r3, r4, r5, lr}
 800f9ee:	4b29      	ldr	r3, [pc, #164]	@ (800fa94 <__swsetup_r+0xa8>)
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	6818      	ldr	r0, [r3, #0]
 800f9f6:	b118      	cbz	r0, 800fa00 <__swsetup_r+0x14>
 800f9f8:	6a03      	ldr	r3, [r0, #32]
 800f9fa:	b90b      	cbnz	r3, 800fa00 <__swsetup_r+0x14>
 800f9fc:	f7ff feac 	bl	800f758 <__sinit>
 800fa00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa04:	0719      	lsls	r1, r3, #28
 800fa06:	d422      	bmi.n	800fa4e <__swsetup_r+0x62>
 800fa08:	06da      	lsls	r2, r3, #27
 800fa0a:	d407      	bmi.n	800fa1c <__swsetup_r+0x30>
 800fa0c:	2209      	movs	r2, #9
 800fa0e:	602a      	str	r2, [r5, #0]
 800fa10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa14:	f04f 30ff 	mov.w	r0, #4294967295
 800fa18:	81a3      	strh	r3, [r4, #12]
 800fa1a:	e033      	b.n	800fa84 <__swsetup_r+0x98>
 800fa1c:	0758      	lsls	r0, r3, #29
 800fa1e:	d512      	bpl.n	800fa46 <__swsetup_r+0x5a>
 800fa20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa22:	b141      	cbz	r1, 800fa36 <__swsetup_r+0x4a>
 800fa24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa28:	4299      	cmp	r1, r3
 800fa2a:	d002      	beq.n	800fa32 <__swsetup_r+0x46>
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f000 ff41 	bl	80108b4 <_free_r>
 800fa32:	2300      	movs	r3, #0
 800fa34:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa36:	89a3      	ldrh	r3, [r4, #12]
 800fa38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa3c:	81a3      	strh	r3, [r4, #12]
 800fa3e:	2300      	movs	r3, #0
 800fa40:	6063      	str	r3, [r4, #4]
 800fa42:	6923      	ldr	r3, [r4, #16]
 800fa44:	6023      	str	r3, [r4, #0]
 800fa46:	89a3      	ldrh	r3, [r4, #12]
 800fa48:	f043 0308 	orr.w	r3, r3, #8
 800fa4c:	81a3      	strh	r3, [r4, #12]
 800fa4e:	6923      	ldr	r3, [r4, #16]
 800fa50:	b94b      	cbnz	r3, 800fa66 <__swsetup_r+0x7a>
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa5c:	d003      	beq.n	800fa66 <__swsetup_r+0x7a>
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4628      	mov	r0, r5
 800fa62:	f002 fe16 	bl	8012692 <__smakebuf_r>
 800fa66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa6a:	f013 0201 	ands.w	r2, r3, #1
 800fa6e:	d00a      	beq.n	800fa86 <__swsetup_r+0x9a>
 800fa70:	2200      	movs	r2, #0
 800fa72:	60a2      	str	r2, [r4, #8]
 800fa74:	6962      	ldr	r2, [r4, #20]
 800fa76:	4252      	negs	r2, r2
 800fa78:	61a2      	str	r2, [r4, #24]
 800fa7a:	6922      	ldr	r2, [r4, #16]
 800fa7c:	b942      	cbnz	r2, 800fa90 <__swsetup_r+0xa4>
 800fa7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa82:	d1c5      	bne.n	800fa10 <__swsetup_r+0x24>
 800fa84:	bd38      	pop	{r3, r4, r5, pc}
 800fa86:	0799      	lsls	r1, r3, #30
 800fa88:	bf58      	it	pl
 800fa8a:	6962      	ldrpl	r2, [r4, #20]
 800fa8c:	60a2      	str	r2, [r4, #8]
 800fa8e:	e7f4      	b.n	800fa7a <__swsetup_r+0x8e>
 800fa90:	2000      	movs	r0, #0
 800fa92:	e7f7      	b.n	800fa84 <__swsetup_r+0x98>
 800fa94:	20000018 	.word	0x20000018

0800fa98 <memset>:
 800fa98:	4402      	add	r2, r0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d100      	bne.n	800faa2 <memset+0xa>
 800faa0:	4770      	bx	lr
 800faa2:	f803 1b01 	strb.w	r1, [r3], #1
 800faa6:	e7f9      	b.n	800fa9c <memset+0x4>

0800faa8 <_localeconv_r>:
 800faa8:	4800      	ldr	r0, [pc, #0]	@ (800faac <_localeconv_r+0x4>)
 800faaa:	4770      	bx	lr
 800faac:	20000158 	.word	0x20000158

0800fab0 <_close_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	2300      	movs	r3, #0
 800fab4:	4d05      	ldr	r5, [pc, #20]	@ (800facc <_close_r+0x1c>)
 800fab6:	4604      	mov	r4, r0
 800fab8:	4608      	mov	r0, r1
 800faba:	602b      	str	r3, [r5, #0]
 800fabc:	f7f2 fb64 	bl	8002188 <_close>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_close_r+0x1a>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_close_r+0x1a>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	2000c720 	.word	0x2000c720

0800fad0 <_lseek_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4604      	mov	r4, r0
 800fad4:	4d06      	ldr	r5, [pc, #24]	@ (800faf0 <_lseek_r+0x20>)
 800fad6:	4608      	mov	r0, r1
 800fad8:	4611      	mov	r1, r2
 800fada:	2200      	movs	r2, #0
 800fadc:	602a      	str	r2, [r5, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	f7f2 fb79 	bl	80021d6 <_lseek>
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d102      	bne.n	800faee <_lseek_r+0x1e>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	b103      	cbz	r3, 800faee <_lseek_r+0x1e>
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	2000c720 	.word	0x2000c720

0800faf4 <_read_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4604      	mov	r4, r0
 800faf8:	4d06      	ldr	r5, [pc, #24]	@ (800fb14 <_read_r+0x20>)
 800fafa:	4608      	mov	r0, r1
 800fafc:	4611      	mov	r1, r2
 800fafe:	2200      	movs	r2, #0
 800fb00:	602a      	str	r2, [r5, #0]
 800fb02:	461a      	mov	r2, r3
 800fb04:	f7f2 fb23 	bl	800214e <_read>
 800fb08:	1c43      	adds	r3, r0, #1
 800fb0a:	d102      	bne.n	800fb12 <_read_r+0x1e>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	b103      	cbz	r3, 800fb12 <_read_r+0x1e>
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	bd38      	pop	{r3, r4, r5, pc}
 800fb14:	2000c720 	.word	0x2000c720

0800fb18 <_sbrk_r>:
 800fb18:	b538      	push	{r3, r4, r5, lr}
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	4d05      	ldr	r5, [pc, #20]	@ (800fb34 <_sbrk_r+0x1c>)
 800fb1e:	4604      	mov	r4, r0
 800fb20:	4608      	mov	r0, r1
 800fb22:	602b      	str	r3, [r5, #0]
 800fb24:	f7f2 fb64 	bl	80021f0 <_sbrk>
 800fb28:	1c43      	adds	r3, r0, #1
 800fb2a:	d102      	bne.n	800fb32 <_sbrk_r+0x1a>
 800fb2c:	682b      	ldr	r3, [r5, #0]
 800fb2e:	b103      	cbz	r3, 800fb32 <_sbrk_r+0x1a>
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	bd38      	pop	{r3, r4, r5, pc}
 800fb34:	2000c720 	.word	0x2000c720

0800fb38 <_write_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4d06      	ldr	r5, [pc, #24]	@ (800fb58 <_write_r+0x20>)
 800fb3e:	4608      	mov	r0, r1
 800fb40:	4611      	mov	r1, r2
 800fb42:	2200      	movs	r2, #0
 800fb44:	602a      	str	r2, [r5, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	f7f2 fa4c 	bl	8001fe4 <_write>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d102      	bne.n	800fb56 <_write_r+0x1e>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	b103      	cbz	r3, 800fb56 <_write_r+0x1e>
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	bd38      	pop	{r3, r4, r5, pc}
 800fb58:	2000c720 	.word	0x2000c720

0800fb5c <__errno>:
 800fb5c:	4b01      	ldr	r3, [pc, #4]	@ (800fb64 <__errno+0x8>)
 800fb5e:	6818      	ldr	r0, [r3, #0]
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	20000018 	.word	0x20000018

0800fb68 <__libc_init_array>:
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	4d0d      	ldr	r5, [pc, #52]	@ (800fba0 <__libc_init_array+0x38>)
 800fb6c:	2600      	movs	r6, #0
 800fb6e:	4c0d      	ldr	r4, [pc, #52]	@ (800fba4 <__libc_init_array+0x3c>)
 800fb70:	1b64      	subs	r4, r4, r5
 800fb72:	10a4      	asrs	r4, r4, #2
 800fb74:	42a6      	cmp	r6, r4
 800fb76:	d109      	bne.n	800fb8c <__libc_init_array+0x24>
 800fb78:	4d0b      	ldr	r5, [pc, #44]	@ (800fba8 <__libc_init_array+0x40>)
 800fb7a:	2600      	movs	r6, #0
 800fb7c:	4c0b      	ldr	r4, [pc, #44]	@ (800fbac <__libc_init_array+0x44>)
 800fb7e:	f003 fa35 	bl	8012fec <_init>
 800fb82:	1b64      	subs	r4, r4, r5
 800fb84:	10a4      	asrs	r4, r4, #2
 800fb86:	42a6      	cmp	r6, r4
 800fb88:	d105      	bne.n	800fb96 <__libc_init_array+0x2e>
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb90:	3601      	adds	r6, #1
 800fb92:	4798      	blx	r3
 800fb94:	e7ee      	b.n	800fb74 <__libc_init_array+0xc>
 800fb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb9a:	3601      	adds	r6, #1
 800fb9c:	4798      	blx	r3
 800fb9e:	e7f2      	b.n	800fb86 <__libc_init_array+0x1e>
 800fba0:	08030dd4 	.word	0x08030dd4
 800fba4:	08030dd4 	.word	0x08030dd4
 800fba8:	08030dd4 	.word	0x08030dd4
 800fbac:	08030dd8 	.word	0x08030dd8

0800fbb0 <memchr>:
 800fbb0:	b2c9      	uxtb	r1, r1
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	4402      	add	r2, r0
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	d101      	bne.n	800fbc2 <memchr+0x12>
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	e003      	b.n	800fbca <memchr+0x1a>
 800fbc2:	7804      	ldrb	r4, [r0, #0]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	428c      	cmp	r4, r1
 800fbc8:	d1f6      	bne.n	800fbb8 <memchr+0x8>
 800fbca:	bd10      	pop	{r4, pc}

0800fbcc <memcpy>:
 800fbcc:	440a      	add	r2, r1
 800fbce:	1e43      	subs	r3, r0, #1
 800fbd0:	4291      	cmp	r1, r2
 800fbd2:	d100      	bne.n	800fbd6 <memcpy+0xa>
 800fbd4:	4770      	bx	lr
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbdc:	4291      	cmp	r1, r2
 800fbde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbe2:	d1f9      	bne.n	800fbd8 <memcpy+0xc>
 800fbe4:	bd10      	pop	{r4, pc}
	...

0800fbe8 <nanf>:
 800fbe8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fbf0 <nanf+0x8>
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	7fc00000 	.word	0x7fc00000

0800fbf4 <quorem>:
 800fbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf8:	6903      	ldr	r3, [r0, #16]
 800fbfa:	4607      	mov	r7, r0
 800fbfc:	690c      	ldr	r4, [r1, #16]
 800fbfe:	42a3      	cmp	r3, r4
 800fc00:	f2c0 8083 	blt.w	800fd0a <quorem+0x116>
 800fc04:	3c01      	subs	r4, #1
 800fc06:	f100 0514 	add.w	r5, r0, #20
 800fc0a:	f101 0814 	add.w	r8, r1, #20
 800fc0e:	00a3      	lsls	r3, r4, #2
 800fc10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc24:	3301      	adds	r3, #1
 800fc26:	429a      	cmp	r2, r3
 800fc28:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc2c:	d331      	bcc.n	800fc92 <quorem+0x9e>
 800fc2e:	f04f 0a00 	mov.w	sl, #0
 800fc32:	46c4      	mov	ip, r8
 800fc34:	46ae      	mov	lr, r5
 800fc36:	46d3      	mov	fp, sl
 800fc38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc3c:	b298      	uxth	r0, r3
 800fc3e:	45e1      	cmp	r9, ip
 800fc40:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800fc44:	fb06 a000 	mla	r0, r6, r0, sl
 800fc48:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800fc4c:	b280      	uxth	r0, r0
 800fc4e:	fb06 2303 	mla	r3, r6, r3, r2
 800fc52:	f8de 2000 	ldr.w	r2, [lr]
 800fc56:	b292      	uxth	r2, r2
 800fc58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc5c:	eba2 0200 	sub.w	r2, r2, r0
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	f8de 0000 	ldr.w	r0, [lr]
 800fc66:	445a      	add	r2, fp
 800fc68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fc6c:	b292      	uxth	r2, r2
 800fc6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc7a:	f84e 2b04 	str.w	r2, [lr], #4
 800fc7e:	d2db      	bcs.n	800fc38 <quorem+0x44>
 800fc80:	9b00      	ldr	r3, [sp, #0]
 800fc82:	58eb      	ldr	r3, [r5, r3]
 800fc84:	b92b      	cbnz	r3, 800fc92 <quorem+0x9e>
 800fc86:	9b01      	ldr	r3, [sp, #4]
 800fc88:	3b04      	subs	r3, #4
 800fc8a:	429d      	cmp	r5, r3
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	d330      	bcc.n	800fcf2 <quorem+0xfe>
 800fc90:	613c      	str	r4, [r7, #16]
 800fc92:	4638      	mov	r0, r7
 800fc94:	f001 f918 	bl	8010ec8 <__mcmp>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	db26      	blt.n	800fcea <quorem+0xf6>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	2000      	movs	r0, #0
 800fca0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fca4:	f8d1 c000 	ldr.w	ip, [r1]
 800fca8:	fa1f fe82 	uxth.w	lr, r2
 800fcac:	45c1      	cmp	r9, r8
 800fcae:	fa1f f38c 	uxth.w	r3, ip
 800fcb2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800fcb6:	eba3 030e 	sub.w	r3, r3, lr
 800fcba:	4403      	add	r3, r0
 800fcbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fcc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fcce:	f841 3b04 	str.w	r3, [r1], #4
 800fcd2:	d2e5      	bcs.n	800fca0 <quorem+0xac>
 800fcd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcdc:	b922      	cbnz	r2, 800fce8 <quorem+0xf4>
 800fcde:	3b04      	subs	r3, #4
 800fce0:	429d      	cmp	r5, r3
 800fce2:	461a      	mov	r2, r3
 800fce4:	d30b      	bcc.n	800fcfe <quorem+0x10a>
 800fce6:	613c      	str	r4, [r7, #16]
 800fce8:	3601      	adds	r6, #1
 800fcea:	4630      	mov	r0, r6
 800fcec:	b003      	add	sp, #12
 800fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf2:	6812      	ldr	r2, [r2, #0]
 800fcf4:	3b04      	subs	r3, #4
 800fcf6:	2a00      	cmp	r2, #0
 800fcf8:	d1ca      	bne.n	800fc90 <quorem+0x9c>
 800fcfa:	3c01      	subs	r4, #1
 800fcfc:	e7c5      	b.n	800fc8a <quorem+0x96>
 800fcfe:	6812      	ldr	r2, [r2, #0]
 800fd00:	3b04      	subs	r3, #4
 800fd02:	2a00      	cmp	r2, #0
 800fd04:	d1ef      	bne.n	800fce6 <quorem+0xf2>
 800fd06:	3c01      	subs	r4, #1
 800fd08:	e7ea      	b.n	800fce0 <quorem+0xec>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e7ee      	b.n	800fcec <quorem+0xf8>
	...

0800fd10 <_dtoa_r>:
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	69c7      	ldr	r7, [r0, #28]
 800fd16:	b097      	sub	sp, #92	@ 0x5c
 800fd18:	4681      	mov	r9, r0
 800fd1a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fd1c:	9107      	str	r1, [sp, #28]
 800fd1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd20:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd22:	ec55 4b10 	vmov	r4, r5, d0
 800fd26:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fd2a:	b97f      	cbnz	r7, 800fd4c <_dtoa_r+0x3c>
 800fd2c:	2010      	movs	r0, #16
 800fd2e:	f7fe fd6b 	bl	800e808 <malloc>
 800fd32:	4602      	mov	r2, r0
 800fd34:	f8c9 001c 	str.w	r0, [r9, #28]
 800fd38:	b920      	cbnz	r0, 800fd44 <_dtoa_r+0x34>
 800fd3a:	4ba9      	ldr	r3, [pc, #676]	@ (800ffe0 <_dtoa_r+0x2d0>)
 800fd3c:	21ef      	movs	r1, #239	@ 0xef
 800fd3e:	48a9      	ldr	r0, [pc, #676]	@ (800ffe4 <_dtoa_r+0x2d4>)
 800fd40:	f002 fd3a 	bl	80127b8 <__assert_func>
 800fd44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fd48:	6007      	str	r7, [r0, #0]
 800fd4a:	60c7      	str	r7, [r0, #12]
 800fd4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	b159      	cbz	r1, 800fd6c <_dtoa_r+0x5c>
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	2301      	movs	r3, #1
 800fd58:	4648      	mov	r0, r9
 800fd5a:	4093      	lsls	r3, r2
 800fd5c:	604a      	str	r2, [r1, #4]
 800fd5e:	608b      	str	r3, [r1, #8]
 800fd60:	f000 fe32 	bl	80109c8 <_Bfree>
 800fd64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	601a      	str	r2, [r3, #0]
 800fd6c:	1e2b      	subs	r3, r5, #0
 800fd6e:	bfb7      	itett	lt
 800fd70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd74:	2300      	movge	r3, #0
 800fd76:	2201      	movlt	r2, #1
 800fd78:	9305      	strlt	r3, [sp, #20]
 800fd7a:	bfa8      	it	ge
 800fd7c:	6033      	strge	r3, [r6, #0]
 800fd7e:	9f05      	ldr	r7, [sp, #20]
 800fd80:	4b99      	ldr	r3, [pc, #612]	@ (800ffe8 <_dtoa_r+0x2d8>)
 800fd82:	bfb8      	it	lt
 800fd84:	6032      	strlt	r2, [r6, #0]
 800fd86:	43bb      	bics	r3, r7
 800fd88:	d112      	bne.n	800fdb0 <_dtoa_r+0xa0>
 800fd8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fd90:	6013      	str	r3, [r2, #0]
 800fd92:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd96:	4323      	orrs	r3, r4
 800fd98:	f000 855a 	beq.w	8010850 <_dtoa_r+0xb40>
 800fd9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd9e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fffc <_dtoa_r+0x2ec>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 855c 	beq.w	8010860 <_dtoa_r+0xb50>
 800fda8:	f10a 0303 	add.w	r3, sl, #3
 800fdac:	f000 bd56 	b.w	801085c <_dtoa_r+0xb4c>
 800fdb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	ec51 0b17 	vmov	r0, r1, d7
 800fdbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fdc0:	f7f0 fe86 	bl	8000ad0 <__aeabi_dcmpeq>
 800fdc4:	4680      	mov	r8, r0
 800fdc6:	b158      	cbz	r0, 800fde0 <_dtoa_r+0xd0>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fdd0:	b113      	cbz	r3, 800fdd8 <_dtoa_r+0xc8>
 800fdd2:	4b86      	ldr	r3, [pc, #536]	@ (800ffec <_dtoa_r+0x2dc>)
 800fdd4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8010000 <_dtoa_r+0x2f0>
 800fddc:	f000 bd40 	b.w	8010860 <_dtoa_r+0xb50>
 800fde0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fde4:	aa14      	add	r2, sp, #80	@ 0x50
 800fde6:	a915      	add	r1, sp, #84	@ 0x54
 800fde8:	4648      	mov	r0, r9
 800fdea:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fdee:	f001 f993 	bl	8011118 <__d2b>
 800fdf2:	9002      	str	r0, [sp, #8]
 800fdf4:	2e00      	cmp	r6, #0
 800fdf6:	d076      	beq.n	800fee6 <_dtoa_r+0x1d6>
 800fdf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdfa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fdfe:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fe02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe06:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fe0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe0e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fe12:	4619      	mov	r1, r3
 800fe14:	2200      	movs	r2, #0
 800fe16:	4b76      	ldr	r3, [pc, #472]	@ (800fff0 <_dtoa_r+0x2e0>)
 800fe18:	f7f0 fa3a 	bl	8000290 <__aeabi_dsub>
 800fe1c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ffc8 <_dtoa_r+0x2b8>)
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	f7f0 fbed 	bl	8000600 <__aeabi_dmul>
 800fe26:	a36a      	add	r3, pc, #424	@ (adr r3, 800ffd0 <_dtoa_r+0x2c0>)
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	f7f0 fa32 	bl	8000294 <__adddf3>
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	4630      	mov	r0, r6
 800fe36:	f7f0 fb79 	bl	800052c <__aeabi_i2d>
 800fe3a:	a367      	add	r3, pc, #412	@ (adr r3, 800ffd8 <_dtoa_r+0x2c8>)
 800fe3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe40:	f7f0 fbde 	bl	8000600 <__aeabi_dmul>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4620      	mov	r0, r4
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	f7f0 fa22 	bl	8000294 <__adddf3>
 800fe50:	4604      	mov	r4, r0
 800fe52:	460d      	mov	r5, r1
 800fe54:	f7f0 fe84 	bl	8000b60 <__aeabi_d2iz>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4607      	mov	r7, r0
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	4620      	mov	r0, r4
 800fe60:	4629      	mov	r1, r5
 800fe62:	f7f0 fe3f 	bl	8000ae4 <__aeabi_dcmplt>
 800fe66:	b140      	cbz	r0, 800fe7a <_dtoa_r+0x16a>
 800fe68:	4638      	mov	r0, r7
 800fe6a:	f7f0 fb5f 	bl	800052c <__aeabi_i2d>
 800fe6e:	4622      	mov	r2, r4
 800fe70:	462b      	mov	r3, r5
 800fe72:	f7f0 fe2d 	bl	8000ad0 <__aeabi_dcmpeq>
 800fe76:	b900      	cbnz	r0, 800fe7a <_dtoa_r+0x16a>
 800fe78:	3f01      	subs	r7, #1
 800fe7a:	2f16      	cmp	r7, #22
 800fe7c:	d852      	bhi.n	800ff24 <_dtoa_r+0x214>
 800fe7e:	4b5d      	ldr	r3, [pc, #372]	@ (800fff4 <_dtoa_r+0x2e4>)
 800fe80:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 fe2a 	bl	8000ae4 <__aeabi_dcmplt>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d049      	beq.n	800ff28 <_dtoa_r+0x218>
 800fe94:	3f01      	subs	r7, #1
 800fe96:	2300      	movs	r3, #0
 800fe98:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fe9c:	1b9b      	subs	r3, r3, r6
 800fe9e:	1e5a      	subs	r2, r3, #1
 800fea0:	bf4c      	ite	mi
 800fea2:	f1c3 0301 	rsbmi	r3, r3, #1
 800fea6:	2300      	movpl	r3, #0
 800fea8:	9206      	str	r2, [sp, #24]
 800feaa:	bf45      	ittet	mi
 800feac:	9300      	strmi	r3, [sp, #0]
 800feae:	2300      	movmi	r3, #0
 800feb0:	9300      	strpl	r3, [sp, #0]
 800feb2:	9306      	strmi	r3, [sp, #24]
 800feb4:	2f00      	cmp	r7, #0
 800feb6:	db39      	blt.n	800ff2c <_dtoa_r+0x21c>
 800feb8:	9b06      	ldr	r3, [sp, #24]
 800feba:	970d      	str	r7, [sp, #52]	@ 0x34
 800febc:	443b      	add	r3, r7
 800febe:	9306      	str	r3, [sp, #24]
 800fec0:	2300      	movs	r3, #0
 800fec2:	9308      	str	r3, [sp, #32]
 800fec4:	9b07      	ldr	r3, [sp, #28]
 800fec6:	2b09      	cmp	r3, #9
 800fec8:	d863      	bhi.n	800ff92 <_dtoa_r+0x282>
 800feca:	2b05      	cmp	r3, #5
 800fecc:	bfc5      	ittet	gt
 800fece:	3b04      	subgt	r3, #4
 800fed0:	2400      	movgt	r4, #0
 800fed2:	2401      	movle	r4, #1
 800fed4:	9307      	strgt	r3, [sp, #28]
 800fed6:	9b07      	ldr	r3, [sp, #28]
 800fed8:	3b02      	subs	r3, #2
 800feda:	2b03      	cmp	r3, #3
 800fedc:	d865      	bhi.n	800ffaa <_dtoa_r+0x29a>
 800fede:	e8df f003 	tbb	[pc, r3]
 800fee2:	5654      	.short	0x5654
 800fee4:	2d39      	.short	0x2d39
 800fee6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800feea:	441e      	add	r6, r3
 800feec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fef0:	2b20      	cmp	r3, #32
 800fef2:	bfc9      	itett	gt
 800fef4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fef8:	f1c3 0320 	rsble	r3, r3, #32
 800fefc:	409f      	lslgt	r7, r3
 800fefe:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ff02:	bfd8      	it	le
 800ff04:	fa04 f003 	lslle.w	r0, r4, r3
 800ff08:	f106 36ff 	add.w	r6, r6, #4294967295
 800ff0c:	bfc4      	itt	gt
 800ff0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ff12:	ea47 0003 	orrgt.w	r0, r7, r3
 800ff16:	f7f0 faf9 	bl	800050c <__aeabi_ui2d>
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ff20:	9212      	str	r2, [sp, #72]	@ 0x48
 800ff22:	e776      	b.n	800fe12 <_dtoa_r+0x102>
 800ff24:	2301      	movs	r3, #1
 800ff26:	e7b7      	b.n	800fe98 <_dtoa_r+0x188>
 800ff28:	9010      	str	r0, [sp, #64]	@ 0x40
 800ff2a:	e7b6      	b.n	800fe9a <_dtoa_r+0x18a>
 800ff2c:	9b00      	ldr	r3, [sp, #0]
 800ff2e:	1bdb      	subs	r3, r3, r7
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	427b      	negs	r3, r7
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	2300      	movs	r3, #0
 800ff38:	930d      	str	r3, [sp, #52]	@ 0x34
 800ff3a:	e7c3      	b.n	800fec4 <_dtoa_r+0x1b4>
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff42:	eb07 0b03 	add.w	fp, r7, r3
 800ff46:	f10b 0301 	add.w	r3, fp, #1
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	bfb8      	it	lt
 800ff50:	2301      	movlt	r3, #1
 800ff52:	e006      	b.n	800ff62 <_dtoa_r+0x252>
 800ff54:	2301      	movs	r3, #1
 800ff56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	dd28      	ble.n	800ffb0 <_dtoa_r+0x2a0>
 800ff5e:	469b      	mov	fp, r3
 800ff60:	9303      	str	r3, [sp, #12]
 800ff62:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ff66:	2100      	movs	r1, #0
 800ff68:	2204      	movs	r2, #4
 800ff6a:	f102 0514 	add.w	r5, r2, #20
 800ff6e:	429d      	cmp	r5, r3
 800ff70:	d926      	bls.n	800ffc0 <_dtoa_r+0x2b0>
 800ff72:	6041      	str	r1, [r0, #4]
 800ff74:	4648      	mov	r0, r9
 800ff76:	f000 fce7 	bl	8010948 <_Balloc>
 800ff7a:	4682      	mov	sl, r0
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d141      	bne.n	8010004 <_dtoa_r+0x2f4>
 800ff80:	4b1d      	ldr	r3, [pc, #116]	@ (800fff8 <_dtoa_r+0x2e8>)
 800ff82:	4602      	mov	r2, r0
 800ff84:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff88:	e6d9      	b.n	800fd3e <_dtoa_r+0x2e>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	e7e3      	b.n	800ff56 <_dtoa_r+0x246>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e7d5      	b.n	800ff3e <_dtoa_r+0x22e>
 800ff92:	2401      	movs	r4, #1
 800ff94:	2300      	movs	r3, #0
 800ff96:	9409      	str	r4, [sp, #36]	@ 0x24
 800ff98:	9307      	str	r3, [sp, #28]
 800ff9a:	f04f 3bff 	mov.w	fp, #4294967295
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	2312      	movs	r3, #18
 800ffa2:	f8cd b00c 	str.w	fp, [sp, #12]
 800ffa6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ffa8:	e7db      	b.n	800ff62 <_dtoa_r+0x252>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffae:	e7f4      	b.n	800ff9a <_dtoa_r+0x28a>
 800ffb0:	f04f 0b01 	mov.w	fp, #1
 800ffb4:	465b      	mov	r3, fp
 800ffb6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ffba:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ffbe:	e7d0      	b.n	800ff62 <_dtoa_r+0x252>
 800ffc0:	3101      	adds	r1, #1
 800ffc2:	0052      	lsls	r2, r2, #1
 800ffc4:	e7d1      	b.n	800ff6a <_dtoa_r+0x25a>
 800ffc6:	bf00      	nop
 800ffc8:	636f4361 	.word	0x636f4361
 800ffcc:	3fd287a7 	.word	0x3fd287a7
 800ffd0:	8b60c8b3 	.word	0x8b60c8b3
 800ffd4:	3fc68a28 	.word	0x3fc68a28
 800ffd8:	509f79fb 	.word	0x509f79fb
 800ffdc:	3fd34413 	.word	0x3fd34413
 800ffe0:	080309e6 	.word	0x080309e6
 800ffe4:	080309fd 	.word	0x080309fd
 800ffe8:	7ff00000 	.word	0x7ff00000
 800ffec:	080309b1 	.word	0x080309b1
 800fff0:	3ff80000 	.word	0x3ff80000
 800fff4:	08030bb0 	.word	0x08030bb0
 800fff8:	08030a55 	.word	0x08030a55
 800fffc:	080309e2 	.word	0x080309e2
 8010000:	080309b0 	.word	0x080309b0
 8010004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010008:	6018      	str	r0, [r3, #0]
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	2b0e      	cmp	r3, #14
 801000e:	f200 80a1 	bhi.w	8010154 <_dtoa_r+0x444>
 8010012:	2c00      	cmp	r4, #0
 8010014:	f000 809e 	beq.w	8010154 <_dtoa_r+0x444>
 8010018:	2f00      	cmp	r7, #0
 801001a:	dd33      	ble.n	8010084 <_dtoa_r+0x374>
 801001c:	f007 020f 	and.w	r2, r7, #15
 8010020:	4b9b      	ldr	r3, [pc, #620]	@ (8010290 <_dtoa_r+0x580>)
 8010022:	05f8      	lsls	r0, r7, #23
 8010024:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801002c:	ed93 7b00 	vldr	d7, [r3]
 8010030:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010034:	d516      	bpl.n	8010064 <_dtoa_r+0x354>
 8010036:	4b97      	ldr	r3, [pc, #604]	@ (8010294 <_dtoa_r+0x584>)
 8010038:	f004 040f 	and.w	r4, r4, #15
 801003c:	2603      	movs	r6, #3
 801003e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010042:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010046:	f7f0 fc05 	bl	8000854 <__aeabi_ddiv>
 801004a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801004e:	4d91      	ldr	r5, [pc, #580]	@ (8010294 <_dtoa_r+0x584>)
 8010050:	b954      	cbnz	r4, 8010068 <_dtoa_r+0x358>
 8010052:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801005a:	f7f0 fbfb 	bl	8000854 <__aeabi_ddiv>
 801005e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010062:	e028      	b.n	80100b6 <_dtoa_r+0x3a6>
 8010064:	2602      	movs	r6, #2
 8010066:	e7f2      	b.n	801004e <_dtoa_r+0x33e>
 8010068:	07e1      	lsls	r1, r4, #31
 801006a:	d508      	bpl.n	801007e <_dtoa_r+0x36e>
 801006c:	3601      	adds	r6, #1
 801006e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010072:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010076:	f7f0 fac3 	bl	8000600 <__aeabi_dmul>
 801007a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801007e:	1064      	asrs	r4, r4, #1
 8010080:	3508      	adds	r5, #8
 8010082:	e7e5      	b.n	8010050 <_dtoa_r+0x340>
 8010084:	f000 80af 	beq.w	80101e6 <_dtoa_r+0x4d6>
 8010088:	427c      	negs	r4, r7
 801008a:	4b81      	ldr	r3, [pc, #516]	@ (8010290 <_dtoa_r+0x580>)
 801008c:	4d81      	ldr	r5, [pc, #516]	@ (8010294 <_dtoa_r+0x584>)
 801008e:	2602      	movs	r6, #2
 8010090:	f004 020f 	and.w	r2, r4, #15
 8010094:	1124      	asrs	r4, r4, #4
 8010096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801009a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801009e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a2:	f7f0 faad 	bl	8000600 <__aeabi_dmul>
 80100a6:	2300      	movs	r3, #0
 80100a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100ac:	2c00      	cmp	r4, #0
 80100ae:	f040 808f 	bne.w	80101d0 <_dtoa_r+0x4c0>
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1d3      	bne.n	801005e <_dtoa_r+0x34e>
 80100b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 8094 	beq.w	80101ea <_dtoa_r+0x4da>
 80100c2:	2200      	movs	r2, #0
 80100c4:	4b74      	ldr	r3, [pc, #464]	@ (8010298 <_dtoa_r+0x588>)
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fd0b 	bl	8000ae4 <__aeabi_dcmplt>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	f000 808b 	beq.w	80101ea <_dtoa_r+0x4da>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 8087 	beq.w	80101ea <_dtoa_r+0x4da>
 80100dc:	f1bb 0f00 	cmp.w	fp, #0
 80100e0:	dd34      	ble.n	801014c <_dtoa_r+0x43c>
 80100e2:	4620      	mov	r0, r4
 80100e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80100e8:	3601      	adds	r6, #1
 80100ea:	465c      	mov	r4, fp
 80100ec:	2200      	movs	r2, #0
 80100ee:	4b6b      	ldr	r3, [pc, #428]	@ (801029c <_dtoa_r+0x58c>)
 80100f0:	4629      	mov	r1, r5
 80100f2:	f7f0 fa85 	bl	8000600 <__aeabi_dmul>
 80100f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100fa:	4630      	mov	r0, r6
 80100fc:	f7f0 fa16 	bl	800052c <__aeabi_i2d>
 8010100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010104:	f7f0 fa7c 	bl	8000600 <__aeabi_dmul>
 8010108:	2200      	movs	r2, #0
 801010a:	4b65      	ldr	r3, [pc, #404]	@ (80102a0 <_dtoa_r+0x590>)
 801010c:	f7f0 f8c2 	bl	8000294 <__adddf3>
 8010110:	4605      	mov	r5, r0
 8010112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010116:	2c00      	cmp	r4, #0
 8010118:	d16a      	bne.n	80101f0 <_dtoa_r+0x4e0>
 801011a:	2200      	movs	r2, #0
 801011c:	4b61      	ldr	r3, [pc, #388]	@ (80102a4 <_dtoa_r+0x594>)
 801011e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010122:	f7f0 f8b5 	bl	8000290 <__aeabi_dsub>
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801012e:	462a      	mov	r2, r5
 8010130:	4633      	mov	r3, r6
 8010132:	f7f0 fcf5 	bl	8000b20 <__aeabi_dcmpgt>
 8010136:	2800      	cmp	r0, #0
 8010138:	f040 8298 	bne.w	801066c <_dtoa_r+0x95c>
 801013c:	462a      	mov	r2, r5
 801013e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010146:	f7f0 fccd 	bl	8000ae4 <__aeabi_dcmplt>
 801014a:	bb38      	cbnz	r0, 801019c <_dtoa_r+0x48c>
 801014c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010154:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010156:	2b00      	cmp	r3, #0
 8010158:	f2c0 8157 	blt.w	801040a <_dtoa_r+0x6fa>
 801015c:	2f0e      	cmp	r7, #14
 801015e:	f300 8154 	bgt.w	801040a <_dtoa_r+0x6fa>
 8010162:	4b4b      	ldr	r3, [pc, #300]	@ (8010290 <_dtoa_r+0x580>)
 8010164:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010168:	ed93 7b00 	vldr	d7, [r3]
 801016c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801016e:	2b00      	cmp	r3, #0
 8010170:	ed8d 7b00 	vstr	d7, [sp]
 8010174:	f280 80e5 	bge.w	8010342 <_dtoa_r+0x632>
 8010178:	9b03      	ldr	r3, [sp, #12]
 801017a:	2b00      	cmp	r3, #0
 801017c:	f300 80e1 	bgt.w	8010342 <_dtoa_r+0x632>
 8010180:	d10c      	bne.n	801019c <_dtoa_r+0x48c>
 8010182:	2200      	movs	r2, #0
 8010184:	4b47      	ldr	r3, [pc, #284]	@ (80102a4 <_dtoa_r+0x594>)
 8010186:	ec51 0b17 	vmov	r0, r1, d7
 801018a:	f7f0 fa39 	bl	8000600 <__aeabi_dmul>
 801018e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010192:	f7f0 fcbb 	bl	8000b0c <__aeabi_dcmpge>
 8010196:	2800      	cmp	r0, #0
 8010198:	f000 8266 	beq.w	8010668 <_dtoa_r+0x958>
 801019c:	2400      	movs	r4, #0
 801019e:	4625      	mov	r5, r4
 80101a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101a2:	4656      	mov	r6, sl
 80101a4:	ea6f 0803 	mvn.w	r8, r3
 80101a8:	2700      	movs	r7, #0
 80101aa:	4621      	mov	r1, r4
 80101ac:	4648      	mov	r0, r9
 80101ae:	f000 fc0b 	bl	80109c8 <_Bfree>
 80101b2:	2d00      	cmp	r5, #0
 80101b4:	f000 80bd 	beq.w	8010332 <_dtoa_r+0x622>
 80101b8:	b12f      	cbz	r7, 80101c6 <_dtoa_r+0x4b6>
 80101ba:	42af      	cmp	r7, r5
 80101bc:	d003      	beq.n	80101c6 <_dtoa_r+0x4b6>
 80101be:	4639      	mov	r1, r7
 80101c0:	4648      	mov	r0, r9
 80101c2:	f000 fc01 	bl	80109c8 <_Bfree>
 80101c6:	4629      	mov	r1, r5
 80101c8:	4648      	mov	r0, r9
 80101ca:	f000 fbfd 	bl	80109c8 <_Bfree>
 80101ce:	e0b0      	b.n	8010332 <_dtoa_r+0x622>
 80101d0:	07e2      	lsls	r2, r4, #31
 80101d2:	d505      	bpl.n	80101e0 <_dtoa_r+0x4d0>
 80101d4:	3601      	adds	r6, #1
 80101d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101da:	f7f0 fa11 	bl	8000600 <__aeabi_dmul>
 80101de:	2301      	movs	r3, #1
 80101e0:	1064      	asrs	r4, r4, #1
 80101e2:	3508      	adds	r5, #8
 80101e4:	e762      	b.n	80100ac <_dtoa_r+0x39c>
 80101e6:	2602      	movs	r6, #2
 80101e8:	e765      	b.n	80100b6 <_dtoa_r+0x3a6>
 80101ea:	46b8      	mov	r8, r7
 80101ec:	9c03      	ldr	r4, [sp, #12]
 80101ee:	e784      	b.n	80100fa <_dtoa_r+0x3ea>
 80101f0:	4b27      	ldr	r3, [pc, #156]	@ (8010290 <_dtoa_r+0x580>)
 80101f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80101f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101f8:	4454      	add	r4, sl
 80101fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101fe:	2900      	cmp	r1, #0
 8010200:	d054      	beq.n	80102ac <_dtoa_r+0x59c>
 8010202:	2000      	movs	r0, #0
 8010204:	4928      	ldr	r1, [pc, #160]	@ (80102a8 <_dtoa_r+0x598>)
 8010206:	f7f0 fb25 	bl	8000854 <__aeabi_ddiv>
 801020a:	4633      	mov	r3, r6
 801020c:	4656      	mov	r6, sl
 801020e:	462a      	mov	r2, r5
 8010210:	f7f0 f83e 	bl	8000290 <__aeabi_dsub>
 8010214:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801021c:	f7f0 fca0 	bl	8000b60 <__aeabi_d2iz>
 8010220:	4605      	mov	r5, r0
 8010222:	f7f0 f983 	bl	800052c <__aeabi_i2d>
 8010226:	4602      	mov	r2, r0
 8010228:	460b      	mov	r3, r1
 801022a:	3530      	adds	r5, #48	@ 0x30
 801022c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010230:	f7f0 f82e 	bl	8000290 <__aeabi_dsub>
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	f806 5b01 	strb.w	r5, [r6], #1
 801023c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010240:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010244:	f7f0 fc4e 	bl	8000ae4 <__aeabi_dcmplt>
 8010248:	2800      	cmp	r0, #0
 801024a:	d172      	bne.n	8010332 <_dtoa_r+0x622>
 801024c:	2000      	movs	r0, #0
 801024e:	4912      	ldr	r1, [pc, #72]	@ (8010298 <_dtoa_r+0x588>)
 8010250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010254:	f7f0 f81c 	bl	8000290 <__aeabi_dsub>
 8010258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801025c:	f7f0 fc42 	bl	8000ae4 <__aeabi_dcmplt>
 8010260:	2800      	cmp	r0, #0
 8010262:	f040 80b4 	bne.w	80103ce <_dtoa_r+0x6be>
 8010266:	42a6      	cmp	r6, r4
 8010268:	f43f af70 	beq.w	801014c <_dtoa_r+0x43c>
 801026c:	2200      	movs	r2, #0
 801026e:	4b0b      	ldr	r3, [pc, #44]	@ (801029c <_dtoa_r+0x58c>)
 8010270:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010274:	f7f0 f9c4 	bl	8000600 <__aeabi_dmul>
 8010278:	2200      	movs	r2, #0
 801027a:	4b08      	ldr	r3, [pc, #32]	@ (801029c <_dtoa_r+0x58c>)
 801027c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010284:	f7f0 f9bc 	bl	8000600 <__aeabi_dmul>
 8010288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801028c:	e7c4      	b.n	8010218 <_dtoa_r+0x508>
 801028e:	bf00      	nop
 8010290:	08030bb0 	.word	0x08030bb0
 8010294:	08030b88 	.word	0x08030b88
 8010298:	3ff00000 	.word	0x3ff00000
 801029c:	40240000 	.word	0x40240000
 80102a0:	401c0000 	.word	0x401c0000
 80102a4:	40140000 	.word	0x40140000
 80102a8:	3fe00000 	.word	0x3fe00000
 80102ac:	4631      	mov	r1, r6
 80102ae:	4656      	mov	r6, sl
 80102b0:	4628      	mov	r0, r5
 80102b2:	f7f0 f9a5 	bl	8000600 <__aeabi_dmul>
 80102b6:	9413      	str	r4, [sp, #76]	@ 0x4c
 80102b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80102bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102c0:	f7f0 fc4e 	bl	8000b60 <__aeabi_d2iz>
 80102c4:	4605      	mov	r5, r0
 80102c6:	f7f0 f931 	bl	800052c <__aeabi_i2d>
 80102ca:	4602      	mov	r2, r0
 80102cc:	3530      	adds	r5, #48	@ 0x30
 80102ce:	460b      	mov	r3, r1
 80102d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102d4:	f7ef ffdc 	bl	8000290 <__aeabi_dsub>
 80102d8:	f806 5b01 	strb.w	r5, [r6], #1
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	42a6      	cmp	r6, r4
 80102e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102e6:	f04f 0200 	mov.w	r2, #0
 80102ea:	d124      	bne.n	8010336 <_dtoa_r+0x626>
 80102ec:	4baf      	ldr	r3, [pc, #700]	@ (80105ac <_dtoa_r+0x89c>)
 80102ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80102f2:	f7ef ffcf 	bl	8000294 <__adddf3>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102fe:	f7f0 fc0f 	bl	8000b20 <__aeabi_dcmpgt>
 8010302:	2800      	cmp	r0, #0
 8010304:	d163      	bne.n	80103ce <_dtoa_r+0x6be>
 8010306:	2000      	movs	r0, #0
 8010308:	49a8      	ldr	r1, [pc, #672]	@ (80105ac <_dtoa_r+0x89c>)
 801030a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801030e:	f7ef ffbf 	bl	8000290 <__aeabi_dsub>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801031a:	f7f0 fbe3 	bl	8000ae4 <__aeabi_dcmplt>
 801031e:	2800      	cmp	r0, #0
 8010320:	f43f af14 	beq.w	801014c <_dtoa_r+0x43c>
 8010324:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010326:	1e73      	subs	r3, r6, #1
 8010328:	9313      	str	r3, [sp, #76]	@ 0x4c
 801032a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801032e:	2b30      	cmp	r3, #48	@ 0x30
 8010330:	d0f8      	beq.n	8010324 <_dtoa_r+0x614>
 8010332:	4647      	mov	r7, r8
 8010334:	e03b      	b.n	80103ae <_dtoa_r+0x69e>
 8010336:	4b9e      	ldr	r3, [pc, #632]	@ (80105b0 <_dtoa_r+0x8a0>)
 8010338:	f7f0 f962 	bl	8000600 <__aeabi_dmul>
 801033c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010340:	e7bc      	b.n	80102bc <_dtoa_r+0x5ac>
 8010342:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010346:	4656      	mov	r6, sl
 8010348:	4620      	mov	r0, r4
 801034a:	4629      	mov	r1, r5
 801034c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010350:	f7f0 fa80 	bl	8000854 <__aeabi_ddiv>
 8010354:	f7f0 fc04 	bl	8000b60 <__aeabi_d2iz>
 8010358:	4680      	mov	r8, r0
 801035a:	f7f0 f8e7 	bl	800052c <__aeabi_i2d>
 801035e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010362:	f7f0 f94d 	bl	8000600 <__aeabi_dmul>
 8010366:	4602      	mov	r2, r0
 8010368:	4620      	mov	r0, r4
 801036a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801036e:	460b      	mov	r3, r1
 8010370:	4629      	mov	r1, r5
 8010372:	f7ef ff8d 	bl	8000290 <__aeabi_dsub>
 8010376:	9d03      	ldr	r5, [sp, #12]
 8010378:	f806 4b01 	strb.w	r4, [r6], #1
 801037c:	eba6 040a 	sub.w	r4, r6, sl
 8010380:	4602      	mov	r2, r0
 8010382:	460b      	mov	r3, r1
 8010384:	42a5      	cmp	r5, r4
 8010386:	d133      	bne.n	80103f0 <_dtoa_r+0x6e0>
 8010388:	f7ef ff84 	bl	8000294 <__adddf3>
 801038c:	4604      	mov	r4, r0
 801038e:	460d      	mov	r5, r1
 8010390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010394:	f7f0 fbc4 	bl	8000b20 <__aeabi_dcmpgt>
 8010398:	b9c0      	cbnz	r0, 80103cc <_dtoa_r+0x6bc>
 801039a:	4620      	mov	r0, r4
 801039c:	4629      	mov	r1, r5
 801039e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103a2:	f7f0 fb95 	bl	8000ad0 <__aeabi_dcmpeq>
 80103a6:	b110      	cbz	r0, 80103ae <_dtoa_r+0x69e>
 80103a8:	f018 0f01 	tst.w	r8, #1
 80103ac:	d10e      	bne.n	80103cc <_dtoa_r+0x6bc>
 80103ae:	9902      	ldr	r1, [sp, #8]
 80103b0:	4648      	mov	r0, r9
 80103b2:	f000 fb09 	bl	80109c8 <_Bfree>
 80103b6:	2300      	movs	r3, #0
 80103b8:	3701      	adds	r7, #1
 80103ba:	7033      	strb	r3, [r6, #0]
 80103bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80103be:	601f      	str	r7, [r3, #0]
 80103c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 824c 	beq.w	8010860 <_dtoa_r+0xb50>
 80103c8:	601e      	str	r6, [r3, #0]
 80103ca:	e249      	b.n	8010860 <_dtoa_r+0xb50>
 80103cc:	46b8      	mov	r8, r7
 80103ce:	4633      	mov	r3, r6
 80103d0:	461e      	mov	r6, r3
 80103d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103d6:	2a39      	cmp	r2, #57	@ 0x39
 80103d8:	d106      	bne.n	80103e8 <_dtoa_r+0x6d8>
 80103da:	459a      	cmp	sl, r3
 80103dc:	d1f8      	bne.n	80103d0 <_dtoa_r+0x6c0>
 80103de:	2230      	movs	r2, #48	@ 0x30
 80103e0:	f108 0801 	add.w	r8, r8, #1
 80103e4:	f88a 2000 	strb.w	r2, [sl]
 80103e8:	781a      	ldrb	r2, [r3, #0]
 80103ea:	3201      	adds	r2, #1
 80103ec:	701a      	strb	r2, [r3, #0]
 80103ee:	e7a0      	b.n	8010332 <_dtoa_r+0x622>
 80103f0:	2200      	movs	r2, #0
 80103f2:	4b6f      	ldr	r3, [pc, #444]	@ (80105b0 <_dtoa_r+0x8a0>)
 80103f4:	f7f0 f904 	bl	8000600 <__aeabi_dmul>
 80103f8:	2200      	movs	r2, #0
 80103fa:	2300      	movs	r3, #0
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	f7f0 fb66 	bl	8000ad0 <__aeabi_dcmpeq>
 8010404:	2800      	cmp	r0, #0
 8010406:	d09f      	beq.n	8010348 <_dtoa_r+0x638>
 8010408:	e7d1      	b.n	80103ae <_dtoa_r+0x69e>
 801040a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801040c:	2a00      	cmp	r2, #0
 801040e:	f000 80ea 	beq.w	80105e6 <_dtoa_r+0x8d6>
 8010412:	9a07      	ldr	r2, [sp, #28]
 8010414:	2a01      	cmp	r2, #1
 8010416:	f300 80cd 	bgt.w	80105b4 <_dtoa_r+0x8a4>
 801041a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801041c:	2a00      	cmp	r2, #0
 801041e:	f000 80c1 	beq.w	80105a4 <_dtoa_r+0x894>
 8010422:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010426:	9c08      	ldr	r4, [sp, #32]
 8010428:	9e00      	ldr	r6, [sp, #0]
 801042a:	9a00      	ldr	r2, [sp, #0]
 801042c:	2101      	movs	r1, #1
 801042e:	4648      	mov	r0, r9
 8010430:	441a      	add	r2, r3
 8010432:	9200      	str	r2, [sp, #0]
 8010434:	9a06      	ldr	r2, [sp, #24]
 8010436:	441a      	add	r2, r3
 8010438:	9206      	str	r2, [sp, #24]
 801043a:	f000 fbc5 	bl	8010bc8 <__i2b>
 801043e:	4605      	mov	r5, r0
 8010440:	b166      	cbz	r6, 801045c <_dtoa_r+0x74c>
 8010442:	9b06      	ldr	r3, [sp, #24]
 8010444:	2b00      	cmp	r3, #0
 8010446:	dd09      	ble.n	801045c <_dtoa_r+0x74c>
 8010448:	42b3      	cmp	r3, r6
 801044a:	9a00      	ldr	r2, [sp, #0]
 801044c:	bfa8      	it	ge
 801044e:	4633      	movge	r3, r6
 8010450:	1ad2      	subs	r2, r2, r3
 8010452:	1af6      	subs	r6, r6, r3
 8010454:	9200      	str	r2, [sp, #0]
 8010456:	9a06      	ldr	r2, [sp, #24]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	9306      	str	r3, [sp, #24]
 801045c:	9b08      	ldr	r3, [sp, #32]
 801045e:	b30b      	cbz	r3, 80104a4 <_dtoa_r+0x794>
 8010460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 80c6 	beq.w	80105f4 <_dtoa_r+0x8e4>
 8010468:	2c00      	cmp	r4, #0
 801046a:	f000 80c0 	beq.w	80105ee <_dtoa_r+0x8de>
 801046e:	4629      	mov	r1, r5
 8010470:	4622      	mov	r2, r4
 8010472:	4648      	mov	r0, r9
 8010474:	f000 fc62 	bl	8010d3c <__pow5mult>
 8010478:	9a02      	ldr	r2, [sp, #8]
 801047a:	4601      	mov	r1, r0
 801047c:	4605      	mov	r5, r0
 801047e:	4648      	mov	r0, r9
 8010480:	f000 fbb8 	bl	8010bf4 <__multiply>
 8010484:	9902      	ldr	r1, [sp, #8]
 8010486:	4680      	mov	r8, r0
 8010488:	4648      	mov	r0, r9
 801048a:	f000 fa9d 	bl	80109c8 <_Bfree>
 801048e:	9b08      	ldr	r3, [sp, #32]
 8010490:	1b1b      	subs	r3, r3, r4
 8010492:	9308      	str	r3, [sp, #32]
 8010494:	f000 80b1 	beq.w	80105fa <_dtoa_r+0x8ea>
 8010498:	9a08      	ldr	r2, [sp, #32]
 801049a:	4641      	mov	r1, r8
 801049c:	4648      	mov	r0, r9
 801049e:	f000 fc4d 	bl	8010d3c <__pow5mult>
 80104a2:	9002      	str	r0, [sp, #8]
 80104a4:	2101      	movs	r1, #1
 80104a6:	4648      	mov	r0, r9
 80104a8:	f000 fb8e 	bl	8010bc8 <__i2b>
 80104ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104ae:	4604      	mov	r4, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 81d9 	beq.w	8010868 <_dtoa_r+0xb58>
 80104b6:	461a      	mov	r2, r3
 80104b8:	4601      	mov	r1, r0
 80104ba:	4648      	mov	r0, r9
 80104bc:	f000 fc3e 	bl	8010d3c <__pow5mult>
 80104c0:	9b07      	ldr	r3, [sp, #28]
 80104c2:	4604      	mov	r4, r0
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	f300 809f 	bgt.w	8010608 <_dtoa_r+0x8f8>
 80104ca:	9b04      	ldr	r3, [sp, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f040 8097 	bne.w	8010600 <_dtoa_r+0x8f0>
 80104d2:	9b05      	ldr	r3, [sp, #20]
 80104d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f040 8093 	bne.w	8010604 <_dtoa_r+0x8f4>
 80104de:	9b05      	ldr	r3, [sp, #20]
 80104e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104e4:	0d1b      	lsrs	r3, r3, #20
 80104e6:	051b      	lsls	r3, r3, #20
 80104e8:	b133      	cbz	r3, 80104f8 <_dtoa_r+0x7e8>
 80104ea:	9b00      	ldr	r3, [sp, #0]
 80104ec:	3301      	adds	r3, #1
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	9b06      	ldr	r3, [sp, #24]
 80104f2:	3301      	adds	r3, #1
 80104f4:	9306      	str	r3, [sp, #24]
 80104f6:	2301      	movs	r3, #1
 80104f8:	9308      	str	r3, [sp, #32]
 80104fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f000 81b9 	beq.w	8010874 <_dtoa_r+0xb64>
 8010502:	6923      	ldr	r3, [r4, #16]
 8010504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010508:	6918      	ldr	r0, [r3, #16]
 801050a:	f000 fb11 	bl	8010b30 <__hi0bits>
 801050e:	f1c0 0020 	rsb	r0, r0, #32
 8010512:	9b06      	ldr	r3, [sp, #24]
 8010514:	4418      	add	r0, r3
 8010516:	f010 001f 	ands.w	r0, r0, #31
 801051a:	f000 8082 	beq.w	8010622 <_dtoa_r+0x912>
 801051e:	f1c0 0320 	rsb	r3, r0, #32
 8010522:	2b04      	cmp	r3, #4
 8010524:	dd73      	ble.n	801060e <_dtoa_r+0x8fe>
 8010526:	f1c0 001c 	rsb	r0, r0, #28
 801052a:	9b00      	ldr	r3, [sp, #0]
 801052c:	4403      	add	r3, r0
 801052e:	4406      	add	r6, r0
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	9b06      	ldr	r3, [sp, #24]
 8010534:	4403      	add	r3, r0
 8010536:	9306      	str	r3, [sp, #24]
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	dd05      	ble.n	801054a <_dtoa_r+0x83a>
 801053e:	461a      	mov	r2, r3
 8010540:	9902      	ldr	r1, [sp, #8]
 8010542:	4648      	mov	r0, r9
 8010544:	f000 fc54 	bl	8010df0 <__lshift>
 8010548:	9002      	str	r0, [sp, #8]
 801054a:	9b06      	ldr	r3, [sp, #24]
 801054c:	2b00      	cmp	r3, #0
 801054e:	dd05      	ble.n	801055c <_dtoa_r+0x84c>
 8010550:	4621      	mov	r1, r4
 8010552:	461a      	mov	r2, r3
 8010554:	4648      	mov	r0, r9
 8010556:	f000 fc4b 	bl	8010df0 <__lshift>
 801055a:	4604      	mov	r4, r0
 801055c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801055e:	2b00      	cmp	r3, #0
 8010560:	d061      	beq.n	8010626 <_dtoa_r+0x916>
 8010562:	4621      	mov	r1, r4
 8010564:	9802      	ldr	r0, [sp, #8]
 8010566:	f000 fcaf 	bl	8010ec8 <__mcmp>
 801056a:	2800      	cmp	r0, #0
 801056c:	da5b      	bge.n	8010626 <_dtoa_r+0x916>
 801056e:	2300      	movs	r3, #0
 8010570:	220a      	movs	r2, #10
 8010572:	9902      	ldr	r1, [sp, #8]
 8010574:	4648      	mov	r0, r9
 8010576:	f000 fa49 	bl	8010a0c <__multadd>
 801057a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801057c:	f107 38ff 	add.w	r8, r7, #4294967295
 8010580:	9002      	str	r0, [sp, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	f000 8178 	beq.w	8010878 <_dtoa_r+0xb68>
 8010588:	4629      	mov	r1, r5
 801058a:	2300      	movs	r3, #0
 801058c:	220a      	movs	r2, #10
 801058e:	4648      	mov	r0, r9
 8010590:	f000 fa3c 	bl	8010a0c <__multadd>
 8010594:	f1bb 0f00 	cmp.w	fp, #0
 8010598:	4605      	mov	r5, r0
 801059a:	dc6f      	bgt.n	801067c <_dtoa_r+0x96c>
 801059c:	9b07      	ldr	r3, [sp, #28]
 801059e:	2b02      	cmp	r3, #2
 80105a0:	dc49      	bgt.n	8010636 <_dtoa_r+0x926>
 80105a2:	e06b      	b.n	801067c <_dtoa_r+0x96c>
 80105a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80105a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80105aa:	e73c      	b.n	8010426 <_dtoa_r+0x716>
 80105ac:	3fe00000 	.word	0x3fe00000
 80105b0:	40240000 	.word	0x40240000
 80105b4:	9b03      	ldr	r3, [sp, #12]
 80105b6:	1e5c      	subs	r4, r3, #1
 80105b8:	9b08      	ldr	r3, [sp, #32]
 80105ba:	42a3      	cmp	r3, r4
 80105bc:	db09      	blt.n	80105d2 <_dtoa_r+0x8c2>
 80105be:	1b1c      	subs	r4, r3, r4
 80105c0:	9b03      	ldr	r3, [sp, #12]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f6bf af30 	bge.w	8010428 <_dtoa_r+0x718>
 80105c8:	9b00      	ldr	r3, [sp, #0]
 80105ca:	9a03      	ldr	r2, [sp, #12]
 80105cc:	1a9e      	subs	r6, r3, r2
 80105ce:	2300      	movs	r3, #0
 80105d0:	e72b      	b.n	801042a <_dtoa_r+0x71a>
 80105d2:	9b08      	ldr	r3, [sp, #32]
 80105d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80105d6:	1ae3      	subs	r3, r4, r3
 80105d8:	9408      	str	r4, [sp, #32]
 80105da:	9e00      	ldr	r6, [sp, #0]
 80105dc:	2400      	movs	r4, #0
 80105de:	441a      	add	r2, r3
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	920d      	str	r2, [sp, #52]	@ 0x34
 80105e4:	e721      	b.n	801042a <_dtoa_r+0x71a>
 80105e6:	9c08      	ldr	r4, [sp, #32]
 80105e8:	9e00      	ldr	r6, [sp, #0]
 80105ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80105ec:	e728      	b.n	8010440 <_dtoa_r+0x730>
 80105ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80105f2:	e751      	b.n	8010498 <_dtoa_r+0x788>
 80105f4:	9a08      	ldr	r2, [sp, #32]
 80105f6:	9902      	ldr	r1, [sp, #8]
 80105f8:	e750      	b.n	801049c <_dtoa_r+0x78c>
 80105fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80105fe:	e751      	b.n	80104a4 <_dtoa_r+0x794>
 8010600:	2300      	movs	r3, #0
 8010602:	e779      	b.n	80104f8 <_dtoa_r+0x7e8>
 8010604:	9b04      	ldr	r3, [sp, #16]
 8010606:	e777      	b.n	80104f8 <_dtoa_r+0x7e8>
 8010608:	2300      	movs	r3, #0
 801060a:	9308      	str	r3, [sp, #32]
 801060c:	e779      	b.n	8010502 <_dtoa_r+0x7f2>
 801060e:	d093      	beq.n	8010538 <_dtoa_r+0x828>
 8010610:	331c      	adds	r3, #28
 8010612:	9a00      	ldr	r2, [sp, #0]
 8010614:	441a      	add	r2, r3
 8010616:	441e      	add	r6, r3
 8010618:	9200      	str	r2, [sp, #0]
 801061a:	9a06      	ldr	r2, [sp, #24]
 801061c:	441a      	add	r2, r3
 801061e:	9206      	str	r2, [sp, #24]
 8010620:	e78a      	b.n	8010538 <_dtoa_r+0x828>
 8010622:	4603      	mov	r3, r0
 8010624:	e7f4      	b.n	8010610 <_dtoa_r+0x900>
 8010626:	9b03      	ldr	r3, [sp, #12]
 8010628:	46b8      	mov	r8, r7
 801062a:	2b00      	cmp	r3, #0
 801062c:	dc20      	bgt.n	8010670 <_dtoa_r+0x960>
 801062e:	469b      	mov	fp, r3
 8010630:	9b07      	ldr	r3, [sp, #28]
 8010632:	2b02      	cmp	r3, #2
 8010634:	dd1e      	ble.n	8010674 <_dtoa_r+0x964>
 8010636:	f1bb 0f00 	cmp.w	fp, #0
 801063a:	f47f adb1 	bne.w	80101a0 <_dtoa_r+0x490>
 801063e:	4621      	mov	r1, r4
 8010640:	465b      	mov	r3, fp
 8010642:	2205      	movs	r2, #5
 8010644:	4648      	mov	r0, r9
 8010646:	f000 f9e1 	bl	8010a0c <__multadd>
 801064a:	4601      	mov	r1, r0
 801064c:	4604      	mov	r4, r0
 801064e:	9802      	ldr	r0, [sp, #8]
 8010650:	f000 fc3a 	bl	8010ec8 <__mcmp>
 8010654:	2800      	cmp	r0, #0
 8010656:	f77f ada3 	ble.w	80101a0 <_dtoa_r+0x490>
 801065a:	4656      	mov	r6, sl
 801065c:	2331      	movs	r3, #49	@ 0x31
 801065e:	f108 0801 	add.w	r8, r8, #1
 8010662:	f806 3b01 	strb.w	r3, [r6], #1
 8010666:	e59f      	b.n	80101a8 <_dtoa_r+0x498>
 8010668:	46b8      	mov	r8, r7
 801066a:	9c03      	ldr	r4, [sp, #12]
 801066c:	4625      	mov	r5, r4
 801066e:	e7f4      	b.n	801065a <_dtoa_r+0x94a>
 8010670:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010676:	2b00      	cmp	r3, #0
 8010678:	f000 8102 	beq.w	8010880 <_dtoa_r+0xb70>
 801067c:	2e00      	cmp	r6, #0
 801067e:	dd05      	ble.n	801068c <_dtoa_r+0x97c>
 8010680:	4629      	mov	r1, r5
 8010682:	4632      	mov	r2, r6
 8010684:	4648      	mov	r0, r9
 8010686:	f000 fbb3 	bl	8010df0 <__lshift>
 801068a:	4605      	mov	r5, r0
 801068c:	9b08      	ldr	r3, [sp, #32]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d05c      	beq.n	801074c <_dtoa_r+0xa3c>
 8010692:	6869      	ldr	r1, [r5, #4]
 8010694:	4648      	mov	r0, r9
 8010696:	f000 f957 	bl	8010948 <_Balloc>
 801069a:	4606      	mov	r6, r0
 801069c:	b928      	cbnz	r0, 80106aa <_dtoa_r+0x99a>
 801069e:	4b83      	ldr	r3, [pc, #524]	@ (80108ac <_dtoa_r+0xb9c>)
 80106a0:	4602      	mov	r2, r0
 80106a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80106a6:	f7ff bb4a 	b.w	800fd3e <_dtoa_r+0x2e>
 80106aa:	692a      	ldr	r2, [r5, #16]
 80106ac:	f105 010c 	add.w	r1, r5, #12
 80106b0:	300c      	adds	r0, #12
 80106b2:	3202      	adds	r2, #2
 80106b4:	0092      	lsls	r2, r2, #2
 80106b6:	f7ff fa89 	bl	800fbcc <memcpy>
 80106ba:	2201      	movs	r2, #1
 80106bc:	4631      	mov	r1, r6
 80106be:	4648      	mov	r0, r9
 80106c0:	f000 fb96 	bl	8010df0 <__lshift>
 80106c4:	f10a 0301 	add.w	r3, sl, #1
 80106c8:	462f      	mov	r7, r5
 80106ca:	4605      	mov	r5, r0
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	eb0a 030b 	add.w	r3, sl, fp
 80106d2:	9308      	str	r3, [sp, #32]
 80106d4:	9b04      	ldr	r3, [sp, #16]
 80106d6:	f003 0301 	and.w	r3, r3, #1
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	9b00      	ldr	r3, [sp, #0]
 80106de:	4621      	mov	r1, r4
 80106e0:	9802      	ldr	r0, [sp, #8]
 80106e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80106e6:	f7ff fa85 	bl	800fbf4 <quorem>
 80106ea:	4603      	mov	r3, r0
 80106ec:	4639      	mov	r1, r7
 80106ee:	9003      	str	r0, [sp, #12]
 80106f0:	3330      	adds	r3, #48	@ 0x30
 80106f2:	9802      	ldr	r0, [sp, #8]
 80106f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f6:	f000 fbe7 	bl	8010ec8 <__mcmp>
 80106fa:	462a      	mov	r2, r5
 80106fc:	9004      	str	r0, [sp, #16]
 80106fe:	4621      	mov	r1, r4
 8010700:	4648      	mov	r0, r9
 8010702:	f000 fbfd 	bl	8010f00 <__mdiff>
 8010706:	68c2      	ldr	r2, [r0, #12]
 8010708:	4606      	mov	r6, r0
 801070a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801070c:	bb02      	cbnz	r2, 8010750 <_dtoa_r+0xa40>
 801070e:	4601      	mov	r1, r0
 8010710:	9802      	ldr	r0, [sp, #8]
 8010712:	f000 fbd9 	bl	8010ec8 <__mcmp>
 8010716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010718:	4602      	mov	r2, r0
 801071a:	4631      	mov	r1, r6
 801071c:	4648      	mov	r0, r9
 801071e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010720:	9309      	str	r3, [sp, #36]	@ 0x24
 8010722:	f000 f951 	bl	80109c8 <_Bfree>
 8010726:	9b07      	ldr	r3, [sp, #28]
 8010728:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801072a:	9e00      	ldr	r6, [sp, #0]
 801072c:	ea42 0103 	orr.w	r1, r2, r3
 8010730:	9b06      	ldr	r3, [sp, #24]
 8010732:	4319      	orrs	r1, r3
 8010734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010736:	d10d      	bne.n	8010754 <_dtoa_r+0xa44>
 8010738:	2b39      	cmp	r3, #57	@ 0x39
 801073a:	d027      	beq.n	801078c <_dtoa_r+0xa7c>
 801073c:	9a04      	ldr	r2, [sp, #16]
 801073e:	2a00      	cmp	r2, #0
 8010740:	dd01      	ble.n	8010746 <_dtoa_r+0xa36>
 8010742:	9b03      	ldr	r3, [sp, #12]
 8010744:	3331      	adds	r3, #49	@ 0x31
 8010746:	f88b 3000 	strb.w	r3, [fp]
 801074a:	e52e      	b.n	80101aa <_dtoa_r+0x49a>
 801074c:	4628      	mov	r0, r5
 801074e:	e7b9      	b.n	80106c4 <_dtoa_r+0x9b4>
 8010750:	2201      	movs	r2, #1
 8010752:	e7e2      	b.n	801071a <_dtoa_r+0xa0a>
 8010754:	9904      	ldr	r1, [sp, #16]
 8010756:	2900      	cmp	r1, #0
 8010758:	db04      	blt.n	8010764 <_dtoa_r+0xa54>
 801075a:	9807      	ldr	r0, [sp, #28]
 801075c:	4301      	orrs	r1, r0
 801075e:	9806      	ldr	r0, [sp, #24]
 8010760:	4301      	orrs	r1, r0
 8010762:	d120      	bne.n	80107a6 <_dtoa_r+0xa96>
 8010764:	2a00      	cmp	r2, #0
 8010766:	ddee      	ble.n	8010746 <_dtoa_r+0xa36>
 8010768:	2201      	movs	r2, #1
 801076a:	9902      	ldr	r1, [sp, #8]
 801076c:	4648      	mov	r0, r9
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	f000 fb3e 	bl	8010df0 <__lshift>
 8010774:	4621      	mov	r1, r4
 8010776:	9002      	str	r0, [sp, #8]
 8010778:	f000 fba6 	bl	8010ec8 <__mcmp>
 801077c:	2800      	cmp	r0, #0
 801077e:	9b00      	ldr	r3, [sp, #0]
 8010780:	dc02      	bgt.n	8010788 <_dtoa_r+0xa78>
 8010782:	d1e0      	bne.n	8010746 <_dtoa_r+0xa36>
 8010784:	07da      	lsls	r2, r3, #31
 8010786:	d5de      	bpl.n	8010746 <_dtoa_r+0xa36>
 8010788:	2b39      	cmp	r3, #57	@ 0x39
 801078a:	d1da      	bne.n	8010742 <_dtoa_r+0xa32>
 801078c:	2339      	movs	r3, #57	@ 0x39
 801078e:	f88b 3000 	strb.w	r3, [fp]
 8010792:	4633      	mov	r3, r6
 8010794:	461e      	mov	r6, r3
 8010796:	3b01      	subs	r3, #1
 8010798:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801079c:	2a39      	cmp	r2, #57	@ 0x39
 801079e:	d04f      	beq.n	8010840 <_dtoa_r+0xb30>
 80107a0:	3201      	adds	r2, #1
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	e501      	b.n	80101aa <_dtoa_r+0x49a>
 80107a6:	2a00      	cmp	r2, #0
 80107a8:	dd03      	ble.n	80107b2 <_dtoa_r+0xaa2>
 80107aa:	2b39      	cmp	r3, #57	@ 0x39
 80107ac:	d0ee      	beq.n	801078c <_dtoa_r+0xa7c>
 80107ae:	3301      	adds	r3, #1
 80107b0:	e7c9      	b.n	8010746 <_dtoa_r+0xa36>
 80107b2:	9a00      	ldr	r2, [sp, #0]
 80107b4:	9908      	ldr	r1, [sp, #32]
 80107b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80107ba:	428a      	cmp	r2, r1
 80107bc:	d029      	beq.n	8010812 <_dtoa_r+0xb02>
 80107be:	2300      	movs	r3, #0
 80107c0:	220a      	movs	r2, #10
 80107c2:	9902      	ldr	r1, [sp, #8]
 80107c4:	4648      	mov	r0, r9
 80107c6:	f000 f921 	bl	8010a0c <__multadd>
 80107ca:	42af      	cmp	r7, r5
 80107cc:	9002      	str	r0, [sp, #8]
 80107ce:	f04f 0300 	mov.w	r3, #0
 80107d2:	f04f 020a 	mov.w	r2, #10
 80107d6:	4639      	mov	r1, r7
 80107d8:	4648      	mov	r0, r9
 80107da:	d107      	bne.n	80107ec <_dtoa_r+0xadc>
 80107dc:	f000 f916 	bl	8010a0c <__multadd>
 80107e0:	4607      	mov	r7, r0
 80107e2:	4605      	mov	r5, r0
 80107e4:	9b00      	ldr	r3, [sp, #0]
 80107e6:	3301      	adds	r3, #1
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	e777      	b.n	80106dc <_dtoa_r+0x9cc>
 80107ec:	f000 f90e 	bl	8010a0c <__multadd>
 80107f0:	4629      	mov	r1, r5
 80107f2:	4607      	mov	r7, r0
 80107f4:	2300      	movs	r3, #0
 80107f6:	220a      	movs	r2, #10
 80107f8:	4648      	mov	r0, r9
 80107fa:	f000 f907 	bl	8010a0c <__multadd>
 80107fe:	4605      	mov	r5, r0
 8010800:	e7f0      	b.n	80107e4 <_dtoa_r+0xad4>
 8010802:	f1bb 0f00 	cmp.w	fp, #0
 8010806:	f04f 0700 	mov.w	r7, #0
 801080a:	bfcc      	ite	gt
 801080c:	465e      	movgt	r6, fp
 801080e:	2601      	movle	r6, #1
 8010810:	4456      	add	r6, sl
 8010812:	2201      	movs	r2, #1
 8010814:	9902      	ldr	r1, [sp, #8]
 8010816:	4648      	mov	r0, r9
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	f000 fae9 	bl	8010df0 <__lshift>
 801081e:	4621      	mov	r1, r4
 8010820:	9002      	str	r0, [sp, #8]
 8010822:	f000 fb51 	bl	8010ec8 <__mcmp>
 8010826:	2800      	cmp	r0, #0
 8010828:	dcb3      	bgt.n	8010792 <_dtoa_r+0xa82>
 801082a:	d102      	bne.n	8010832 <_dtoa_r+0xb22>
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	07db      	lsls	r3, r3, #31
 8010830:	d4af      	bmi.n	8010792 <_dtoa_r+0xa82>
 8010832:	4633      	mov	r3, r6
 8010834:	461e      	mov	r6, r3
 8010836:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801083a:	2a30      	cmp	r2, #48	@ 0x30
 801083c:	d0fa      	beq.n	8010834 <_dtoa_r+0xb24>
 801083e:	e4b4      	b.n	80101aa <_dtoa_r+0x49a>
 8010840:	459a      	cmp	sl, r3
 8010842:	d1a7      	bne.n	8010794 <_dtoa_r+0xa84>
 8010844:	2331      	movs	r3, #49	@ 0x31
 8010846:	f108 0801 	add.w	r8, r8, #1
 801084a:	f88a 3000 	strb.w	r3, [sl]
 801084e:	e4ac      	b.n	80101aa <_dtoa_r+0x49a>
 8010850:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010852:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80108b0 <_dtoa_r+0xba0>
 8010856:	b11b      	cbz	r3, 8010860 <_dtoa_r+0xb50>
 8010858:	f10a 0308 	add.w	r3, sl, #8
 801085c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	4650      	mov	r0, sl
 8010862:	b017      	add	sp, #92	@ 0x5c
 8010864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010868:	9b07      	ldr	r3, [sp, #28]
 801086a:	2b01      	cmp	r3, #1
 801086c:	f77f ae2d 	ble.w	80104ca <_dtoa_r+0x7ba>
 8010870:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010872:	9308      	str	r3, [sp, #32]
 8010874:	2001      	movs	r0, #1
 8010876:	e64c      	b.n	8010512 <_dtoa_r+0x802>
 8010878:	f1bb 0f00 	cmp.w	fp, #0
 801087c:	f77f aed8 	ble.w	8010630 <_dtoa_r+0x920>
 8010880:	4656      	mov	r6, sl
 8010882:	4621      	mov	r1, r4
 8010884:	9802      	ldr	r0, [sp, #8]
 8010886:	f7ff f9b5 	bl	800fbf4 <quorem>
 801088a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801088e:	f806 3b01 	strb.w	r3, [r6], #1
 8010892:	eba6 020a 	sub.w	r2, r6, sl
 8010896:	4593      	cmp	fp, r2
 8010898:	ddb3      	ble.n	8010802 <_dtoa_r+0xaf2>
 801089a:	2300      	movs	r3, #0
 801089c:	220a      	movs	r2, #10
 801089e:	9902      	ldr	r1, [sp, #8]
 80108a0:	4648      	mov	r0, r9
 80108a2:	f000 f8b3 	bl	8010a0c <__multadd>
 80108a6:	9002      	str	r0, [sp, #8]
 80108a8:	e7eb      	b.n	8010882 <_dtoa_r+0xb72>
 80108aa:	bf00      	nop
 80108ac:	08030a55 	.word	0x08030a55
 80108b0:	080309d9 	.word	0x080309d9

080108b4 <_free_r>:
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4605      	mov	r5, r0
 80108b8:	2900      	cmp	r1, #0
 80108ba:	d041      	beq.n	8010940 <_free_r+0x8c>
 80108bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108c0:	1f0c      	subs	r4, r1, #4
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	bfb8      	it	lt
 80108c6:	18e4      	addlt	r4, r4, r3
 80108c8:	f7fe f848 	bl	800e95c <__malloc_lock>
 80108cc:	4a1d      	ldr	r2, [pc, #116]	@ (8010944 <_free_r+0x90>)
 80108ce:	6813      	ldr	r3, [r2, #0]
 80108d0:	b933      	cbnz	r3, 80108e0 <_free_r+0x2c>
 80108d2:	6063      	str	r3, [r4, #4]
 80108d4:	6014      	str	r4, [r2, #0]
 80108d6:	4628      	mov	r0, r5
 80108d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108dc:	f7fe b844 	b.w	800e968 <__malloc_unlock>
 80108e0:	42a3      	cmp	r3, r4
 80108e2:	d908      	bls.n	80108f6 <_free_r+0x42>
 80108e4:	6820      	ldr	r0, [r4, #0]
 80108e6:	1821      	adds	r1, r4, r0
 80108e8:	428b      	cmp	r3, r1
 80108ea:	bf01      	itttt	eq
 80108ec:	6819      	ldreq	r1, [r3, #0]
 80108ee:	685b      	ldreq	r3, [r3, #4]
 80108f0:	1809      	addeq	r1, r1, r0
 80108f2:	6021      	streq	r1, [r4, #0]
 80108f4:	e7ed      	b.n	80108d2 <_free_r+0x1e>
 80108f6:	461a      	mov	r2, r3
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	b10b      	cbz	r3, 8010900 <_free_r+0x4c>
 80108fc:	42a3      	cmp	r3, r4
 80108fe:	d9fa      	bls.n	80108f6 <_free_r+0x42>
 8010900:	6811      	ldr	r1, [r2, #0]
 8010902:	1850      	adds	r0, r2, r1
 8010904:	42a0      	cmp	r0, r4
 8010906:	d10b      	bne.n	8010920 <_free_r+0x6c>
 8010908:	6820      	ldr	r0, [r4, #0]
 801090a:	4401      	add	r1, r0
 801090c:	1850      	adds	r0, r2, r1
 801090e:	6011      	str	r1, [r2, #0]
 8010910:	4283      	cmp	r3, r0
 8010912:	d1e0      	bne.n	80108d6 <_free_r+0x22>
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	4408      	add	r0, r1
 801091a:	6053      	str	r3, [r2, #4]
 801091c:	6010      	str	r0, [r2, #0]
 801091e:	e7da      	b.n	80108d6 <_free_r+0x22>
 8010920:	d902      	bls.n	8010928 <_free_r+0x74>
 8010922:	230c      	movs	r3, #12
 8010924:	602b      	str	r3, [r5, #0]
 8010926:	e7d6      	b.n	80108d6 <_free_r+0x22>
 8010928:	6820      	ldr	r0, [r4, #0]
 801092a:	1821      	adds	r1, r4, r0
 801092c:	428b      	cmp	r3, r1
 801092e:	bf02      	ittt	eq
 8010930:	6819      	ldreq	r1, [r3, #0]
 8010932:	685b      	ldreq	r3, [r3, #4]
 8010934:	1809      	addeq	r1, r1, r0
 8010936:	6063      	str	r3, [r4, #4]
 8010938:	bf08      	it	eq
 801093a:	6021      	streq	r1, [r4, #0]
 801093c:	6054      	str	r4, [r2, #4]
 801093e:	e7ca      	b.n	80108d6 <_free_r+0x22>
 8010940:	bd38      	pop	{r3, r4, r5, pc}
 8010942:	bf00      	nop
 8010944:	2000c5e0 	.word	0x2000c5e0

08010948 <_Balloc>:
 8010948:	b570      	push	{r4, r5, r6, lr}
 801094a:	69c6      	ldr	r6, [r0, #28]
 801094c:	4604      	mov	r4, r0
 801094e:	460d      	mov	r5, r1
 8010950:	b976      	cbnz	r6, 8010970 <_Balloc+0x28>
 8010952:	2010      	movs	r0, #16
 8010954:	f7fd ff58 	bl	800e808 <malloc>
 8010958:	4602      	mov	r2, r0
 801095a:	61e0      	str	r0, [r4, #28]
 801095c:	b920      	cbnz	r0, 8010968 <_Balloc+0x20>
 801095e:	4b18      	ldr	r3, [pc, #96]	@ (80109c0 <_Balloc+0x78>)
 8010960:	216b      	movs	r1, #107	@ 0x6b
 8010962:	4818      	ldr	r0, [pc, #96]	@ (80109c4 <_Balloc+0x7c>)
 8010964:	f001 ff28 	bl	80127b8 <__assert_func>
 8010968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801096c:	6006      	str	r6, [r0, #0]
 801096e:	60c6      	str	r6, [r0, #12]
 8010970:	69e6      	ldr	r6, [r4, #28]
 8010972:	68f3      	ldr	r3, [r6, #12]
 8010974:	b183      	cbz	r3, 8010998 <_Balloc+0x50>
 8010976:	69e3      	ldr	r3, [r4, #28]
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801097e:	b9b8      	cbnz	r0, 80109b0 <_Balloc+0x68>
 8010980:	2101      	movs	r1, #1
 8010982:	4620      	mov	r0, r4
 8010984:	fa01 f605 	lsl.w	r6, r1, r5
 8010988:	1d72      	adds	r2, r6, #5
 801098a:	0092      	lsls	r2, r2, #2
 801098c:	f001 ff32 	bl	80127f4 <_calloc_r>
 8010990:	b160      	cbz	r0, 80109ac <_Balloc+0x64>
 8010992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010996:	e00e      	b.n	80109b6 <_Balloc+0x6e>
 8010998:	2221      	movs	r2, #33	@ 0x21
 801099a:	2104      	movs	r1, #4
 801099c:	4620      	mov	r0, r4
 801099e:	f001 ff29 	bl	80127f4 <_calloc_r>
 80109a2:	69e3      	ldr	r3, [r4, #28]
 80109a4:	60f0      	str	r0, [r6, #12]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1e4      	bne.n	8010976 <_Balloc+0x2e>
 80109ac:	2000      	movs	r0, #0
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
 80109b0:	6802      	ldr	r2, [r0, #0]
 80109b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109b6:	2300      	movs	r3, #0
 80109b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109bc:	e7f7      	b.n	80109ae <_Balloc+0x66>
 80109be:	bf00      	nop
 80109c0:	080309e6 	.word	0x080309e6
 80109c4:	08030a66 	.word	0x08030a66

080109c8 <_Bfree>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	69c6      	ldr	r6, [r0, #28]
 80109cc:	4605      	mov	r5, r0
 80109ce:	460c      	mov	r4, r1
 80109d0:	b976      	cbnz	r6, 80109f0 <_Bfree+0x28>
 80109d2:	2010      	movs	r0, #16
 80109d4:	f7fd ff18 	bl	800e808 <malloc>
 80109d8:	4602      	mov	r2, r0
 80109da:	61e8      	str	r0, [r5, #28]
 80109dc:	b920      	cbnz	r0, 80109e8 <_Bfree+0x20>
 80109de:	4b09      	ldr	r3, [pc, #36]	@ (8010a04 <_Bfree+0x3c>)
 80109e0:	218f      	movs	r1, #143	@ 0x8f
 80109e2:	4809      	ldr	r0, [pc, #36]	@ (8010a08 <_Bfree+0x40>)
 80109e4:	f001 fee8 	bl	80127b8 <__assert_func>
 80109e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109ec:	6006      	str	r6, [r0, #0]
 80109ee:	60c6      	str	r6, [r0, #12]
 80109f0:	b13c      	cbz	r4, 8010a02 <_Bfree+0x3a>
 80109f2:	69eb      	ldr	r3, [r5, #28]
 80109f4:	6862      	ldr	r2, [r4, #4]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109fc:	6021      	str	r1, [r4, #0]
 80109fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a02:	bd70      	pop	{r4, r5, r6, pc}
 8010a04:	080309e6 	.word	0x080309e6
 8010a08:	08030a66 	.word	0x08030a66

08010a0c <__multadd>:
 8010a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a10:	f101 0c14 	add.w	ip, r1, #20
 8010a14:	4607      	mov	r7, r0
 8010a16:	460c      	mov	r4, r1
 8010a18:	461e      	mov	r6, r3
 8010a1a:	690d      	ldr	r5, [r1, #16]
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f8dc 3000 	ldr.w	r3, [ip]
 8010a22:	3001      	adds	r0, #1
 8010a24:	b299      	uxth	r1, r3
 8010a26:	4285      	cmp	r5, r0
 8010a28:	fb02 6101 	mla	r1, r2, r1, r6
 8010a2c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a30:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8010a34:	b289      	uxth	r1, r1
 8010a36:	fb02 3306 	mla	r3, r2, r6, r3
 8010a3a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a42:	f84c 1b04 	str.w	r1, [ip], #4
 8010a46:	dcea      	bgt.n	8010a1e <__multadd+0x12>
 8010a48:	b30e      	cbz	r6, 8010a8e <__multadd+0x82>
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	42ab      	cmp	r3, r5
 8010a4e:	dc19      	bgt.n	8010a84 <__multadd+0x78>
 8010a50:	6861      	ldr	r1, [r4, #4]
 8010a52:	4638      	mov	r0, r7
 8010a54:	3101      	adds	r1, #1
 8010a56:	f7ff ff77 	bl	8010948 <_Balloc>
 8010a5a:	4680      	mov	r8, r0
 8010a5c:	b928      	cbnz	r0, 8010a6a <__multadd+0x5e>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	4b0c      	ldr	r3, [pc, #48]	@ (8010a94 <__multadd+0x88>)
 8010a62:	21ba      	movs	r1, #186	@ 0xba
 8010a64:	480c      	ldr	r0, [pc, #48]	@ (8010a98 <__multadd+0x8c>)
 8010a66:	f001 fea7 	bl	80127b8 <__assert_func>
 8010a6a:	6922      	ldr	r2, [r4, #16]
 8010a6c:	f104 010c 	add.w	r1, r4, #12
 8010a70:	300c      	adds	r0, #12
 8010a72:	3202      	adds	r2, #2
 8010a74:	0092      	lsls	r2, r2, #2
 8010a76:	f7ff f8a9 	bl	800fbcc <memcpy>
 8010a7a:	4621      	mov	r1, r4
 8010a7c:	4644      	mov	r4, r8
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff ffa2 	bl	80109c8 <_Bfree>
 8010a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a88:	3501      	adds	r5, #1
 8010a8a:	615e      	str	r6, [r3, #20]
 8010a8c:	6125      	str	r5, [r4, #16]
 8010a8e:	4620      	mov	r0, r4
 8010a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a94:	08030a55 	.word	0x08030a55
 8010a98:	08030a66 	.word	0x08030a66

08010a9c <__s2b>:
 8010a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa0:	4615      	mov	r5, r2
 8010aa2:	461f      	mov	r7, r3
 8010aa4:	2209      	movs	r2, #9
 8010aa6:	3308      	adds	r3, #8
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	4606      	mov	r6, r0
 8010aac:	2100      	movs	r1, #0
 8010aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	db09      	blt.n	8010acc <__s2b+0x30>
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f7ff ff45 	bl	8010948 <_Balloc>
 8010abe:	b940      	cbnz	r0, 8010ad2 <__s2b+0x36>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	4b19      	ldr	r3, [pc, #100]	@ (8010b28 <__s2b+0x8c>)
 8010ac4:	21d3      	movs	r1, #211	@ 0xd3
 8010ac6:	4819      	ldr	r0, [pc, #100]	@ (8010b2c <__s2b+0x90>)
 8010ac8:	f001 fe76 	bl	80127b8 <__assert_func>
 8010acc:	0052      	lsls	r2, r2, #1
 8010ace:	3101      	adds	r1, #1
 8010ad0:	e7f0      	b.n	8010ab4 <__s2b+0x18>
 8010ad2:	9b08      	ldr	r3, [sp, #32]
 8010ad4:	2d09      	cmp	r5, #9
 8010ad6:	6143      	str	r3, [r0, #20]
 8010ad8:	f04f 0301 	mov.w	r3, #1
 8010adc:	6103      	str	r3, [r0, #16]
 8010ade:	dd16      	ble.n	8010b0e <__s2b+0x72>
 8010ae0:	f104 0909 	add.w	r9, r4, #9
 8010ae4:	442c      	add	r4, r5
 8010ae6:	46c8      	mov	r8, r9
 8010ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010aec:	4601      	mov	r1, r0
 8010aee:	220a      	movs	r2, #10
 8010af0:	4630      	mov	r0, r6
 8010af2:	3b30      	subs	r3, #48	@ 0x30
 8010af4:	f7ff ff8a 	bl	8010a0c <__multadd>
 8010af8:	45a0      	cmp	r8, r4
 8010afa:	d1f5      	bne.n	8010ae8 <__s2b+0x4c>
 8010afc:	f1a5 0408 	sub.w	r4, r5, #8
 8010b00:	444c      	add	r4, r9
 8010b02:	1b2d      	subs	r5, r5, r4
 8010b04:	1963      	adds	r3, r4, r5
 8010b06:	42bb      	cmp	r3, r7
 8010b08:	db04      	blt.n	8010b14 <__s2b+0x78>
 8010b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b0e:	340a      	adds	r4, #10
 8010b10:	2509      	movs	r5, #9
 8010b12:	e7f6      	b.n	8010b02 <__s2b+0x66>
 8010b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b18:	4601      	mov	r1, r0
 8010b1a:	220a      	movs	r2, #10
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	3b30      	subs	r3, #48	@ 0x30
 8010b20:	f7ff ff74 	bl	8010a0c <__multadd>
 8010b24:	e7ee      	b.n	8010b04 <__s2b+0x68>
 8010b26:	bf00      	nop
 8010b28:	08030a55 	.word	0x08030a55
 8010b2c:	08030a66 	.word	0x08030a66

08010b30 <__hi0bits>:
 8010b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010b34:	4603      	mov	r3, r0
 8010b36:	bf36      	itet	cc
 8010b38:	0403      	lslcc	r3, r0, #16
 8010b3a:	2000      	movcs	r0, #0
 8010b3c:	2010      	movcc	r0, #16
 8010b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b42:	bf3c      	itt	cc
 8010b44:	021b      	lslcc	r3, r3, #8
 8010b46:	3008      	addcc	r0, #8
 8010b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b4c:	bf3c      	itt	cc
 8010b4e:	011b      	lslcc	r3, r3, #4
 8010b50:	3004      	addcc	r0, #4
 8010b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b56:	bf3c      	itt	cc
 8010b58:	009b      	lslcc	r3, r3, #2
 8010b5a:	3002      	addcc	r0, #2
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	db05      	blt.n	8010b6c <__hi0bits+0x3c>
 8010b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010b64:	f100 0001 	add.w	r0, r0, #1
 8010b68:	bf08      	it	eq
 8010b6a:	2020      	moveq	r0, #32
 8010b6c:	4770      	bx	lr

08010b6e <__lo0bits>:
 8010b6e:	6803      	ldr	r3, [r0, #0]
 8010b70:	4602      	mov	r2, r0
 8010b72:	f013 0007 	ands.w	r0, r3, #7
 8010b76:	d00b      	beq.n	8010b90 <__lo0bits+0x22>
 8010b78:	07d9      	lsls	r1, r3, #31
 8010b7a:	d421      	bmi.n	8010bc0 <__lo0bits+0x52>
 8010b7c:	0798      	lsls	r0, r3, #30
 8010b7e:	bf47      	ittee	mi
 8010b80:	085b      	lsrmi	r3, r3, #1
 8010b82:	2001      	movmi	r0, #1
 8010b84:	089b      	lsrpl	r3, r3, #2
 8010b86:	2002      	movpl	r0, #2
 8010b88:	bf4c      	ite	mi
 8010b8a:	6013      	strmi	r3, [r2, #0]
 8010b8c:	6013      	strpl	r3, [r2, #0]
 8010b8e:	4770      	bx	lr
 8010b90:	b299      	uxth	r1, r3
 8010b92:	b909      	cbnz	r1, 8010b98 <__lo0bits+0x2a>
 8010b94:	0c1b      	lsrs	r3, r3, #16
 8010b96:	2010      	movs	r0, #16
 8010b98:	b2d9      	uxtb	r1, r3
 8010b9a:	b909      	cbnz	r1, 8010ba0 <__lo0bits+0x32>
 8010b9c:	3008      	adds	r0, #8
 8010b9e:	0a1b      	lsrs	r3, r3, #8
 8010ba0:	0719      	lsls	r1, r3, #28
 8010ba2:	bf04      	itt	eq
 8010ba4:	091b      	lsreq	r3, r3, #4
 8010ba6:	3004      	addeq	r0, #4
 8010ba8:	0799      	lsls	r1, r3, #30
 8010baa:	bf04      	itt	eq
 8010bac:	089b      	lsreq	r3, r3, #2
 8010bae:	3002      	addeq	r0, #2
 8010bb0:	07d9      	lsls	r1, r3, #31
 8010bb2:	d403      	bmi.n	8010bbc <__lo0bits+0x4e>
 8010bb4:	085b      	lsrs	r3, r3, #1
 8010bb6:	f100 0001 	add.w	r0, r0, #1
 8010bba:	d003      	beq.n	8010bc4 <__lo0bits+0x56>
 8010bbc:	6013      	str	r3, [r2, #0]
 8010bbe:	4770      	bx	lr
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	4770      	bx	lr
 8010bc4:	2020      	movs	r0, #32
 8010bc6:	4770      	bx	lr

08010bc8 <__i2b>:
 8010bc8:	b510      	push	{r4, lr}
 8010bca:	460c      	mov	r4, r1
 8010bcc:	2101      	movs	r1, #1
 8010bce:	f7ff febb 	bl	8010948 <_Balloc>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	b928      	cbnz	r0, 8010be2 <__i2b+0x1a>
 8010bd6:	4b05      	ldr	r3, [pc, #20]	@ (8010bec <__i2b+0x24>)
 8010bd8:	f240 1145 	movw	r1, #325	@ 0x145
 8010bdc:	4804      	ldr	r0, [pc, #16]	@ (8010bf0 <__i2b+0x28>)
 8010bde:	f001 fdeb 	bl	80127b8 <__assert_func>
 8010be2:	2301      	movs	r3, #1
 8010be4:	6144      	str	r4, [r0, #20]
 8010be6:	6103      	str	r3, [r0, #16]
 8010be8:	bd10      	pop	{r4, pc}
 8010bea:	bf00      	nop
 8010bec:	08030a55 	.word	0x08030a55
 8010bf0:	08030a66 	.word	0x08030a66

08010bf4 <__multiply>:
 8010bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf8:	4617      	mov	r7, r2
 8010bfa:	690a      	ldr	r2, [r1, #16]
 8010bfc:	4689      	mov	r9, r1
 8010bfe:	b085      	sub	sp, #20
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	bfa2      	ittt	ge
 8010c06:	463b      	movge	r3, r7
 8010c08:	460f      	movge	r7, r1
 8010c0a:	4699      	movge	r9, r3
 8010c0c:	693d      	ldr	r5, [r7, #16]
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	eb05 060a 	add.w	r6, r5, sl
 8010c1a:	42b3      	cmp	r3, r6
 8010c1c:	bfb8      	it	lt
 8010c1e:	3101      	addlt	r1, #1
 8010c20:	f7ff fe92 	bl	8010948 <_Balloc>
 8010c24:	b930      	cbnz	r0, 8010c34 <__multiply+0x40>
 8010c26:	4602      	mov	r2, r0
 8010c28:	4b42      	ldr	r3, [pc, #264]	@ (8010d34 <__multiply+0x140>)
 8010c2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010c2e:	4842      	ldr	r0, [pc, #264]	@ (8010d38 <__multiply+0x144>)
 8010c30:	f001 fdc2 	bl	80127b8 <__assert_func>
 8010c34:	f100 0414 	add.w	r4, r0, #20
 8010c38:	2200      	movs	r2, #0
 8010c3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010c3e:	4623      	mov	r3, r4
 8010c40:	4573      	cmp	r3, lr
 8010c42:	d320      	bcc.n	8010c86 <__multiply+0x92>
 8010c44:	f107 0814 	add.w	r8, r7, #20
 8010c48:	f109 0114 	add.w	r1, r9, #20
 8010c4c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010c50:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010c54:	9302      	str	r3, [sp, #8]
 8010c56:	1beb      	subs	r3, r5, r7
 8010c58:	3715      	adds	r7, #21
 8010c5a:	3b15      	subs	r3, #21
 8010c5c:	f023 0303 	bic.w	r3, r3, #3
 8010c60:	3304      	adds	r3, #4
 8010c62:	42bd      	cmp	r5, r7
 8010c64:	bf38      	it	cc
 8010c66:	2304      	movcc	r3, #4
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	9b02      	ldr	r3, [sp, #8]
 8010c6c:	9103      	str	r1, [sp, #12]
 8010c6e:	428b      	cmp	r3, r1
 8010c70:	d80c      	bhi.n	8010c8c <__multiply+0x98>
 8010c72:	2e00      	cmp	r6, #0
 8010c74:	dd03      	ble.n	8010c7e <__multiply+0x8a>
 8010c76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d057      	beq.n	8010d2e <__multiply+0x13a>
 8010c7e:	6106      	str	r6, [r0, #16]
 8010c80:	b005      	add	sp, #20
 8010c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c86:	f843 2b04 	str.w	r2, [r3], #4
 8010c8a:	e7d9      	b.n	8010c40 <__multiply+0x4c>
 8010c8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8010c90:	f1ba 0f00 	cmp.w	sl, #0
 8010c94:	d021      	beq.n	8010cda <__multiply+0xe6>
 8010c96:	46c4      	mov	ip, r8
 8010c98:	46a1      	mov	r9, r4
 8010c9a:	2700      	movs	r7, #0
 8010c9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8010ca4:	fa1f fb82 	uxth.w	fp, r2
 8010ca8:	4565      	cmp	r5, ip
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010cb0:	fb0a 330b 	mla	r3, sl, fp, r3
 8010cb4:	443b      	add	r3, r7
 8010cb6:	f8d9 7000 	ldr.w	r7, [r9]
 8010cba:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8010cbe:	fb0a 7202 	mla	r2, sl, r2, r7
 8010cc2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cd0:	f849 3b04 	str.w	r3, [r9], #4
 8010cd4:	d8e2      	bhi.n	8010c9c <__multiply+0xa8>
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	50e7      	str	r7, [r4, r3]
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	3104      	adds	r1, #4
 8010cde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010ce2:	f1b9 0f00 	cmp.w	r9, #0
 8010ce6:	d020      	beq.n	8010d2a <__multiply+0x136>
 8010ce8:	6823      	ldr	r3, [r4, #0]
 8010cea:	4647      	mov	r7, r8
 8010cec:	46a4      	mov	ip, r4
 8010cee:	f04f 0a00 	mov.w	sl, #0
 8010cf2:	f8b7 b000 	ldrh.w	fp, [r7]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010cfc:	fb09 220b 	mla	r2, r9, fp, r2
 8010d00:	4452      	add	r2, sl
 8010d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d06:	f84c 3b04 	str.w	r3, [ip], #4
 8010d0a:	f857 3b04 	ldr.w	r3, [r7], #4
 8010d0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d12:	f8bc 3000 	ldrh.w	r3, [ip]
 8010d16:	42bd      	cmp	r5, r7
 8010d18:	fb09 330a 	mla	r3, r9, sl, r3
 8010d1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d24:	d8e5      	bhi.n	8010cf2 <__multiply+0xfe>
 8010d26:	9a01      	ldr	r2, [sp, #4]
 8010d28:	50a3      	str	r3, [r4, r2]
 8010d2a:	3404      	adds	r4, #4
 8010d2c:	e79d      	b.n	8010c6a <__multiply+0x76>
 8010d2e:	3e01      	subs	r6, #1
 8010d30:	e79f      	b.n	8010c72 <__multiply+0x7e>
 8010d32:	bf00      	nop
 8010d34:	08030a55 	.word	0x08030a55
 8010d38:	08030a66 	.word	0x08030a66

08010d3c <__pow5mult>:
 8010d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d40:	4615      	mov	r5, r2
 8010d42:	f012 0203 	ands.w	r2, r2, #3
 8010d46:	4607      	mov	r7, r0
 8010d48:	460e      	mov	r6, r1
 8010d4a:	d007      	beq.n	8010d5c <__pow5mult+0x20>
 8010d4c:	3a01      	subs	r2, #1
 8010d4e:	4c25      	ldr	r4, [pc, #148]	@ (8010de4 <__pow5mult+0xa8>)
 8010d50:	2300      	movs	r3, #0
 8010d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d56:	f7ff fe59 	bl	8010a0c <__multadd>
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	10ad      	asrs	r5, r5, #2
 8010d5e:	d03d      	beq.n	8010ddc <__pow5mult+0xa0>
 8010d60:	69fc      	ldr	r4, [r7, #28]
 8010d62:	b97c      	cbnz	r4, 8010d84 <__pow5mult+0x48>
 8010d64:	2010      	movs	r0, #16
 8010d66:	f7fd fd4f 	bl	800e808 <malloc>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	61f8      	str	r0, [r7, #28]
 8010d6e:	b928      	cbnz	r0, 8010d7c <__pow5mult+0x40>
 8010d70:	4b1d      	ldr	r3, [pc, #116]	@ (8010de8 <__pow5mult+0xac>)
 8010d72:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010d76:	481d      	ldr	r0, [pc, #116]	@ (8010dec <__pow5mult+0xb0>)
 8010d78:	f001 fd1e 	bl	80127b8 <__assert_func>
 8010d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d80:	6004      	str	r4, [r0, #0]
 8010d82:	60c4      	str	r4, [r0, #12]
 8010d84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d8c:	b94c      	cbnz	r4, 8010da2 <__pow5mult+0x66>
 8010d8e:	f240 2171 	movw	r1, #625	@ 0x271
 8010d92:	4638      	mov	r0, r7
 8010d94:	f7ff ff18 	bl	8010bc8 <__i2b>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010da0:	6003      	str	r3, [r0, #0]
 8010da2:	f04f 0900 	mov.w	r9, #0
 8010da6:	07eb      	lsls	r3, r5, #31
 8010da8:	d50a      	bpl.n	8010dc0 <__pow5mult+0x84>
 8010daa:	4631      	mov	r1, r6
 8010dac:	4622      	mov	r2, r4
 8010dae:	4638      	mov	r0, r7
 8010db0:	f7ff ff20 	bl	8010bf4 <__multiply>
 8010db4:	4680      	mov	r8, r0
 8010db6:	4631      	mov	r1, r6
 8010db8:	4638      	mov	r0, r7
 8010dba:	4646      	mov	r6, r8
 8010dbc:	f7ff fe04 	bl	80109c8 <_Bfree>
 8010dc0:	106d      	asrs	r5, r5, #1
 8010dc2:	d00b      	beq.n	8010ddc <__pow5mult+0xa0>
 8010dc4:	6820      	ldr	r0, [r4, #0]
 8010dc6:	b938      	cbnz	r0, 8010dd8 <__pow5mult+0x9c>
 8010dc8:	4622      	mov	r2, r4
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4638      	mov	r0, r7
 8010dce:	f7ff ff11 	bl	8010bf4 <__multiply>
 8010dd2:	6020      	str	r0, [r4, #0]
 8010dd4:	f8c0 9000 	str.w	r9, [r0]
 8010dd8:	4604      	mov	r4, r0
 8010dda:	e7e4      	b.n	8010da6 <__pow5mult+0x6a>
 8010ddc:	4630      	mov	r0, r6
 8010dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010de2:	bf00      	nop
 8010de4:	08030b78 	.word	0x08030b78
 8010de8:	080309e6 	.word	0x080309e6
 8010dec:	08030a66 	.word	0x08030a66

08010df0 <__lshift>:
 8010df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	460c      	mov	r4, r1
 8010df6:	4607      	mov	r7, r0
 8010df8:	4691      	mov	r9, r2
 8010dfa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010dfe:	6923      	ldr	r3, [r4, #16]
 8010e00:	6849      	ldr	r1, [r1, #4]
 8010e02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e06:	68a3      	ldr	r3, [r4, #8]
 8010e08:	f108 0601 	add.w	r6, r8, #1
 8010e0c:	42b3      	cmp	r3, r6
 8010e0e:	db0b      	blt.n	8010e28 <__lshift+0x38>
 8010e10:	4638      	mov	r0, r7
 8010e12:	f7ff fd99 	bl	8010948 <_Balloc>
 8010e16:	4605      	mov	r5, r0
 8010e18:	b948      	cbnz	r0, 8010e2e <__lshift+0x3e>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	4b28      	ldr	r3, [pc, #160]	@ (8010ec0 <__lshift+0xd0>)
 8010e1e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010e22:	4828      	ldr	r0, [pc, #160]	@ (8010ec4 <__lshift+0xd4>)
 8010e24:	f001 fcc8 	bl	80127b8 <__assert_func>
 8010e28:	3101      	adds	r1, #1
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	e7ee      	b.n	8010e0c <__lshift+0x1c>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f100 0114 	add.w	r1, r0, #20
 8010e34:	f100 0210 	add.w	r2, r0, #16
 8010e38:	4618      	mov	r0, r3
 8010e3a:	4553      	cmp	r3, sl
 8010e3c:	db33      	blt.n	8010ea6 <__lshift+0xb6>
 8010e3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e42:	f104 0314 	add.w	r3, r4, #20
 8010e46:	6920      	ldr	r0, [r4, #16]
 8010e48:	f019 091f 	ands.w	r9, r9, #31
 8010e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e54:	d02b      	beq.n	8010eae <__lshift+0xbe>
 8010e56:	f1c9 0e20 	rsb	lr, r9, #32
 8010e5a:	468a      	mov	sl, r1
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	6818      	ldr	r0, [r3, #0]
 8010e60:	fa00 f009 	lsl.w	r0, r0, r9
 8010e64:	4310      	orrs	r0, r2
 8010e66:	f84a 0b04 	str.w	r0, [sl], #4
 8010e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e6e:	459c      	cmp	ip, r3
 8010e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e74:	d8f3      	bhi.n	8010e5e <__lshift+0x6e>
 8010e76:	ebac 0304 	sub.w	r3, ip, r4
 8010e7a:	f104 0015 	add.w	r0, r4, #21
 8010e7e:	3b15      	subs	r3, #21
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	3304      	adds	r3, #4
 8010e86:	4560      	cmp	r0, ip
 8010e88:	bf88      	it	hi
 8010e8a:	2304      	movhi	r3, #4
 8010e8c:	50ca      	str	r2, [r1, r3]
 8010e8e:	b10a      	cbz	r2, 8010e94 <__lshift+0xa4>
 8010e90:	f108 0602 	add.w	r6, r8, #2
 8010e94:	3e01      	subs	r6, #1
 8010e96:	4638      	mov	r0, r7
 8010e98:	4621      	mov	r1, r4
 8010e9a:	612e      	str	r6, [r5, #16]
 8010e9c:	f7ff fd94 	bl	80109c8 <_Bfree>
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eac:	e7c5      	b.n	8010e3a <__lshift+0x4a>
 8010eae:	3904      	subs	r1, #4
 8010eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb4:	459c      	cmp	ip, r3
 8010eb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8010eba:	d8f9      	bhi.n	8010eb0 <__lshift+0xc0>
 8010ebc:	e7ea      	b.n	8010e94 <__lshift+0xa4>
 8010ebe:	bf00      	nop
 8010ec0:	08030a55 	.word	0x08030a55
 8010ec4:	08030a66 	.word	0x08030a66

08010ec8 <__mcmp>:
 8010ec8:	4603      	mov	r3, r0
 8010eca:	690a      	ldr	r2, [r1, #16]
 8010ecc:	6900      	ldr	r0, [r0, #16]
 8010ece:	1a80      	subs	r0, r0, r2
 8010ed0:	b530      	push	{r4, r5, lr}
 8010ed2:	d10e      	bne.n	8010ef2 <__mcmp+0x2a>
 8010ed4:	3314      	adds	r3, #20
 8010ed6:	3114      	adds	r1, #20
 8010ed8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010edc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ee0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ee4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ee8:	4295      	cmp	r5, r2
 8010eea:	d003      	beq.n	8010ef4 <__mcmp+0x2c>
 8010eec:	d205      	bcs.n	8010efa <__mcmp+0x32>
 8010eee:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef2:	bd30      	pop	{r4, r5, pc}
 8010ef4:	42a3      	cmp	r3, r4
 8010ef6:	d3f3      	bcc.n	8010ee0 <__mcmp+0x18>
 8010ef8:	e7fb      	b.n	8010ef2 <__mcmp+0x2a>
 8010efa:	2001      	movs	r0, #1
 8010efc:	e7f9      	b.n	8010ef2 <__mcmp+0x2a>
	...

08010f00 <__mdiff>:
 8010f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f04:	4689      	mov	r9, r1
 8010f06:	4606      	mov	r6, r0
 8010f08:	4611      	mov	r1, r2
 8010f0a:	4614      	mov	r4, r2
 8010f0c:	4648      	mov	r0, r9
 8010f0e:	f7ff ffdb 	bl	8010ec8 <__mcmp>
 8010f12:	1e05      	subs	r5, r0, #0
 8010f14:	d112      	bne.n	8010f3c <__mdiff+0x3c>
 8010f16:	4629      	mov	r1, r5
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f7ff fd15 	bl	8010948 <_Balloc>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	b928      	cbnz	r0, 8010f2e <__mdiff+0x2e>
 8010f22:	4b41      	ldr	r3, [pc, #260]	@ (8011028 <__mdiff+0x128>)
 8010f24:	f240 2137 	movw	r1, #567	@ 0x237
 8010f28:	4840      	ldr	r0, [pc, #256]	@ (801102c <__mdiff+0x12c>)
 8010f2a:	f001 fc45 	bl	80127b8 <__assert_func>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f34:	4610      	mov	r0, r2
 8010f36:	b003      	add	sp, #12
 8010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	bfbc      	itt	lt
 8010f3e:	464b      	movlt	r3, r9
 8010f40:	46a1      	movlt	r9, r4
 8010f42:	4630      	mov	r0, r6
 8010f44:	bfb8      	it	lt
 8010f46:	2501      	movlt	r5, #1
 8010f48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010f4c:	bfb4      	ite	lt
 8010f4e:	461c      	movlt	r4, r3
 8010f50:	2500      	movge	r5, #0
 8010f52:	f7ff fcf9 	bl	8010948 <_Balloc>
 8010f56:	4602      	mov	r2, r0
 8010f58:	b918      	cbnz	r0, 8010f62 <__mdiff+0x62>
 8010f5a:	4b33      	ldr	r3, [pc, #204]	@ (8011028 <__mdiff+0x128>)
 8010f5c:	f240 2145 	movw	r1, #581	@ 0x245
 8010f60:	e7e2      	b.n	8010f28 <__mdiff+0x28>
 8010f62:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010f66:	f104 0e14 	add.w	lr, r4, #20
 8010f6a:	6926      	ldr	r6, [r4, #16]
 8010f6c:	f100 0b14 	add.w	fp, r0, #20
 8010f70:	60c5      	str	r5, [r0, #12]
 8010f72:	f109 0514 	add.w	r5, r9, #20
 8010f76:	f109 0310 	add.w	r3, r9, #16
 8010f7a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010f7e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010f82:	46d9      	mov	r9, fp
 8010f84:	f04f 0c00 	mov.w	ip, #0
 8010f88:	9301      	str	r3, [sp, #4]
 8010f8a:	9b01      	ldr	r3, [sp, #4]
 8010f8c:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010f90:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010f94:	4576      	cmp	r6, lr
 8010f96:	9301      	str	r3, [sp, #4]
 8010f98:	fa1f f38a 	uxth.w	r3, sl
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	b283      	uxth	r3, r0
 8010fa0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8010fa4:	eba1 0303 	sub.w	r3, r1, r3
 8010fa8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010fac:	4463      	add	r3, ip
 8010fae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010fb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010fbc:	f849 3b04 	str.w	r3, [r9], #4
 8010fc0:	d8e3      	bhi.n	8010f8a <__mdiff+0x8a>
 8010fc2:	1b33      	subs	r3, r6, r4
 8010fc4:	3415      	adds	r4, #21
 8010fc6:	3b15      	subs	r3, #21
 8010fc8:	f023 0303 	bic.w	r3, r3, #3
 8010fcc:	3304      	adds	r3, #4
 8010fce:	42a6      	cmp	r6, r4
 8010fd0:	bf38      	it	cc
 8010fd2:	2304      	movcc	r3, #4
 8010fd4:	441d      	add	r5, r3
 8010fd6:	445b      	add	r3, fp
 8010fd8:	462c      	mov	r4, r5
 8010fda:	461e      	mov	r6, r3
 8010fdc:	4544      	cmp	r4, r8
 8010fde:	d30e      	bcc.n	8010ffe <__mdiff+0xfe>
 8010fe0:	f108 0103 	add.w	r1, r8, #3
 8010fe4:	1b49      	subs	r1, r1, r5
 8010fe6:	3d03      	subs	r5, #3
 8010fe8:	f021 0103 	bic.w	r1, r1, #3
 8010fec:	45a8      	cmp	r8, r5
 8010fee:	bf38      	it	cc
 8010ff0:	2100      	movcc	r1, #0
 8010ff2:	440b      	add	r3, r1
 8010ff4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ff8:	b199      	cbz	r1, 8011022 <__mdiff+0x122>
 8010ffa:	6117      	str	r7, [r2, #16]
 8010ffc:	e79a      	b.n	8010f34 <__mdiff+0x34>
 8010ffe:	f854 1b04 	ldr.w	r1, [r4], #4
 8011002:	46e6      	mov	lr, ip
 8011004:	fa1f fc81 	uxth.w	ip, r1
 8011008:	0c08      	lsrs	r0, r1, #16
 801100a:	4471      	add	r1, lr
 801100c:	44f4      	add	ip, lr
 801100e:	b289      	uxth	r1, r1
 8011010:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801101c:	f846 1b04 	str.w	r1, [r6], #4
 8011020:	e7dc      	b.n	8010fdc <__mdiff+0xdc>
 8011022:	3f01      	subs	r7, #1
 8011024:	e7e6      	b.n	8010ff4 <__mdiff+0xf4>
 8011026:	bf00      	nop
 8011028:	08030a55 	.word	0x08030a55
 801102c:	08030a66 	.word	0x08030a66

08011030 <__ulp>:
 8011030:	b082      	sub	sp, #8
 8011032:	4b11      	ldr	r3, [pc, #68]	@ (8011078 <__ulp+0x48>)
 8011034:	ed8d 0b00 	vstr	d0, [sp]
 8011038:	9a01      	ldr	r2, [sp, #4]
 801103a:	4013      	ands	r3, r2
 801103c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011040:	2b00      	cmp	r3, #0
 8011042:	dc08      	bgt.n	8011056 <__ulp+0x26>
 8011044:	425b      	negs	r3, r3
 8011046:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801104a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801104e:	da04      	bge.n	801105a <__ulp+0x2a>
 8011050:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011054:	4113      	asrs	r3, r2
 8011056:	2200      	movs	r2, #0
 8011058:	e008      	b.n	801106c <__ulp+0x3c>
 801105a:	f1a2 0314 	sub.w	r3, r2, #20
 801105e:	2b1e      	cmp	r3, #30
 8011060:	bfd6      	itet	le
 8011062:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011066:	2201      	movgt	r2, #1
 8011068:	40da      	lsrle	r2, r3
 801106a:	2300      	movs	r3, #0
 801106c:	4619      	mov	r1, r3
 801106e:	4610      	mov	r0, r2
 8011070:	ec41 0b10 	vmov	d0, r0, r1
 8011074:	b002      	add	sp, #8
 8011076:	4770      	bx	lr
 8011078:	7ff00000 	.word	0x7ff00000

0801107c <__b2d>:
 801107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011080:	6906      	ldr	r6, [r0, #16]
 8011082:	f100 0814 	add.w	r8, r0, #20
 8011086:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801108a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801108e:	1f37      	subs	r7, r6, #4
 8011090:	4610      	mov	r0, r2
 8011092:	f7ff fd4d 	bl	8010b30 <__hi0bits>
 8011096:	f1c0 0320 	rsb	r3, r0, #32
 801109a:	280a      	cmp	r0, #10
 801109c:	600b      	str	r3, [r1, #0]
 801109e:	491d      	ldr	r1, [pc, #116]	@ (8011114 <__b2d+0x98>)
 80110a0:	dc16      	bgt.n	80110d0 <__b2d+0x54>
 80110a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80110a6:	45b8      	cmp	r8, r7
 80110a8:	f100 0015 	add.w	r0, r0, #21
 80110ac:	fa22 f30c 	lsr.w	r3, r2, ip
 80110b0:	fa02 f000 	lsl.w	r0, r2, r0
 80110b4:	ea43 0501 	orr.w	r5, r3, r1
 80110b8:	bf34      	ite	cc
 80110ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80110be:	2300      	movcs	r3, #0
 80110c0:	fa23 f30c 	lsr.w	r3, r3, ip
 80110c4:	4303      	orrs	r3, r0
 80110c6:	461c      	mov	r4, r3
 80110c8:	ec45 4b10 	vmov	d0, r4, r5
 80110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d0:	45b8      	cmp	r8, r7
 80110d2:	bf3a      	itte	cc
 80110d4:	f1a6 0708 	subcc.w	r7, r6, #8
 80110d8:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80110dc:	2300      	movcs	r3, #0
 80110de:	380b      	subs	r0, #11
 80110e0:	d014      	beq.n	801110c <__b2d+0x90>
 80110e2:	f1c0 0120 	rsb	r1, r0, #32
 80110e6:	4082      	lsls	r2, r0
 80110e8:	4547      	cmp	r7, r8
 80110ea:	fa23 f401 	lsr.w	r4, r3, r1
 80110ee:	fa03 f300 	lsl.w	r3, r3, r0
 80110f2:	ea42 0204 	orr.w	r2, r2, r4
 80110f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80110fa:	bf8c      	ite	hi
 80110fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011100:	2200      	movls	r2, #0
 8011102:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011106:	40ca      	lsrs	r2, r1
 8011108:	4313      	orrs	r3, r2
 801110a:	e7dc      	b.n	80110c6 <__b2d+0x4a>
 801110c:	ea42 0501 	orr.w	r5, r2, r1
 8011110:	e7d9      	b.n	80110c6 <__b2d+0x4a>
 8011112:	bf00      	nop
 8011114:	3ff00000 	.word	0x3ff00000

08011118 <__d2b>:
 8011118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801111c:	460f      	mov	r7, r1
 801111e:	2101      	movs	r1, #1
 8011120:	4616      	mov	r6, r2
 8011122:	ec59 8b10 	vmov	r8, r9, d0
 8011126:	f7ff fc0f 	bl	8010948 <_Balloc>
 801112a:	4604      	mov	r4, r0
 801112c:	b930      	cbnz	r0, 801113c <__d2b+0x24>
 801112e:	4602      	mov	r2, r0
 8011130:	4b23      	ldr	r3, [pc, #140]	@ (80111c0 <__d2b+0xa8>)
 8011132:	f240 310f 	movw	r1, #783	@ 0x30f
 8011136:	4823      	ldr	r0, [pc, #140]	@ (80111c4 <__d2b+0xac>)
 8011138:	f001 fb3e 	bl	80127b8 <__assert_func>
 801113c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011144:	b10d      	cbz	r5, 801114a <__d2b+0x32>
 8011146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801114a:	9301      	str	r3, [sp, #4]
 801114c:	f1b8 0300 	subs.w	r3, r8, #0
 8011150:	d023      	beq.n	801119a <__d2b+0x82>
 8011152:	4668      	mov	r0, sp
 8011154:	9300      	str	r3, [sp, #0]
 8011156:	f7ff fd0a 	bl	8010b6e <__lo0bits>
 801115a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801115e:	b1d0      	cbz	r0, 8011196 <__d2b+0x7e>
 8011160:	f1c0 0320 	rsb	r3, r0, #32
 8011164:	fa02 f303 	lsl.w	r3, r2, r3
 8011168:	40c2      	lsrs	r2, r0
 801116a:	430b      	orrs	r3, r1
 801116c:	9201      	str	r2, [sp, #4]
 801116e:	6163      	str	r3, [r4, #20]
 8011170:	9b01      	ldr	r3, [sp, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	61a3      	str	r3, [r4, #24]
 8011176:	bf0c      	ite	eq
 8011178:	2201      	moveq	r2, #1
 801117a:	2202      	movne	r2, #2
 801117c:	6122      	str	r2, [r4, #16]
 801117e:	b1a5      	cbz	r5, 80111aa <__d2b+0x92>
 8011180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011184:	4405      	add	r5, r0
 8011186:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801118a:	603d      	str	r5, [r7, #0]
 801118c:	6030      	str	r0, [r6, #0]
 801118e:	4620      	mov	r0, r4
 8011190:	b003      	add	sp, #12
 8011192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011196:	6161      	str	r1, [r4, #20]
 8011198:	e7ea      	b.n	8011170 <__d2b+0x58>
 801119a:	a801      	add	r0, sp, #4
 801119c:	f7ff fce7 	bl	8010b6e <__lo0bits>
 80111a0:	9b01      	ldr	r3, [sp, #4]
 80111a2:	3020      	adds	r0, #32
 80111a4:	2201      	movs	r2, #1
 80111a6:	6163      	str	r3, [r4, #20]
 80111a8:	e7e8      	b.n	801117c <__d2b+0x64>
 80111aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80111ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111b2:	6038      	str	r0, [r7, #0]
 80111b4:	6918      	ldr	r0, [r3, #16]
 80111b6:	f7ff fcbb 	bl	8010b30 <__hi0bits>
 80111ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111be:	e7e5      	b.n	801118c <__d2b+0x74>
 80111c0:	08030a55 	.word	0x08030a55
 80111c4:	08030a66 	.word	0x08030a66

080111c8 <__ratio>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	b085      	sub	sp, #20
 80111ce:	e9cd 1000 	strd	r1, r0, [sp]
 80111d2:	a902      	add	r1, sp, #8
 80111d4:	f7ff ff52 	bl	801107c <__b2d>
 80111d8:	a903      	add	r1, sp, #12
 80111da:	9800      	ldr	r0, [sp, #0]
 80111dc:	ec55 4b10 	vmov	r4, r5, d0
 80111e0:	f7ff ff4c 	bl	801107c <__b2d>
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	462f      	mov	r7, r5
 80111e8:	4620      	mov	r0, r4
 80111ea:	6919      	ldr	r1, [r3, #16]
 80111ec:	9b00      	ldr	r3, [sp, #0]
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	1ac9      	subs	r1, r1, r3
 80111f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80111f6:	ec5b ab10 	vmov	sl, fp, d0
 80111fa:	1a9b      	subs	r3, r3, r2
 80111fc:	46d9      	mov	r9, fp
 80111fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011202:	2b00      	cmp	r3, #0
 8011204:	bfcd      	iteet	gt
 8011206:	462a      	movgt	r2, r5
 8011208:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801120c:	465a      	movle	r2, fp
 801120e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011212:	bfd8      	it	le
 8011214:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011218:	4652      	mov	r2, sl
 801121a:	4639      	mov	r1, r7
 801121c:	464b      	mov	r3, r9
 801121e:	f7ef fb19 	bl	8000854 <__aeabi_ddiv>
 8011222:	ec41 0b10 	vmov	d0, r0, r1
 8011226:	b005      	add	sp, #20
 8011228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801122c <__copybits>:
 801122c:	3901      	subs	r1, #1
 801122e:	f102 0314 	add.w	r3, r2, #20
 8011232:	1149      	asrs	r1, r1, #5
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	3101      	adds	r1, #1
 8011238:	6914      	ldr	r4, [r2, #16]
 801123a:	1f05      	subs	r5, r0, #4
 801123c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011240:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011244:	42a3      	cmp	r3, r4
 8011246:	d30c      	bcc.n	8011262 <__copybits+0x36>
 8011248:	1aa3      	subs	r3, r4, r2
 801124a:	3211      	adds	r2, #17
 801124c:	3b11      	subs	r3, #17
 801124e:	f023 0303 	bic.w	r3, r3, #3
 8011252:	42a2      	cmp	r2, r4
 8011254:	bf88      	it	hi
 8011256:	2300      	movhi	r3, #0
 8011258:	4418      	add	r0, r3
 801125a:	2300      	movs	r3, #0
 801125c:	4288      	cmp	r0, r1
 801125e:	d305      	bcc.n	801126c <__copybits+0x40>
 8011260:	bd70      	pop	{r4, r5, r6, pc}
 8011262:	f853 6b04 	ldr.w	r6, [r3], #4
 8011266:	f845 6f04 	str.w	r6, [r5, #4]!
 801126a:	e7eb      	b.n	8011244 <__copybits+0x18>
 801126c:	f840 3b04 	str.w	r3, [r0], #4
 8011270:	e7f4      	b.n	801125c <__copybits+0x30>

08011272 <__any_on>:
 8011272:	f100 0214 	add.w	r2, r0, #20
 8011276:	114b      	asrs	r3, r1, #5
 8011278:	6900      	ldr	r0, [r0, #16]
 801127a:	4298      	cmp	r0, r3
 801127c:	b510      	push	{r4, lr}
 801127e:	db11      	blt.n	80112a4 <__any_on+0x32>
 8011280:	dd0a      	ble.n	8011298 <__any_on+0x26>
 8011282:	f011 011f 	ands.w	r1, r1, #31
 8011286:	d007      	beq.n	8011298 <__any_on+0x26>
 8011288:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801128c:	fa24 f001 	lsr.w	r0, r4, r1
 8011290:	fa00 f101 	lsl.w	r1, r0, r1
 8011294:	428c      	cmp	r4, r1
 8011296:	d10b      	bne.n	80112b0 <__any_on+0x3e>
 8011298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801129c:	4293      	cmp	r3, r2
 801129e:	d803      	bhi.n	80112a8 <__any_on+0x36>
 80112a0:	2000      	movs	r0, #0
 80112a2:	bd10      	pop	{r4, pc}
 80112a4:	4603      	mov	r3, r0
 80112a6:	e7f7      	b.n	8011298 <__any_on+0x26>
 80112a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112ac:	2900      	cmp	r1, #0
 80112ae:	d0f5      	beq.n	801129c <__any_on+0x2a>
 80112b0:	2001      	movs	r0, #1
 80112b2:	e7f6      	b.n	80112a2 <__any_on+0x30>

080112b4 <sulp>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4604      	mov	r4, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	4616      	mov	r6, r2
 80112bc:	ec45 4b10 	vmov	d0, r4, r5
 80112c0:	f7ff feb6 	bl	8011030 <__ulp>
 80112c4:	ec51 0b10 	vmov	r0, r1, d0
 80112c8:	b17e      	cbz	r6, 80112ea <sulp+0x36>
 80112ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80112ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	dd09      	ble.n	80112ea <sulp+0x36>
 80112d6:	051b      	lsls	r3, r3, #20
 80112d8:	2400      	movs	r4, #0
 80112da:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80112de:	4622      	mov	r2, r4
 80112e0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80112e4:	462b      	mov	r3, r5
 80112e6:	f7ef f98b 	bl	8000600 <__aeabi_dmul>
 80112ea:	ec41 0b10 	vmov	d0, r0, r1
 80112ee:	bd70      	pop	{r4, r5, r6, pc}

080112f0 <_strtod_l>:
 80112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f4:	b09f      	sub	sp, #124	@ 0x7c
 80112f6:	460c      	mov	r4, r1
 80112f8:	f04f 0a00 	mov.w	sl, #0
 80112fc:	f04f 0b00 	mov.w	fp, #0
 8011300:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011302:	2200      	movs	r2, #0
 8011304:	9005      	str	r0, [sp, #20]
 8011306:	921a      	str	r2, [sp, #104]	@ 0x68
 8011308:	460a      	mov	r2, r1
 801130a:	9219      	str	r2, [sp, #100]	@ 0x64
 801130c:	7811      	ldrb	r1, [r2, #0]
 801130e:	292b      	cmp	r1, #43	@ 0x2b
 8011310:	d04a      	beq.n	80113a8 <_strtod_l+0xb8>
 8011312:	d838      	bhi.n	8011386 <_strtod_l+0x96>
 8011314:	290d      	cmp	r1, #13
 8011316:	d832      	bhi.n	801137e <_strtod_l+0x8e>
 8011318:	2908      	cmp	r1, #8
 801131a:	d832      	bhi.n	8011382 <_strtod_l+0x92>
 801131c:	2900      	cmp	r1, #0
 801131e:	d03b      	beq.n	8011398 <_strtod_l+0xa8>
 8011320:	2200      	movs	r2, #0
 8011322:	920e      	str	r2, [sp, #56]	@ 0x38
 8011324:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011326:	782a      	ldrb	r2, [r5, #0]
 8011328:	2a30      	cmp	r2, #48	@ 0x30
 801132a:	f040 80b2 	bne.w	8011492 <_strtod_l+0x1a2>
 801132e:	786a      	ldrb	r2, [r5, #1]
 8011330:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011334:	2a58      	cmp	r2, #88	@ 0x58
 8011336:	d16e      	bne.n	8011416 <_strtod_l+0x126>
 8011338:	9302      	str	r3, [sp, #8]
 801133a:	a919      	add	r1, sp, #100	@ 0x64
 801133c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801133e:	4a90      	ldr	r2, [pc, #576]	@ (8011580 <_strtod_l+0x290>)
 8011340:	9301      	str	r3, [sp, #4]
 8011342:	ab1a      	add	r3, sp, #104	@ 0x68
 8011344:	9805      	ldr	r0, [sp, #20]
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	ab1b      	add	r3, sp, #108	@ 0x6c
 801134a:	f001 facd 	bl	80128e8 <__gethex>
 801134e:	f010 060f 	ands.w	r6, r0, #15
 8011352:	4604      	mov	r4, r0
 8011354:	d005      	beq.n	8011362 <_strtod_l+0x72>
 8011356:	2e06      	cmp	r6, #6
 8011358:	d128      	bne.n	80113ac <_strtod_l+0xbc>
 801135a:	3501      	adds	r5, #1
 801135c:	2300      	movs	r3, #0
 801135e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011360:	930e      	str	r3, [sp, #56]	@ 0x38
 8011362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011364:	2b00      	cmp	r3, #0
 8011366:	f040 858e 	bne.w	8011e86 <_strtod_l+0xb96>
 801136a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801136c:	b1cb      	cbz	r3, 80113a2 <_strtod_l+0xb2>
 801136e:	4652      	mov	r2, sl
 8011370:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011374:	ec43 2b10 	vmov	d0, r2, r3
 8011378:	b01f      	add	sp, #124	@ 0x7c
 801137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137e:	2920      	cmp	r1, #32
 8011380:	d1ce      	bne.n	8011320 <_strtod_l+0x30>
 8011382:	3201      	adds	r2, #1
 8011384:	e7c1      	b.n	801130a <_strtod_l+0x1a>
 8011386:	292d      	cmp	r1, #45	@ 0x2d
 8011388:	d1ca      	bne.n	8011320 <_strtod_l+0x30>
 801138a:	2101      	movs	r1, #1
 801138c:	910e      	str	r1, [sp, #56]	@ 0x38
 801138e:	1c51      	adds	r1, r2, #1
 8011390:	9119      	str	r1, [sp, #100]	@ 0x64
 8011392:	7852      	ldrb	r2, [r2, #1]
 8011394:	2a00      	cmp	r2, #0
 8011396:	d1c5      	bne.n	8011324 <_strtod_l+0x34>
 8011398:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801139a:	9419      	str	r4, [sp, #100]	@ 0x64
 801139c:	2b00      	cmp	r3, #0
 801139e:	f040 8570 	bne.w	8011e82 <_strtod_l+0xb92>
 80113a2:	4652      	mov	r2, sl
 80113a4:	465b      	mov	r3, fp
 80113a6:	e7e5      	b.n	8011374 <_strtod_l+0x84>
 80113a8:	2100      	movs	r1, #0
 80113aa:	e7ef      	b.n	801138c <_strtod_l+0x9c>
 80113ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80113ae:	b13a      	cbz	r2, 80113c0 <_strtod_l+0xd0>
 80113b0:	2135      	movs	r1, #53	@ 0x35
 80113b2:	a81c      	add	r0, sp, #112	@ 0x70
 80113b4:	f7ff ff3a 	bl	801122c <__copybits>
 80113b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113ba:	9805      	ldr	r0, [sp, #20]
 80113bc:	f7ff fb04 	bl	80109c8 <_Bfree>
 80113c0:	3e01      	subs	r6, #1
 80113c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80113c4:	2e04      	cmp	r6, #4
 80113c6:	d806      	bhi.n	80113d6 <_strtod_l+0xe6>
 80113c8:	e8df f006 	tbb	[pc, r6]
 80113cc:	201d0314 	.word	0x201d0314
 80113d0:	14          	.byte	0x14
 80113d1:	00          	.byte	0x00
 80113d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80113d6:	05e1      	lsls	r1, r4, #23
 80113d8:	bf48      	it	mi
 80113da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80113de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80113e2:	0d1b      	lsrs	r3, r3, #20
 80113e4:	051b      	lsls	r3, r3, #20
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1bb      	bne.n	8011362 <_strtod_l+0x72>
 80113ea:	f7fe fbb7 	bl	800fb5c <__errno>
 80113ee:	2322      	movs	r3, #34	@ 0x22
 80113f0:	6003      	str	r3, [r0, #0]
 80113f2:	e7b6      	b.n	8011362 <_strtod_l+0x72>
 80113f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80113f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80113fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011404:	e7e7      	b.n	80113d6 <_strtod_l+0xe6>
 8011406:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011588 <_strtod_l+0x298>
 801140a:	e7e4      	b.n	80113d6 <_strtod_l+0xe6>
 801140c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011410:	f04f 3aff 	mov.w	sl, #4294967295
 8011414:	e7df      	b.n	80113d6 <_strtod_l+0xe6>
 8011416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	9219      	str	r2, [sp, #100]	@ 0x64
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	2b30      	cmp	r3, #48	@ 0x30
 8011420:	d0f9      	beq.n	8011416 <_strtod_l+0x126>
 8011422:	2b00      	cmp	r3, #0
 8011424:	d09d      	beq.n	8011362 <_strtod_l+0x72>
 8011426:	2301      	movs	r3, #1
 8011428:	2700      	movs	r7, #0
 801142a:	9308      	str	r3, [sp, #32]
 801142c:	220a      	movs	r2, #10
 801142e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011430:	46b9      	mov	r9, r7
 8011432:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011434:	930c      	str	r3, [sp, #48]	@ 0x30
 8011436:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011438:	7805      	ldrb	r5, [r0, #0]
 801143a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801143e:	b2d9      	uxtb	r1, r3
 8011440:	2909      	cmp	r1, #9
 8011442:	d928      	bls.n	8011496 <_strtod_l+0x1a6>
 8011444:	2201      	movs	r2, #1
 8011446:	494f      	ldr	r1, [pc, #316]	@ (8011584 <_strtod_l+0x294>)
 8011448:	f001 f979 	bl	801273e <strncmp>
 801144c:	2800      	cmp	r0, #0
 801144e:	d032      	beq.n	80114b6 <_strtod_l+0x1c6>
 8011450:	2000      	movs	r0, #0
 8011452:	462a      	mov	r2, r5
 8011454:	464d      	mov	r5, r9
 8011456:	4603      	mov	r3, r0
 8011458:	900a      	str	r0, [sp, #40]	@ 0x28
 801145a:	2a65      	cmp	r2, #101	@ 0x65
 801145c:	d001      	beq.n	8011462 <_strtod_l+0x172>
 801145e:	2a45      	cmp	r2, #69	@ 0x45
 8011460:	d114      	bne.n	801148c <_strtod_l+0x19c>
 8011462:	b91d      	cbnz	r5, 801146c <_strtod_l+0x17c>
 8011464:	9a08      	ldr	r2, [sp, #32]
 8011466:	4302      	orrs	r2, r0
 8011468:	d096      	beq.n	8011398 <_strtod_l+0xa8>
 801146a:	2500      	movs	r5, #0
 801146c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801146e:	1c62      	adds	r2, r4, #1
 8011470:	9219      	str	r2, [sp, #100]	@ 0x64
 8011472:	7862      	ldrb	r2, [r4, #1]
 8011474:	2a2b      	cmp	r2, #43	@ 0x2b
 8011476:	d079      	beq.n	801156c <_strtod_l+0x27c>
 8011478:	2a2d      	cmp	r2, #45	@ 0x2d
 801147a:	d07d      	beq.n	8011578 <_strtod_l+0x288>
 801147c:	f04f 0c00 	mov.w	ip, #0
 8011480:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011484:	2909      	cmp	r1, #9
 8011486:	f240 8085 	bls.w	8011594 <_strtod_l+0x2a4>
 801148a:	9419      	str	r4, [sp, #100]	@ 0x64
 801148c:	f04f 0800 	mov.w	r8, #0
 8011490:	e0a5      	b.n	80115de <_strtod_l+0x2ee>
 8011492:	2300      	movs	r3, #0
 8011494:	e7c8      	b.n	8011428 <_strtod_l+0x138>
 8011496:	f1b9 0f08 	cmp.w	r9, #8
 801149a:	f100 0001 	add.w	r0, r0, #1
 801149e:	f109 0901 	add.w	r9, r9, #1
 80114a2:	bfd4      	ite	le
 80114a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80114a6:	fb02 3707 	mlagt	r7, r2, r7, r3
 80114aa:	9019      	str	r0, [sp, #100]	@ 0x64
 80114ac:	bfdc      	itt	le
 80114ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80114b2:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80114b4:	e7bf      	b.n	8011436 <_strtod_l+0x146>
 80114b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114b8:	1c5a      	adds	r2, r3, #1
 80114ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80114bc:	785a      	ldrb	r2, [r3, #1]
 80114be:	f1b9 0f00 	cmp.w	r9, #0
 80114c2:	d03a      	beq.n	801153a <_strtod_l+0x24a>
 80114c4:	464d      	mov	r5, r9
 80114c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80114c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80114cc:	2b09      	cmp	r3, #9
 80114ce:	d912      	bls.n	80114f6 <_strtod_l+0x206>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e7c2      	b.n	801145a <_strtod_l+0x16a>
 80114d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114d6:	3001      	adds	r0, #1
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	9219      	str	r2, [sp, #100]	@ 0x64
 80114dc:	785a      	ldrb	r2, [r3, #1]
 80114de:	2a30      	cmp	r2, #48	@ 0x30
 80114e0:	d0f8      	beq.n	80114d4 <_strtod_l+0x1e4>
 80114e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80114e6:	2b08      	cmp	r3, #8
 80114e8:	f200 84d2 	bhi.w	8011e90 <_strtod_l+0xba0>
 80114ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80114ee:	2000      	movs	r0, #0
 80114f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114f2:	4605      	mov	r5, r0
 80114f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80114f6:	3a30      	subs	r2, #48	@ 0x30
 80114f8:	f100 0301 	add.w	r3, r0, #1
 80114fc:	d017      	beq.n	801152e <_strtod_l+0x23e>
 80114fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011500:	462e      	mov	r6, r5
 8011502:	f04f 0e0a 	mov.w	lr, #10
 8011506:	4419      	add	r1, r3
 8011508:	910a      	str	r1, [sp, #40]	@ 0x28
 801150a:	1c71      	adds	r1, r6, #1
 801150c:	eba1 0c05 	sub.w	ip, r1, r5
 8011510:	4563      	cmp	r3, ip
 8011512:	dc14      	bgt.n	801153e <_strtod_l+0x24e>
 8011514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011518:	182b      	adds	r3, r5, r0
 801151a:	3501      	adds	r5, #1
 801151c:	2b08      	cmp	r3, #8
 801151e:	4405      	add	r5, r0
 8011520:	dc1a      	bgt.n	8011558 <_strtod_l+0x268>
 8011522:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011524:	230a      	movs	r3, #10
 8011526:	fb03 2301 	mla	r3, r3, r1, r2
 801152a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801152c:	2300      	movs	r3, #0
 801152e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011530:	4618      	mov	r0, r3
 8011532:	1c51      	adds	r1, r2, #1
 8011534:	9119      	str	r1, [sp, #100]	@ 0x64
 8011536:	7852      	ldrb	r2, [r2, #1]
 8011538:	e7c6      	b.n	80114c8 <_strtod_l+0x1d8>
 801153a:	4648      	mov	r0, r9
 801153c:	e7cf      	b.n	80114de <_strtod_l+0x1ee>
 801153e:	2e08      	cmp	r6, #8
 8011540:	dc05      	bgt.n	801154e <_strtod_l+0x25e>
 8011542:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011544:	fb0e f606 	mul.w	r6, lr, r6
 8011548:	960b      	str	r6, [sp, #44]	@ 0x2c
 801154a:	460e      	mov	r6, r1
 801154c:	e7dd      	b.n	801150a <_strtod_l+0x21a>
 801154e:	2910      	cmp	r1, #16
 8011550:	bfd8      	it	le
 8011552:	fb0e f707 	mulle.w	r7, lr, r7
 8011556:	e7f8      	b.n	801154a <_strtod_l+0x25a>
 8011558:	2b0f      	cmp	r3, #15
 801155a:	bfdc      	itt	le
 801155c:	230a      	movle	r3, #10
 801155e:	fb03 2707 	mlale	r7, r3, r7, r2
 8011562:	e7e3      	b.n	801152c <_strtod_l+0x23c>
 8011564:	2300      	movs	r3, #0
 8011566:	930a      	str	r3, [sp, #40]	@ 0x28
 8011568:	2301      	movs	r3, #1
 801156a:	e77b      	b.n	8011464 <_strtod_l+0x174>
 801156c:	f04f 0c00 	mov.w	ip, #0
 8011570:	1ca2      	adds	r2, r4, #2
 8011572:	9219      	str	r2, [sp, #100]	@ 0x64
 8011574:	78a2      	ldrb	r2, [r4, #2]
 8011576:	e783      	b.n	8011480 <_strtod_l+0x190>
 8011578:	f04f 0c01 	mov.w	ip, #1
 801157c:	e7f8      	b.n	8011570 <_strtod_l+0x280>
 801157e:	bf00      	nop
 8011580:	08030c8c 	.word	0x08030c8c
 8011584:	08030abf 	.word	0x08030abf
 8011588:	7ff00000 	.word	0x7ff00000
 801158c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801158e:	1c51      	adds	r1, r2, #1
 8011590:	9119      	str	r1, [sp, #100]	@ 0x64
 8011592:	7852      	ldrb	r2, [r2, #1]
 8011594:	2a30      	cmp	r2, #48	@ 0x30
 8011596:	d0f9      	beq.n	801158c <_strtod_l+0x29c>
 8011598:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801159c:	2908      	cmp	r1, #8
 801159e:	f63f af75 	bhi.w	801148c <_strtod_l+0x19c>
 80115a2:	3a30      	subs	r2, #48	@ 0x30
 80115a4:	f04f 080a 	mov.w	r8, #10
 80115a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80115aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80115ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80115ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80115b0:	1c56      	adds	r6, r2, #1
 80115b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80115b4:	7852      	ldrb	r2, [r2, #1]
 80115b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80115ba:	f1be 0f09 	cmp.w	lr, #9
 80115be:	d939      	bls.n	8011634 <_strtod_l+0x344>
 80115c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80115c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80115c6:	1a76      	subs	r6, r6, r1
 80115c8:	2e08      	cmp	r6, #8
 80115ca:	dc03      	bgt.n	80115d4 <_strtod_l+0x2e4>
 80115cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80115ce:	4588      	cmp	r8, r1
 80115d0:	bfa8      	it	ge
 80115d2:	4688      	movge	r8, r1
 80115d4:	f1bc 0f00 	cmp.w	ip, #0
 80115d8:	d001      	beq.n	80115de <_strtod_l+0x2ee>
 80115da:	f1c8 0800 	rsb	r8, r8, #0
 80115de:	2d00      	cmp	r5, #0
 80115e0:	d14e      	bne.n	8011680 <_strtod_l+0x390>
 80115e2:	9908      	ldr	r1, [sp, #32]
 80115e4:	4308      	orrs	r0, r1
 80115e6:	f47f aebc 	bne.w	8011362 <_strtod_l+0x72>
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f47f aed4 	bne.w	8011398 <_strtod_l+0xa8>
 80115f0:	2a69      	cmp	r2, #105	@ 0x69
 80115f2:	d028      	beq.n	8011646 <_strtod_l+0x356>
 80115f4:	dc25      	bgt.n	8011642 <_strtod_l+0x352>
 80115f6:	2a49      	cmp	r2, #73	@ 0x49
 80115f8:	d025      	beq.n	8011646 <_strtod_l+0x356>
 80115fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80115fc:	f47f aecc 	bne.w	8011398 <_strtod_l+0xa8>
 8011600:	499a      	ldr	r1, [pc, #616]	@ (801186c <_strtod_l+0x57c>)
 8011602:	a819      	add	r0, sp, #100	@ 0x64
 8011604:	f001 fb90 	bl	8012d28 <__match>
 8011608:	2800      	cmp	r0, #0
 801160a:	f43f aec5 	beq.w	8011398 <_strtod_l+0xa8>
 801160e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	2b28      	cmp	r3, #40	@ 0x28
 8011614:	d12e      	bne.n	8011674 <_strtod_l+0x384>
 8011616:	aa1c      	add	r2, sp, #112	@ 0x70
 8011618:	4995      	ldr	r1, [pc, #596]	@ (8011870 <_strtod_l+0x580>)
 801161a:	a819      	add	r0, sp, #100	@ 0x64
 801161c:	f001 fb98 	bl	8012d50 <__hexnan>
 8011620:	2805      	cmp	r0, #5
 8011622:	d127      	bne.n	8011674 <_strtod_l+0x384>
 8011624:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011626:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801162a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801162e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011632:	e696      	b.n	8011362 <_strtod_l+0x72>
 8011634:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011636:	fb08 2101 	mla	r1, r8, r1, r2
 801163a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801163e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011640:	e7b5      	b.n	80115ae <_strtod_l+0x2be>
 8011642:	2a6e      	cmp	r2, #110	@ 0x6e
 8011644:	e7da      	b.n	80115fc <_strtod_l+0x30c>
 8011646:	498b      	ldr	r1, [pc, #556]	@ (8011874 <_strtod_l+0x584>)
 8011648:	a819      	add	r0, sp, #100	@ 0x64
 801164a:	f001 fb6d 	bl	8012d28 <__match>
 801164e:	2800      	cmp	r0, #0
 8011650:	f43f aea2 	beq.w	8011398 <_strtod_l+0xa8>
 8011654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011656:	a819      	add	r0, sp, #100	@ 0x64
 8011658:	4987      	ldr	r1, [pc, #540]	@ (8011878 <_strtod_l+0x588>)
 801165a:	3b01      	subs	r3, #1
 801165c:	9319      	str	r3, [sp, #100]	@ 0x64
 801165e:	f001 fb63 	bl	8012d28 <__match>
 8011662:	b910      	cbnz	r0, 801166a <_strtod_l+0x37a>
 8011664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011666:	3301      	adds	r3, #1
 8011668:	9319      	str	r3, [sp, #100]	@ 0x64
 801166a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011888 <_strtod_l+0x598>
 801166e:	f04f 0a00 	mov.w	sl, #0
 8011672:	e676      	b.n	8011362 <_strtod_l+0x72>
 8011674:	4881      	ldr	r0, [pc, #516]	@ (801187c <_strtod_l+0x58c>)
 8011676:	f001 f897 	bl	80127a8 <nan>
 801167a:	ec5b ab10 	vmov	sl, fp, d0
 801167e:	e670      	b.n	8011362 <_strtod_l+0x72>
 8011680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011682:	f1b9 0f00 	cmp.w	r9, #0
 8011686:	bf08      	it	eq
 8011688:	46a9      	moveq	r9, r5
 801168a:	2d10      	cmp	r5, #16
 801168c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801168e:	eba8 0303 	sub.w	r3, r8, r3
 8011692:	462c      	mov	r4, r5
 8011694:	bfa8      	it	ge
 8011696:	2410      	movge	r4, #16
 8011698:	9309      	str	r3, [sp, #36]	@ 0x24
 801169a:	f7ee ff37 	bl	800050c <__aeabi_ui2d>
 801169e:	2d09      	cmp	r5, #9
 80116a0:	4682      	mov	sl, r0
 80116a2:	468b      	mov	fp, r1
 80116a4:	dc13      	bgt.n	80116ce <_strtod_l+0x3de>
 80116a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f43f ae5a 	beq.w	8011362 <_strtod_l+0x72>
 80116ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116b0:	dd78      	ble.n	80117a4 <_strtod_l+0x4b4>
 80116b2:	2b16      	cmp	r3, #22
 80116b4:	dc5f      	bgt.n	8011776 <_strtod_l+0x486>
 80116b6:	4972      	ldr	r1, [pc, #456]	@ (8011880 <_strtod_l+0x590>)
 80116b8:	4652      	mov	r2, sl
 80116ba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80116be:	465b      	mov	r3, fp
 80116c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116c4:	f7ee ff9c 	bl	8000600 <__aeabi_dmul>
 80116c8:	4682      	mov	sl, r0
 80116ca:	468b      	mov	fp, r1
 80116cc:	e649      	b.n	8011362 <_strtod_l+0x72>
 80116ce:	4b6c      	ldr	r3, [pc, #432]	@ (8011880 <_strtod_l+0x590>)
 80116d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80116d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80116d8:	f7ee ff92 	bl	8000600 <__aeabi_dmul>
 80116dc:	4682      	mov	sl, r0
 80116de:	468b      	mov	fp, r1
 80116e0:	4638      	mov	r0, r7
 80116e2:	f7ee ff13 	bl	800050c <__aeabi_ui2d>
 80116e6:	4602      	mov	r2, r0
 80116e8:	460b      	mov	r3, r1
 80116ea:	4650      	mov	r0, sl
 80116ec:	4659      	mov	r1, fp
 80116ee:	f7ee fdd1 	bl	8000294 <__adddf3>
 80116f2:	2d0f      	cmp	r5, #15
 80116f4:	4682      	mov	sl, r0
 80116f6:	468b      	mov	fp, r1
 80116f8:	ddd5      	ble.n	80116a6 <_strtod_l+0x3b6>
 80116fa:	1b2c      	subs	r4, r5, r4
 80116fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116fe:	441c      	add	r4, r3
 8011700:	2c00      	cmp	r4, #0
 8011702:	f340 8093 	ble.w	801182c <_strtod_l+0x53c>
 8011706:	f014 030f 	ands.w	r3, r4, #15
 801170a:	d00a      	beq.n	8011722 <_strtod_l+0x432>
 801170c:	495c      	ldr	r1, [pc, #368]	@ (8011880 <_strtod_l+0x590>)
 801170e:	4652      	mov	r2, sl
 8011710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011714:	465b      	mov	r3, fp
 8011716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801171a:	f7ee ff71 	bl	8000600 <__aeabi_dmul>
 801171e:	4682      	mov	sl, r0
 8011720:	468b      	mov	fp, r1
 8011722:	f034 040f 	bics.w	r4, r4, #15
 8011726:	d073      	beq.n	8011810 <_strtod_l+0x520>
 8011728:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801172c:	dd49      	ble.n	80117c2 <_strtod_l+0x4d2>
 801172e:	2400      	movs	r4, #0
 8011730:	46a0      	mov	r8, r4
 8011732:	46a1      	mov	r9, r4
 8011734:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011736:	2322      	movs	r3, #34	@ 0x22
 8011738:	9a05      	ldr	r2, [sp, #20]
 801173a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011888 <_strtod_l+0x598>
 801173e:	f04f 0a00 	mov.w	sl, #0
 8011742:	6013      	str	r3, [r2, #0]
 8011744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011746:	2b00      	cmp	r3, #0
 8011748:	f43f ae0b 	beq.w	8011362 <_strtod_l+0x72>
 801174c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801174e:	9805      	ldr	r0, [sp, #20]
 8011750:	f7ff f93a 	bl	80109c8 <_Bfree>
 8011754:	4649      	mov	r1, r9
 8011756:	9805      	ldr	r0, [sp, #20]
 8011758:	f7ff f936 	bl	80109c8 <_Bfree>
 801175c:	4641      	mov	r1, r8
 801175e:	9805      	ldr	r0, [sp, #20]
 8011760:	f7ff f932 	bl	80109c8 <_Bfree>
 8011764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011766:	9805      	ldr	r0, [sp, #20]
 8011768:	f7ff f92e 	bl	80109c8 <_Bfree>
 801176c:	4621      	mov	r1, r4
 801176e:	9805      	ldr	r0, [sp, #20]
 8011770:	f7ff f92a 	bl	80109c8 <_Bfree>
 8011774:	e5f5      	b.n	8011362 <_strtod_l+0x72>
 8011776:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801177a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801177c:	4293      	cmp	r3, r2
 801177e:	dbbc      	blt.n	80116fa <_strtod_l+0x40a>
 8011780:	f1c5 050f 	rsb	r5, r5, #15
 8011784:	4c3e      	ldr	r4, [pc, #248]	@ (8011880 <_strtod_l+0x590>)
 8011786:	4652      	mov	r2, sl
 8011788:	465b      	mov	r3, fp
 801178a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801178e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011792:	f7ee ff35 	bl	8000600 <__aeabi_dmul>
 8011796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011798:	1b5d      	subs	r5, r3, r5
 801179a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801179e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80117a2:	e78f      	b.n	80116c4 <_strtod_l+0x3d4>
 80117a4:	3316      	adds	r3, #22
 80117a6:	dba8      	blt.n	80116fa <_strtod_l+0x40a>
 80117a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117aa:	4650      	mov	r0, sl
 80117ac:	4659      	mov	r1, fp
 80117ae:	eba3 0808 	sub.w	r8, r3, r8
 80117b2:	4b33      	ldr	r3, [pc, #204]	@ (8011880 <_strtod_l+0x590>)
 80117b4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80117b8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80117bc:	f7ef f84a 	bl	8000854 <__aeabi_ddiv>
 80117c0:	e782      	b.n	80116c8 <_strtod_l+0x3d8>
 80117c2:	2300      	movs	r3, #0
 80117c4:	1124      	asrs	r4, r4, #4
 80117c6:	4650      	mov	r0, sl
 80117c8:	4659      	mov	r1, fp
 80117ca:	4f2e      	ldr	r7, [pc, #184]	@ (8011884 <_strtod_l+0x594>)
 80117cc:	461e      	mov	r6, r3
 80117ce:	2c01      	cmp	r4, #1
 80117d0:	dc21      	bgt.n	8011816 <_strtod_l+0x526>
 80117d2:	b10b      	cbz	r3, 80117d8 <_strtod_l+0x4e8>
 80117d4:	4682      	mov	sl, r0
 80117d6:	468b      	mov	fp, r1
 80117d8:	492a      	ldr	r1, [pc, #168]	@ (8011884 <_strtod_l+0x594>)
 80117da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80117de:	4652      	mov	r2, sl
 80117e0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80117e4:	465b      	mov	r3, fp
 80117e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117ea:	f7ee ff09 	bl	8000600 <__aeabi_dmul>
 80117ee:	4b26      	ldr	r3, [pc, #152]	@ (8011888 <_strtod_l+0x598>)
 80117f0:	460a      	mov	r2, r1
 80117f2:	4682      	mov	sl, r0
 80117f4:	400b      	ands	r3, r1
 80117f6:	4925      	ldr	r1, [pc, #148]	@ (801188c <_strtod_l+0x59c>)
 80117f8:	428b      	cmp	r3, r1
 80117fa:	d898      	bhi.n	801172e <_strtod_l+0x43e>
 80117fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011800:	428b      	cmp	r3, r1
 8011802:	bf86      	itte	hi
 8011804:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011890 <_strtod_l+0x5a0>
 8011808:	f04f 3aff 	movhi.w	sl, #4294967295
 801180c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011810:	2300      	movs	r3, #0
 8011812:	9308      	str	r3, [sp, #32]
 8011814:	e076      	b.n	8011904 <_strtod_l+0x614>
 8011816:	07e2      	lsls	r2, r4, #31
 8011818:	d504      	bpl.n	8011824 <_strtod_l+0x534>
 801181a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801181e:	f7ee feef 	bl	8000600 <__aeabi_dmul>
 8011822:	2301      	movs	r3, #1
 8011824:	3601      	adds	r6, #1
 8011826:	1064      	asrs	r4, r4, #1
 8011828:	3708      	adds	r7, #8
 801182a:	e7d0      	b.n	80117ce <_strtod_l+0x4de>
 801182c:	d0f0      	beq.n	8011810 <_strtod_l+0x520>
 801182e:	4264      	negs	r4, r4
 8011830:	f014 020f 	ands.w	r2, r4, #15
 8011834:	d00a      	beq.n	801184c <_strtod_l+0x55c>
 8011836:	4b12      	ldr	r3, [pc, #72]	@ (8011880 <_strtod_l+0x590>)
 8011838:	4650      	mov	r0, sl
 801183a:	4659      	mov	r1, fp
 801183c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011844:	f7ef f806 	bl	8000854 <__aeabi_ddiv>
 8011848:	4682      	mov	sl, r0
 801184a:	468b      	mov	fp, r1
 801184c:	1124      	asrs	r4, r4, #4
 801184e:	d0df      	beq.n	8011810 <_strtod_l+0x520>
 8011850:	2c1f      	cmp	r4, #31
 8011852:	dd1f      	ble.n	8011894 <_strtod_l+0x5a4>
 8011854:	2400      	movs	r4, #0
 8011856:	46a0      	mov	r8, r4
 8011858:	46a1      	mov	r9, r4
 801185a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801185c:	2322      	movs	r3, #34	@ 0x22
 801185e:	9a05      	ldr	r2, [sp, #20]
 8011860:	f04f 0a00 	mov.w	sl, #0
 8011864:	f04f 0b00 	mov.w	fp, #0
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	e76b      	b.n	8011744 <_strtod_l+0x454>
 801186c:	080309ad 	.word	0x080309ad
 8011870:	08030c78 	.word	0x08030c78
 8011874:	080309a5 	.word	0x080309a5
 8011878:	080309dc 	.word	0x080309dc
 801187c:	08030b15 	.word	0x08030b15
 8011880:	08030bb0 	.word	0x08030bb0
 8011884:	08030b88 	.word	0x08030b88
 8011888:	7ff00000 	.word	0x7ff00000
 801188c:	7ca00000 	.word	0x7ca00000
 8011890:	7fefffff 	.word	0x7fefffff
 8011894:	f014 0310 	ands.w	r3, r4, #16
 8011898:	4650      	mov	r0, sl
 801189a:	4659      	mov	r1, fp
 801189c:	4ea9      	ldr	r6, [pc, #676]	@ (8011b44 <_strtod_l+0x854>)
 801189e:	bf18      	it	ne
 80118a0:	236a      	movne	r3, #106	@ 0x6a
 80118a2:	9308      	str	r3, [sp, #32]
 80118a4:	2300      	movs	r3, #0
 80118a6:	07e7      	lsls	r7, r4, #31
 80118a8:	d504      	bpl.n	80118b4 <_strtod_l+0x5c4>
 80118aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80118ae:	f7ee fea7 	bl	8000600 <__aeabi_dmul>
 80118b2:	2301      	movs	r3, #1
 80118b4:	1064      	asrs	r4, r4, #1
 80118b6:	f106 0608 	add.w	r6, r6, #8
 80118ba:	d1f4      	bne.n	80118a6 <_strtod_l+0x5b6>
 80118bc:	b10b      	cbz	r3, 80118c2 <_strtod_l+0x5d2>
 80118be:	4682      	mov	sl, r0
 80118c0:	468b      	mov	fp, r1
 80118c2:	9b08      	ldr	r3, [sp, #32]
 80118c4:	b1b3      	cbz	r3, 80118f4 <_strtod_l+0x604>
 80118c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80118ca:	4659      	mov	r1, fp
 80118cc:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dd0f      	ble.n	80118f4 <_strtod_l+0x604>
 80118d4:	2b1f      	cmp	r3, #31
 80118d6:	dd56      	ble.n	8011986 <_strtod_l+0x696>
 80118d8:	2b34      	cmp	r3, #52	@ 0x34
 80118da:	f04f 0a00 	mov.w	sl, #0
 80118de:	bfdb      	ittet	le
 80118e0:	f04f 33ff 	movle.w	r3, #4294967295
 80118e4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80118e8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80118ec:	4093      	lslle	r3, r2
 80118ee:	bfd8      	it	le
 80118f0:	ea03 0b01 	andle.w	fp, r3, r1
 80118f4:	2200      	movs	r2, #0
 80118f6:	2300      	movs	r3, #0
 80118f8:	4650      	mov	r0, sl
 80118fa:	4659      	mov	r1, fp
 80118fc:	f7ef f8e8 	bl	8000ad0 <__aeabi_dcmpeq>
 8011900:	2800      	cmp	r0, #0
 8011902:	d1a7      	bne.n	8011854 <_strtod_l+0x564>
 8011904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011906:	464a      	mov	r2, r9
 8011908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	462b      	mov	r3, r5
 801190e:	9805      	ldr	r0, [sp, #20]
 8011910:	f7ff f8c4 	bl	8010a9c <__s2b>
 8011914:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011916:	2800      	cmp	r0, #0
 8011918:	f43f af09 	beq.w	801172e <_strtod_l+0x43e>
 801191c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801191e:	2400      	movs	r4, #0
 8011920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011922:	2a00      	cmp	r2, #0
 8011924:	eba3 0308 	sub.w	r3, r3, r8
 8011928:	46a0      	mov	r8, r4
 801192a:	bfa8      	it	ge
 801192c:	2300      	movge	r3, #0
 801192e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011930:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011934:	9316      	str	r3, [sp, #88]	@ 0x58
 8011936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011938:	9805      	ldr	r0, [sp, #20]
 801193a:	6859      	ldr	r1, [r3, #4]
 801193c:	f7ff f804 	bl	8010948 <_Balloc>
 8011940:	4681      	mov	r9, r0
 8011942:	2800      	cmp	r0, #0
 8011944:	f43f aef7 	beq.w	8011736 <_strtod_l+0x446>
 8011948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801194a:	300c      	adds	r0, #12
 801194c:	691a      	ldr	r2, [r3, #16]
 801194e:	f103 010c 	add.w	r1, r3, #12
 8011952:	3202      	adds	r2, #2
 8011954:	0092      	lsls	r2, r2, #2
 8011956:	f7fe f939 	bl	800fbcc <memcpy>
 801195a:	aa1c      	add	r2, sp, #112	@ 0x70
 801195c:	a91b      	add	r1, sp, #108	@ 0x6c
 801195e:	9805      	ldr	r0, [sp, #20]
 8011960:	ec4b ab10 	vmov	d0, sl, fp
 8011964:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011968:	f7ff fbd6 	bl	8011118 <__d2b>
 801196c:	901a      	str	r0, [sp, #104]	@ 0x68
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f aee1 	beq.w	8011736 <_strtod_l+0x446>
 8011974:	2101      	movs	r1, #1
 8011976:	9805      	ldr	r0, [sp, #20]
 8011978:	f7ff f926 	bl	8010bc8 <__i2b>
 801197c:	4680      	mov	r8, r0
 801197e:	b948      	cbnz	r0, 8011994 <_strtod_l+0x6a4>
 8011980:	f04f 0800 	mov.w	r8, #0
 8011984:	e6d7      	b.n	8011736 <_strtod_l+0x446>
 8011986:	f04f 32ff 	mov.w	r2, #4294967295
 801198a:	fa02 f303 	lsl.w	r3, r2, r3
 801198e:	ea03 0a0a 	and.w	sl, r3, sl
 8011992:	e7af      	b.n	80118f4 <_strtod_l+0x604>
 8011994:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011996:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011998:	2d00      	cmp	r5, #0
 801199a:	bfa9      	itett	ge
 801199c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801199e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80119a0:	18ef      	addge	r7, r5, r3
 80119a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80119a4:	bfb8      	it	lt
 80119a6:	1b5e      	sublt	r6, r3, r5
 80119a8:	9b08      	ldr	r3, [sp, #32]
 80119aa:	bfb8      	it	lt
 80119ac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80119ae:	1aed      	subs	r5, r5, r3
 80119b0:	4b65      	ldr	r3, [pc, #404]	@ (8011b48 <_strtod_l+0x858>)
 80119b2:	4415      	add	r5, r2
 80119b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80119b8:	3d01      	subs	r5, #1
 80119ba:	429d      	cmp	r5, r3
 80119bc:	da4f      	bge.n	8011a5e <_strtod_l+0x76e>
 80119be:	1b5b      	subs	r3, r3, r5
 80119c0:	2101      	movs	r1, #1
 80119c2:	2b1f      	cmp	r3, #31
 80119c4:	eba2 0203 	sub.w	r2, r2, r3
 80119c8:	dc3d      	bgt.n	8011a46 <_strtod_l+0x756>
 80119ca:	fa01 f303 	lsl.w	r3, r1, r3
 80119ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119d0:	2300      	movs	r3, #0
 80119d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80119d4:	18bd      	adds	r5, r7, r2
 80119d6:	9b08      	ldr	r3, [sp, #32]
 80119d8:	4416      	add	r6, r2
 80119da:	42af      	cmp	r7, r5
 80119dc:	441e      	add	r6, r3
 80119de:	463b      	mov	r3, r7
 80119e0:	bfa8      	it	ge
 80119e2:	462b      	movge	r3, r5
 80119e4:	42b3      	cmp	r3, r6
 80119e6:	bfa8      	it	ge
 80119e8:	4633      	movge	r3, r6
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	bfc2      	ittt	gt
 80119ee:	1aed      	subgt	r5, r5, r3
 80119f0:	1af6      	subgt	r6, r6, r3
 80119f2:	1aff      	subgt	r7, r7, r3
 80119f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	dd16      	ble.n	8011a28 <_strtod_l+0x738>
 80119fa:	4641      	mov	r1, r8
 80119fc:	461a      	mov	r2, r3
 80119fe:	9805      	ldr	r0, [sp, #20]
 8011a00:	f7ff f99c 	bl	8010d3c <__pow5mult>
 8011a04:	4680      	mov	r8, r0
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d0ba      	beq.n	8011980 <_strtod_l+0x690>
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a0e:	9805      	ldr	r0, [sp, #20]
 8011a10:	f7ff f8f0 	bl	8010bf4 <__multiply>
 8011a14:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a16:	2800      	cmp	r0, #0
 8011a18:	f43f ae8d 	beq.w	8011736 <_strtod_l+0x446>
 8011a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	f7fe ffd2 	bl	80109c8 <_Bfree>
 8011a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a26:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a28:	2d00      	cmp	r5, #0
 8011a2a:	dc1d      	bgt.n	8011a68 <_strtod_l+0x778>
 8011a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	dd23      	ble.n	8011a7a <_strtod_l+0x78a>
 8011a32:	4649      	mov	r1, r9
 8011a34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011a36:	9805      	ldr	r0, [sp, #20]
 8011a38:	f7ff f980 	bl	8010d3c <__pow5mult>
 8011a3c:	4681      	mov	r9, r0
 8011a3e:	b9e0      	cbnz	r0, 8011a7a <_strtod_l+0x78a>
 8011a40:	f04f 0900 	mov.w	r9, #0
 8011a44:	e677      	b.n	8011736 <_strtod_l+0x446>
 8011a46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011a4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011a4c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011a50:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011a54:	35e2      	adds	r5, #226	@ 0xe2
 8011a56:	fa01 f305 	lsl.w	r3, r1, r5
 8011a5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8011a5c:	e7ba      	b.n	80119d4 <_strtod_l+0x6e4>
 8011a5e:	2300      	movs	r3, #0
 8011a60:	9310      	str	r3, [sp, #64]	@ 0x40
 8011a62:	2301      	movs	r3, #1
 8011a64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a66:	e7b5      	b.n	80119d4 <_strtod_l+0x6e4>
 8011a68:	462a      	mov	r2, r5
 8011a6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a6c:	9805      	ldr	r0, [sp, #20]
 8011a6e:	f7ff f9bf 	bl	8010df0 <__lshift>
 8011a72:	901a      	str	r0, [sp, #104]	@ 0x68
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d1d9      	bne.n	8011a2c <_strtod_l+0x73c>
 8011a78:	e65d      	b.n	8011736 <_strtod_l+0x446>
 8011a7a:	2e00      	cmp	r6, #0
 8011a7c:	dd07      	ble.n	8011a8e <_strtod_l+0x79e>
 8011a7e:	4649      	mov	r1, r9
 8011a80:	4632      	mov	r2, r6
 8011a82:	9805      	ldr	r0, [sp, #20]
 8011a84:	f7ff f9b4 	bl	8010df0 <__lshift>
 8011a88:	4681      	mov	r9, r0
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	d0d8      	beq.n	8011a40 <_strtod_l+0x750>
 8011a8e:	2f00      	cmp	r7, #0
 8011a90:	dd08      	ble.n	8011aa4 <_strtod_l+0x7b4>
 8011a92:	4641      	mov	r1, r8
 8011a94:	463a      	mov	r2, r7
 8011a96:	9805      	ldr	r0, [sp, #20]
 8011a98:	f7ff f9aa 	bl	8010df0 <__lshift>
 8011a9c:	4680      	mov	r8, r0
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	f43f ae49 	beq.w	8011736 <_strtod_l+0x446>
 8011aa4:	464a      	mov	r2, r9
 8011aa6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011aa8:	9805      	ldr	r0, [sp, #20]
 8011aaa:	f7ff fa29 	bl	8010f00 <__mdiff>
 8011aae:	4604      	mov	r4, r0
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f43f ae40 	beq.w	8011736 <_strtod_l+0x446>
 8011ab6:	68c3      	ldr	r3, [r0, #12]
 8011ab8:	4641      	mov	r1, r8
 8011aba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011abc:	2300      	movs	r3, #0
 8011abe:	60c3      	str	r3, [r0, #12]
 8011ac0:	f7ff fa02 	bl	8010ec8 <__mcmp>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	da45      	bge.n	8011b54 <_strtod_l+0x864>
 8011ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aca:	ea53 030a 	orrs.w	r3, r3, sl
 8011ace:	d16b      	bne.n	8011ba8 <_strtod_l+0x8b8>
 8011ad0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d167      	bne.n	8011ba8 <_strtod_l+0x8b8>
 8011ad8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011adc:	0d1b      	lsrs	r3, r3, #20
 8011ade:	051b      	lsls	r3, r3, #20
 8011ae0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011ae4:	d960      	bls.n	8011ba8 <_strtod_l+0x8b8>
 8011ae6:	6963      	ldr	r3, [r4, #20]
 8011ae8:	b913      	cbnz	r3, 8011af0 <_strtod_l+0x800>
 8011aea:	6923      	ldr	r3, [r4, #16]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	dd5b      	ble.n	8011ba8 <_strtod_l+0x8b8>
 8011af0:	4621      	mov	r1, r4
 8011af2:	2201      	movs	r2, #1
 8011af4:	9805      	ldr	r0, [sp, #20]
 8011af6:	f7ff f97b 	bl	8010df0 <__lshift>
 8011afa:	4641      	mov	r1, r8
 8011afc:	4604      	mov	r4, r0
 8011afe:	f7ff f9e3 	bl	8010ec8 <__mcmp>
 8011b02:	2800      	cmp	r0, #0
 8011b04:	dd50      	ble.n	8011ba8 <_strtod_l+0x8b8>
 8011b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b0a:	9a08      	ldr	r2, [sp, #32]
 8011b0c:	0d1b      	lsrs	r3, r3, #20
 8011b0e:	051b      	lsls	r3, r3, #20
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d06a      	beq.n	8011bea <_strtod_l+0x8fa>
 8011b14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011b18:	d867      	bhi.n	8011bea <_strtod_l+0x8fa>
 8011b1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011b1e:	f67f ae9d 	bls.w	801185c <_strtod_l+0x56c>
 8011b22:	4b0a      	ldr	r3, [pc, #40]	@ (8011b4c <_strtod_l+0x85c>)
 8011b24:	4650      	mov	r0, sl
 8011b26:	4659      	mov	r1, fp
 8011b28:	2200      	movs	r2, #0
 8011b2a:	f7ee fd69 	bl	8000600 <__aeabi_dmul>
 8011b2e:	4b08      	ldr	r3, [pc, #32]	@ (8011b50 <_strtod_l+0x860>)
 8011b30:	4682      	mov	sl, r0
 8011b32:	468b      	mov	fp, r1
 8011b34:	400b      	ands	r3, r1
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f47f ae08 	bne.w	801174c <_strtod_l+0x45c>
 8011b3c:	2322      	movs	r3, #34	@ 0x22
 8011b3e:	9a05      	ldr	r2, [sp, #20]
 8011b40:	6013      	str	r3, [r2, #0]
 8011b42:	e603      	b.n	801174c <_strtod_l+0x45c>
 8011b44:	08030ca0 	.word	0x08030ca0
 8011b48:	fffffc02 	.word	0xfffffc02
 8011b4c:	39500000 	.word	0x39500000
 8011b50:	7ff00000 	.word	0x7ff00000
 8011b54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011b58:	d165      	bne.n	8011c26 <_strtod_l+0x936>
 8011b5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b60:	b35a      	cbz	r2, 8011bba <_strtod_l+0x8ca>
 8011b62:	4a9f      	ldr	r2, [pc, #636]	@ (8011de0 <_strtod_l+0xaf0>)
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d12b      	bne.n	8011bc0 <_strtod_l+0x8d0>
 8011b68:	9b08      	ldr	r3, [sp, #32]
 8011b6a:	4651      	mov	r1, sl
 8011b6c:	b303      	cbz	r3, 8011bb0 <_strtod_l+0x8c0>
 8011b6e:	465a      	mov	r2, fp
 8011b70:	4b9c      	ldr	r3, [pc, #624]	@ (8011de4 <_strtod_l+0xaf4>)
 8011b72:	4013      	ands	r3, r2
 8011b74:	f04f 32ff 	mov.w	r2, #4294967295
 8011b78:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011b7c:	d81b      	bhi.n	8011bb6 <_strtod_l+0x8c6>
 8011b7e:	0d1b      	lsrs	r3, r3, #20
 8011b80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011b84:	fa02 f303 	lsl.w	r3, r2, r3
 8011b88:	4299      	cmp	r1, r3
 8011b8a:	d119      	bne.n	8011bc0 <_strtod_l+0x8d0>
 8011b8c:	4b96      	ldr	r3, [pc, #600]	@ (8011de8 <_strtod_l+0xaf8>)
 8011b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d102      	bne.n	8011b9a <_strtod_l+0x8aa>
 8011b94:	3101      	adds	r1, #1
 8011b96:	f43f adce 	beq.w	8011736 <_strtod_l+0x446>
 8011b9a:	4b92      	ldr	r3, [pc, #584]	@ (8011de4 <_strtod_l+0xaf4>)
 8011b9c:	f04f 0a00 	mov.w	sl, #0
 8011ba0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ba2:	401a      	ands	r2, r3
 8011ba4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011ba8:	9b08      	ldr	r3, [sp, #32]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1b9      	bne.n	8011b22 <_strtod_l+0x832>
 8011bae:	e5cd      	b.n	801174c <_strtod_l+0x45c>
 8011bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb4:	e7e8      	b.n	8011b88 <_strtod_l+0x898>
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	e7e6      	b.n	8011b88 <_strtod_l+0x898>
 8011bba:	ea53 030a 	orrs.w	r3, r3, sl
 8011bbe:	d0a2      	beq.n	8011b06 <_strtod_l+0x816>
 8011bc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bc2:	b1db      	cbz	r3, 8011bfc <_strtod_l+0x90c>
 8011bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bc6:	4213      	tst	r3, r2
 8011bc8:	d0ee      	beq.n	8011ba8 <_strtod_l+0x8b8>
 8011bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bcc:	4650      	mov	r0, sl
 8011bce:	9a08      	ldr	r2, [sp, #32]
 8011bd0:	4659      	mov	r1, fp
 8011bd2:	b1bb      	cbz	r3, 8011c04 <_strtod_l+0x914>
 8011bd4:	f7ff fb6e 	bl	80112b4 <sulp>
 8011bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011bdc:	ec53 2b10 	vmov	r2, r3, d0
 8011be0:	f7ee fb58 	bl	8000294 <__adddf3>
 8011be4:	4682      	mov	sl, r0
 8011be6:	468b      	mov	fp, r1
 8011be8:	e7de      	b.n	8011ba8 <_strtod_l+0x8b8>
 8011bea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011bee:	f04f 3aff 	mov.w	sl, #4294967295
 8011bf2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011bf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011bfa:	e7d5      	b.n	8011ba8 <_strtod_l+0x8b8>
 8011bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bfe:	ea13 0f0a 	tst.w	r3, sl
 8011c02:	e7e1      	b.n	8011bc8 <_strtod_l+0x8d8>
 8011c04:	f7ff fb56 	bl	80112b4 <sulp>
 8011c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c0c:	ec53 2b10 	vmov	r2, r3, d0
 8011c10:	f7ee fb3e 	bl	8000290 <__aeabi_dsub>
 8011c14:	2200      	movs	r2, #0
 8011c16:	2300      	movs	r3, #0
 8011c18:	4682      	mov	sl, r0
 8011c1a:	468b      	mov	fp, r1
 8011c1c:	f7ee ff58 	bl	8000ad0 <__aeabi_dcmpeq>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d0c1      	beq.n	8011ba8 <_strtod_l+0x8b8>
 8011c24:	e61a      	b.n	801185c <_strtod_l+0x56c>
 8011c26:	4641      	mov	r1, r8
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f7ff facd 	bl	80111c8 <__ratio>
 8011c2e:	2200      	movs	r2, #0
 8011c30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011c34:	ec57 6b10 	vmov	r6, r7, d0
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ee ff5c 	bl	8000af8 <__aeabi_dcmple>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d06f      	beq.n	8011d24 <_strtod_l+0xa34>
 8011c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d17a      	bne.n	8011d40 <_strtod_l+0xa50>
 8011c4a:	f1ba 0f00 	cmp.w	sl, #0
 8011c4e:	d158      	bne.n	8011d02 <_strtod_l+0xa12>
 8011c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d15a      	bne.n	8011d10 <_strtod_l+0xa20>
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	4b63      	ldr	r3, [pc, #396]	@ (8011dec <_strtod_l+0xafc>)
 8011c5e:	4630      	mov	r0, r6
 8011c60:	4639      	mov	r1, r7
 8011c62:	f7ee ff3f 	bl	8000ae4 <__aeabi_dcmplt>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d159      	bne.n	8011d1e <_strtod_l+0xa2e>
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	4639      	mov	r1, r7
 8011c6e:	2200      	movs	r2, #0
 8011c70:	4b5f      	ldr	r3, [pc, #380]	@ (8011df0 <_strtod_l+0xb00>)
 8011c72:	f7ee fcc5 	bl	8000600 <__aeabi_dmul>
 8011c76:	4606      	mov	r6, r0
 8011c78:	460f      	mov	r7, r1
 8011c7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011c7e:	9606      	str	r6, [sp, #24]
 8011c80:	9307      	str	r3, [sp, #28]
 8011c82:	4d58      	ldr	r5, [pc, #352]	@ (8011de4 <_strtod_l+0xaf4>)
 8011c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c8e:	401d      	ands	r5, r3
 8011c90:	4b58      	ldr	r3, [pc, #352]	@ (8011df4 <_strtod_l+0xb04>)
 8011c92:	429d      	cmp	r5, r3
 8011c94:	f040 80b2 	bne.w	8011dfc <_strtod_l+0xb0c>
 8011c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011c9e:	ec4b ab10 	vmov	d0, sl, fp
 8011ca2:	f7ff f9c5 	bl	8011030 <__ulp>
 8011ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011caa:	ec51 0b10 	vmov	r0, r1, d0
 8011cae:	f7ee fca7 	bl	8000600 <__aeabi_dmul>
 8011cb2:	4652      	mov	r2, sl
 8011cb4:	465b      	mov	r3, fp
 8011cb6:	f7ee faed 	bl	8000294 <__adddf3>
 8011cba:	460b      	mov	r3, r1
 8011cbc:	4949      	ldr	r1, [pc, #292]	@ (8011de4 <_strtod_l+0xaf4>)
 8011cbe:	4682      	mov	sl, r0
 8011cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8011df8 <_strtod_l+0xb08>)
 8011cc2:	4019      	ands	r1, r3
 8011cc4:	4291      	cmp	r1, r2
 8011cc6:	d942      	bls.n	8011d4e <_strtod_l+0xa5e>
 8011cc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011cca:	4b47      	ldr	r3, [pc, #284]	@ (8011de8 <_strtod_l+0xaf8>)
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d103      	bne.n	8011cd8 <_strtod_l+0x9e8>
 8011cd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	f43f ad2f 	beq.w	8011736 <_strtod_l+0x446>
 8011cd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011de8 <_strtod_l+0xaf8>
 8011cdc:	f04f 3aff 	mov.w	sl, #4294967295
 8011ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ce2:	9805      	ldr	r0, [sp, #20]
 8011ce4:	f7fe fe70 	bl	80109c8 <_Bfree>
 8011ce8:	4649      	mov	r1, r9
 8011cea:	9805      	ldr	r0, [sp, #20]
 8011cec:	f7fe fe6c 	bl	80109c8 <_Bfree>
 8011cf0:	4641      	mov	r1, r8
 8011cf2:	9805      	ldr	r0, [sp, #20]
 8011cf4:	f7fe fe68 	bl	80109c8 <_Bfree>
 8011cf8:	4621      	mov	r1, r4
 8011cfa:	9805      	ldr	r0, [sp, #20]
 8011cfc:	f7fe fe64 	bl	80109c8 <_Bfree>
 8011d00:	e619      	b.n	8011936 <_strtod_l+0x646>
 8011d02:	f1ba 0f01 	cmp.w	sl, #1
 8011d06:	d103      	bne.n	8011d10 <_strtod_l+0xa20>
 8011d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f43f ada6 	beq.w	801185c <_strtod_l+0x56c>
 8011d10:	2600      	movs	r6, #0
 8011d12:	4f36      	ldr	r7, [pc, #216]	@ (8011dec <_strtod_l+0xafc>)
 8011d14:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011dc0 <_strtod_l+0xad0>
 8011d18:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011d1c:	e7b1      	b.n	8011c82 <_strtod_l+0x992>
 8011d1e:	2600      	movs	r6, #0
 8011d20:	4f33      	ldr	r7, [pc, #204]	@ (8011df0 <_strtod_l+0xb00>)
 8011d22:	e7aa      	b.n	8011c7a <_strtod_l+0x98a>
 8011d24:	4b32      	ldr	r3, [pc, #200]	@ (8011df0 <_strtod_l+0xb00>)
 8011d26:	4630      	mov	r0, r6
 8011d28:	4639      	mov	r1, r7
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f7ee fc68 	bl	8000600 <__aeabi_dmul>
 8011d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d32:	4606      	mov	r6, r0
 8011d34:	460f      	mov	r7, r1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d09f      	beq.n	8011c7a <_strtod_l+0x98a>
 8011d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011d3e:	e7a0      	b.n	8011c82 <_strtod_l+0x992>
 8011d40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011dc8 <_strtod_l+0xad8>
 8011d44:	ec57 6b17 	vmov	r6, r7, d7
 8011d48:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011d4c:	e799      	b.n	8011c82 <_strtod_l+0x992>
 8011d4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011d52:	9b08      	ldr	r3, [sp, #32]
 8011d54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1c1      	bne.n	8011ce0 <_strtod_l+0x9f0>
 8011d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d60:	0d1b      	lsrs	r3, r3, #20
 8011d62:	051b      	lsls	r3, r3, #20
 8011d64:	429d      	cmp	r5, r3
 8011d66:	d1bb      	bne.n	8011ce0 <_strtod_l+0x9f0>
 8011d68:	4630      	mov	r0, r6
 8011d6a:	4639      	mov	r1, r7
 8011d6c:	f7ee ffa8 	bl	8000cc0 <__aeabi_d2lz>
 8011d70:	f7ee fc18 	bl	80005a4 <__aeabi_l2d>
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	4630      	mov	r0, r6
 8011d7a:	4639      	mov	r1, r7
 8011d7c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011d80:	f7ee fa86 	bl	8000290 <__aeabi_dsub>
 8011d84:	460b      	mov	r3, r1
 8011d86:	4602      	mov	r2, r0
 8011d88:	ea46 060a 	orr.w	r6, r6, sl
 8011d8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d92:	431e      	orrs	r6, r3
 8011d94:	d06f      	beq.n	8011e76 <_strtod_l+0xb86>
 8011d96:	a30e      	add	r3, pc, #56	@ (adr r3, 8011dd0 <_strtod_l+0xae0>)
 8011d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9c:	f7ee fea2 	bl	8000ae4 <__aeabi_dcmplt>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	f47f acd3 	bne.w	801174c <_strtod_l+0x45c>
 8011da6:	a30c      	add	r3, pc, #48	@ (adr r3, 8011dd8 <_strtod_l+0xae8>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011db0:	f7ee feb6 	bl	8000b20 <__aeabi_dcmpgt>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d093      	beq.n	8011ce0 <_strtod_l+0x9f0>
 8011db8:	e4c8      	b.n	801174c <_strtod_l+0x45c>
 8011dba:	bf00      	nop
 8011dbc:	f3af 8000 	nop.w
 8011dc0:	00000000 	.word	0x00000000
 8011dc4:	bff00000 	.word	0xbff00000
 8011dc8:	00000000 	.word	0x00000000
 8011dcc:	3ff00000 	.word	0x3ff00000
 8011dd0:	94a03595 	.word	0x94a03595
 8011dd4:	3fdfffff 	.word	0x3fdfffff
 8011dd8:	35afe535 	.word	0x35afe535
 8011ddc:	3fe00000 	.word	0x3fe00000
 8011de0:	000fffff 	.word	0x000fffff
 8011de4:	7ff00000 	.word	0x7ff00000
 8011de8:	7fefffff 	.word	0x7fefffff
 8011dec:	3ff00000 	.word	0x3ff00000
 8011df0:	3fe00000 	.word	0x3fe00000
 8011df4:	7fe00000 	.word	0x7fe00000
 8011df8:	7c9fffff 	.word	0x7c9fffff
 8011dfc:	9b08      	ldr	r3, [sp, #32]
 8011dfe:	b323      	cbz	r3, 8011e4a <_strtod_l+0xb5a>
 8011e00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011e04:	d821      	bhi.n	8011e4a <_strtod_l+0xb5a>
 8011e06:	4630      	mov	r0, r6
 8011e08:	4639      	mov	r1, r7
 8011e0a:	a327      	add	r3, pc, #156	@ (adr r3, 8011ea8 <_strtod_l+0xbb8>)
 8011e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e10:	f7ee fe72 	bl	8000af8 <__aeabi_dcmple>
 8011e14:	b1a0      	cbz	r0, 8011e40 <_strtod_l+0xb50>
 8011e16:	4639      	mov	r1, r7
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f7ee fec9 	bl	8000bb0 <__aeabi_d2uiz>
 8011e1e:	2801      	cmp	r0, #1
 8011e20:	bf38      	it	cc
 8011e22:	2001      	movcc	r0, #1
 8011e24:	f7ee fb72 	bl	800050c <__aeabi_ui2d>
 8011e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2a:	4606      	mov	r6, r0
 8011e2c:	460f      	mov	r7, r1
 8011e2e:	b9fb      	cbnz	r3, 8011e70 <_strtod_l+0xb80>
 8011e30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e34:	9014      	str	r0, [sp, #80]	@ 0x50
 8011e36:	9315      	str	r3, [sp, #84]	@ 0x54
 8011e38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011e3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011e42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011e46:	1b5b      	subs	r3, r3, r5
 8011e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8011e4a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011e4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011e52:	f7ff f8ed 	bl	8011030 <__ulp>
 8011e56:	4650      	mov	r0, sl
 8011e58:	4659      	mov	r1, fp
 8011e5a:	ec53 2b10 	vmov	r2, r3, d0
 8011e5e:	f7ee fbcf 	bl	8000600 <__aeabi_dmul>
 8011e62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011e66:	f7ee fa15 	bl	8000294 <__adddf3>
 8011e6a:	4682      	mov	sl, r0
 8011e6c:	468b      	mov	fp, r1
 8011e6e:	e770      	b.n	8011d52 <_strtod_l+0xa62>
 8011e70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011e74:	e7e0      	b.n	8011e38 <_strtod_l+0xb48>
 8011e76:	a30e      	add	r3, pc, #56	@ (adr r3, 8011eb0 <_strtod_l+0xbc0>)
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	f7ee fe32 	bl	8000ae4 <__aeabi_dcmplt>
 8011e80:	e798      	b.n	8011db4 <_strtod_l+0xac4>
 8011e82:	2300      	movs	r3, #0
 8011e84:	930e      	str	r3, [sp, #56]	@ 0x38
 8011e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e88:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011e8a:	6013      	str	r3, [r2, #0]
 8011e8c:	f7ff ba6d 	b.w	801136a <_strtod_l+0x7a>
 8011e90:	2a65      	cmp	r2, #101	@ 0x65
 8011e92:	f43f ab67 	beq.w	8011564 <_strtod_l+0x274>
 8011e96:	2a45      	cmp	r2, #69	@ 0x45
 8011e98:	f43f ab64 	beq.w	8011564 <_strtod_l+0x274>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	f7ff bba0 	b.w	80115e2 <_strtod_l+0x2f2>
 8011ea2:	bf00      	nop
 8011ea4:	f3af 8000 	nop.w
 8011ea8:	ffc00000 	.word	0xffc00000
 8011eac:	41dfffff 	.word	0x41dfffff
 8011eb0:	94a03595 	.word	0x94a03595
 8011eb4:	3fcfffff 	.word	0x3fcfffff

08011eb8 <_strtod_r>:
 8011eb8:	4b01      	ldr	r3, [pc, #4]	@ (8011ec0 <_strtod_r+0x8>)
 8011eba:	f7ff ba19 	b.w	80112f0 <_strtod_l>
 8011ebe:	bf00      	nop
 8011ec0:	20000068 	.word	0x20000068

08011ec4 <_strtol_l.isra.0>:
 8011ec4:	2b24      	cmp	r3, #36	@ 0x24
 8011ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eca:	4686      	mov	lr, r0
 8011ecc:	4690      	mov	r8, r2
 8011ece:	d801      	bhi.n	8011ed4 <_strtol_l.isra.0+0x10>
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d106      	bne.n	8011ee2 <_strtol_l.isra.0+0x1e>
 8011ed4:	f7fd fe42 	bl	800fb5c <__errno>
 8011ed8:	2316      	movs	r3, #22
 8011eda:	6003      	str	r3, [r0, #0]
 8011edc:	2000      	movs	r0, #0
 8011ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee2:	460d      	mov	r5, r1
 8011ee4:	4833      	ldr	r0, [pc, #204]	@ (8011fb4 <_strtol_l.isra.0+0xf0>)
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eec:	5d06      	ldrb	r6, [r0, r4]
 8011eee:	f016 0608 	ands.w	r6, r6, #8
 8011ef2:	d1f8      	bne.n	8011ee6 <_strtol_l.isra.0+0x22>
 8011ef4:	2c2d      	cmp	r4, #45	@ 0x2d
 8011ef6:	d110      	bne.n	8011f1a <_strtol_l.isra.0+0x56>
 8011ef8:	782c      	ldrb	r4, [r5, #0]
 8011efa:	2601      	movs	r6, #1
 8011efc:	1c95      	adds	r5, r2, #2
 8011efe:	f033 0210 	bics.w	r2, r3, #16
 8011f02:	d115      	bne.n	8011f30 <_strtol_l.isra.0+0x6c>
 8011f04:	2c30      	cmp	r4, #48	@ 0x30
 8011f06:	d10d      	bne.n	8011f24 <_strtol_l.isra.0+0x60>
 8011f08:	782a      	ldrb	r2, [r5, #0]
 8011f0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011f0e:	2a58      	cmp	r2, #88	@ 0x58
 8011f10:	d108      	bne.n	8011f24 <_strtol_l.isra.0+0x60>
 8011f12:	786c      	ldrb	r4, [r5, #1]
 8011f14:	3502      	adds	r5, #2
 8011f16:	2310      	movs	r3, #16
 8011f18:	e00a      	b.n	8011f30 <_strtol_l.isra.0+0x6c>
 8011f1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8011f1c:	bf04      	itt	eq
 8011f1e:	782c      	ldrbeq	r4, [r5, #0]
 8011f20:	1c95      	addeq	r5, r2, #2
 8011f22:	e7ec      	b.n	8011efe <_strtol_l.isra.0+0x3a>
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1f6      	bne.n	8011f16 <_strtol_l.isra.0+0x52>
 8011f28:	2c30      	cmp	r4, #48	@ 0x30
 8011f2a:	bf14      	ite	ne
 8011f2c:	230a      	movne	r3, #10
 8011f2e:	2308      	moveq	r3, #8
 8011f30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011f34:	2200      	movs	r2, #0
 8011f36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	fbbc f9f3 	udiv	r9, ip, r3
 8011f40:	fb03 ca19 	mls	sl, r3, r9, ip
 8011f44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011f48:	2f09      	cmp	r7, #9
 8011f4a:	d80f      	bhi.n	8011f6c <_strtol_l.isra.0+0xa8>
 8011f4c:	463c      	mov	r4, r7
 8011f4e:	42a3      	cmp	r3, r4
 8011f50:	dd1b      	ble.n	8011f8a <_strtol_l.isra.0+0xc6>
 8011f52:	1c57      	adds	r7, r2, #1
 8011f54:	d007      	beq.n	8011f66 <_strtol_l.isra.0+0xa2>
 8011f56:	4581      	cmp	r9, r0
 8011f58:	d314      	bcc.n	8011f84 <_strtol_l.isra.0+0xc0>
 8011f5a:	d101      	bne.n	8011f60 <_strtol_l.isra.0+0x9c>
 8011f5c:	45a2      	cmp	sl, r4
 8011f5e:	db11      	blt.n	8011f84 <_strtol_l.isra.0+0xc0>
 8011f60:	fb00 4003 	mla	r0, r0, r3, r4
 8011f64:	2201      	movs	r2, #1
 8011f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f6a:	e7eb      	b.n	8011f44 <_strtol_l.isra.0+0x80>
 8011f6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011f70:	2f19      	cmp	r7, #25
 8011f72:	d801      	bhi.n	8011f78 <_strtol_l.isra.0+0xb4>
 8011f74:	3c37      	subs	r4, #55	@ 0x37
 8011f76:	e7ea      	b.n	8011f4e <_strtol_l.isra.0+0x8a>
 8011f78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011f7c:	2f19      	cmp	r7, #25
 8011f7e:	d804      	bhi.n	8011f8a <_strtol_l.isra.0+0xc6>
 8011f80:	3c57      	subs	r4, #87	@ 0x57
 8011f82:	e7e4      	b.n	8011f4e <_strtol_l.isra.0+0x8a>
 8011f84:	f04f 32ff 	mov.w	r2, #4294967295
 8011f88:	e7ed      	b.n	8011f66 <_strtol_l.isra.0+0xa2>
 8011f8a:	1c53      	adds	r3, r2, #1
 8011f8c:	d108      	bne.n	8011fa0 <_strtol_l.isra.0+0xdc>
 8011f8e:	2322      	movs	r3, #34	@ 0x22
 8011f90:	4660      	mov	r0, ip
 8011f92:	f8ce 3000 	str.w	r3, [lr]
 8011f96:	f1b8 0f00 	cmp.w	r8, #0
 8011f9a:	d0a0      	beq.n	8011ede <_strtol_l.isra.0+0x1a>
 8011f9c:	1e69      	subs	r1, r5, #1
 8011f9e:	e006      	b.n	8011fae <_strtol_l.isra.0+0xea>
 8011fa0:	b106      	cbz	r6, 8011fa4 <_strtol_l.isra.0+0xe0>
 8011fa2:	4240      	negs	r0, r0
 8011fa4:	f1b8 0f00 	cmp.w	r8, #0
 8011fa8:	d099      	beq.n	8011ede <_strtol_l.isra.0+0x1a>
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	d1f6      	bne.n	8011f9c <_strtol_l.isra.0+0xd8>
 8011fae:	f8c8 1000 	str.w	r1, [r8]
 8011fb2:	e794      	b.n	8011ede <_strtol_l.isra.0+0x1a>
 8011fb4:	08030cc9 	.word	0x08030cc9

08011fb8 <_strtol_r>:
 8011fb8:	f7ff bf84 	b.w	8011ec4 <_strtol_l.isra.0>

08011fbc <__ssputs_r>:
 8011fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc0:	461f      	mov	r7, r3
 8011fc2:	688e      	ldr	r6, [r1, #8]
 8011fc4:	4682      	mov	sl, r0
 8011fc6:	460c      	mov	r4, r1
 8011fc8:	42be      	cmp	r6, r7
 8011fca:	4690      	mov	r8, r2
 8011fcc:	680b      	ldr	r3, [r1, #0]
 8011fce:	d82d      	bhi.n	801202c <__ssputs_r+0x70>
 8011fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011fd8:	d026      	beq.n	8012028 <__ssputs_r+0x6c>
 8011fda:	6965      	ldr	r5, [r4, #20]
 8011fdc:	6909      	ldr	r1, [r1, #16]
 8011fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fe2:	eba3 0901 	sub.w	r9, r3, r1
 8011fe6:	1c7b      	adds	r3, r7, #1
 8011fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fec:	444b      	add	r3, r9
 8011fee:	106d      	asrs	r5, r5, #1
 8011ff0:	429d      	cmp	r5, r3
 8011ff2:	bf38      	it	cc
 8011ff4:	461d      	movcc	r5, r3
 8011ff6:	0553      	lsls	r3, r2, #21
 8011ff8:	d527      	bpl.n	801204a <__ssputs_r+0x8e>
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	f7fc fc2e 	bl	800e85c <_malloc_r>
 8012000:	4606      	mov	r6, r0
 8012002:	b360      	cbz	r0, 801205e <__ssputs_r+0xa2>
 8012004:	464a      	mov	r2, r9
 8012006:	6921      	ldr	r1, [r4, #16]
 8012008:	f7fd fde0 	bl	800fbcc <memcpy>
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012016:	81a3      	strh	r3, [r4, #12]
 8012018:	6126      	str	r6, [r4, #16]
 801201a:	444e      	add	r6, r9
 801201c:	6165      	str	r5, [r4, #20]
 801201e:	eba5 0509 	sub.w	r5, r5, r9
 8012022:	6026      	str	r6, [r4, #0]
 8012024:	463e      	mov	r6, r7
 8012026:	60a5      	str	r5, [r4, #8]
 8012028:	42be      	cmp	r6, r7
 801202a:	d900      	bls.n	801202e <__ssputs_r+0x72>
 801202c:	463e      	mov	r6, r7
 801202e:	4632      	mov	r2, r6
 8012030:	4641      	mov	r1, r8
 8012032:	6820      	ldr	r0, [r4, #0]
 8012034:	f000 fb69 	bl	801270a <memmove>
 8012038:	68a3      	ldr	r3, [r4, #8]
 801203a:	2000      	movs	r0, #0
 801203c:	1b9b      	subs	r3, r3, r6
 801203e:	60a3      	str	r3, [r4, #8]
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	4433      	add	r3, r6
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801204a:	462a      	mov	r2, r5
 801204c:	f000 ff2d 	bl	8012eaa <_realloc_r>
 8012050:	4606      	mov	r6, r0
 8012052:	2800      	cmp	r0, #0
 8012054:	d1e0      	bne.n	8012018 <__ssputs_r+0x5c>
 8012056:	6921      	ldr	r1, [r4, #16]
 8012058:	4650      	mov	r0, sl
 801205a:	f7fe fc2b 	bl	80108b4 <_free_r>
 801205e:	230c      	movs	r3, #12
 8012060:	f04f 30ff 	mov.w	r0, #4294967295
 8012064:	f8ca 3000 	str.w	r3, [sl]
 8012068:	89a3      	ldrh	r3, [r4, #12]
 801206a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801206e:	81a3      	strh	r3, [r4, #12]
 8012070:	e7e9      	b.n	8012046 <__ssputs_r+0x8a>
	...

08012074 <_svfiprintf_r>:
 8012074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012078:	4698      	mov	r8, r3
 801207a:	898b      	ldrh	r3, [r1, #12]
 801207c:	b09d      	sub	sp, #116	@ 0x74
 801207e:	4607      	mov	r7, r0
 8012080:	061b      	lsls	r3, r3, #24
 8012082:	460d      	mov	r5, r1
 8012084:	4614      	mov	r4, r2
 8012086:	d510      	bpl.n	80120aa <_svfiprintf_r+0x36>
 8012088:	690b      	ldr	r3, [r1, #16]
 801208a:	b973      	cbnz	r3, 80120aa <_svfiprintf_r+0x36>
 801208c:	2140      	movs	r1, #64	@ 0x40
 801208e:	f7fc fbe5 	bl	800e85c <_malloc_r>
 8012092:	6028      	str	r0, [r5, #0]
 8012094:	6128      	str	r0, [r5, #16]
 8012096:	b930      	cbnz	r0, 80120a6 <_svfiprintf_r+0x32>
 8012098:	230c      	movs	r3, #12
 801209a:	603b      	str	r3, [r7, #0]
 801209c:	f04f 30ff 	mov.w	r0, #4294967295
 80120a0:	b01d      	add	sp, #116	@ 0x74
 80120a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a6:	2340      	movs	r3, #64	@ 0x40
 80120a8:	616b      	str	r3, [r5, #20]
 80120aa:	2300      	movs	r3, #0
 80120ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80120b0:	f04f 0901 	mov.w	r9, #1
 80120b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012258 <_svfiprintf_r+0x1e4>
 80120b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ba:	2320      	movs	r3, #32
 80120bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120c0:	2330      	movs	r3, #48	@ 0x30
 80120c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120c6:	4623      	mov	r3, r4
 80120c8:	469a      	mov	sl, r3
 80120ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ce:	b10a      	cbz	r2, 80120d4 <_svfiprintf_r+0x60>
 80120d0:	2a25      	cmp	r2, #37	@ 0x25
 80120d2:	d1f9      	bne.n	80120c8 <_svfiprintf_r+0x54>
 80120d4:	ebba 0b04 	subs.w	fp, sl, r4
 80120d8:	d00b      	beq.n	80120f2 <_svfiprintf_r+0x7e>
 80120da:	465b      	mov	r3, fp
 80120dc:	4622      	mov	r2, r4
 80120de:	4629      	mov	r1, r5
 80120e0:	4638      	mov	r0, r7
 80120e2:	f7ff ff6b 	bl	8011fbc <__ssputs_r>
 80120e6:	3001      	adds	r0, #1
 80120e8:	f000 80a7 	beq.w	801223a <_svfiprintf_r+0x1c6>
 80120ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120ee:	445a      	add	r2, fp
 80120f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80120f2:	f89a 3000 	ldrb.w	r3, [sl]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 809f 	beq.w	801223a <_svfiprintf_r+0x1c6>
 80120fc:	2300      	movs	r3, #0
 80120fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012102:	f10a 0a01 	add.w	sl, sl, #1
 8012106:	9304      	str	r3, [sp, #16]
 8012108:	9307      	str	r3, [sp, #28]
 801210a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801210e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012114:	4654      	mov	r4, sl
 8012116:	2205      	movs	r2, #5
 8012118:	484f      	ldr	r0, [pc, #316]	@ (8012258 <_svfiprintf_r+0x1e4>)
 801211a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211e:	f7fd fd47 	bl	800fbb0 <memchr>
 8012122:	9a04      	ldr	r2, [sp, #16]
 8012124:	b9d8      	cbnz	r0, 801215e <_svfiprintf_r+0xea>
 8012126:	06d0      	lsls	r0, r2, #27
 8012128:	bf44      	itt	mi
 801212a:	2320      	movmi	r3, #32
 801212c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012130:	0711      	lsls	r1, r2, #28
 8012132:	bf44      	itt	mi
 8012134:	232b      	movmi	r3, #43	@ 0x2b
 8012136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801213a:	f89a 3000 	ldrb.w	r3, [sl]
 801213e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012140:	d015      	beq.n	801216e <_svfiprintf_r+0xfa>
 8012142:	9a07      	ldr	r2, [sp, #28]
 8012144:	4654      	mov	r4, sl
 8012146:	2000      	movs	r0, #0
 8012148:	f04f 0c0a 	mov.w	ip, #10
 801214c:	4621      	mov	r1, r4
 801214e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012152:	3b30      	subs	r3, #48	@ 0x30
 8012154:	2b09      	cmp	r3, #9
 8012156:	d94b      	bls.n	80121f0 <_svfiprintf_r+0x17c>
 8012158:	b1b0      	cbz	r0, 8012188 <_svfiprintf_r+0x114>
 801215a:	9207      	str	r2, [sp, #28]
 801215c:	e014      	b.n	8012188 <_svfiprintf_r+0x114>
 801215e:	eba0 0308 	sub.w	r3, r0, r8
 8012162:	46a2      	mov	sl, r4
 8012164:	fa09 f303 	lsl.w	r3, r9, r3
 8012168:	4313      	orrs	r3, r2
 801216a:	9304      	str	r3, [sp, #16]
 801216c:	e7d2      	b.n	8012114 <_svfiprintf_r+0xa0>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	1d19      	adds	r1, r3, #4
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	9103      	str	r1, [sp, #12]
 8012178:	bfbb      	ittet	lt
 801217a:	425b      	neglt	r3, r3
 801217c:	f042 0202 	orrlt.w	r2, r2, #2
 8012180:	9307      	strge	r3, [sp, #28]
 8012182:	9307      	strlt	r3, [sp, #28]
 8012184:	bfb8      	it	lt
 8012186:	9204      	strlt	r2, [sp, #16]
 8012188:	7823      	ldrb	r3, [r4, #0]
 801218a:	2b2e      	cmp	r3, #46	@ 0x2e
 801218c:	d10a      	bne.n	80121a4 <_svfiprintf_r+0x130>
 801218e:	7863      	ldrb	r3, [r4, #1]
 8012190:	2b2a      	cmp	r3, #42	@ 0x2a
 8012192:	d132      	bne.n	80121fa <_svfiprintf_r+0x186>
 8012194:	9b03      	ldr	r3, [sp, #12]
 8012196:	3402      	adds	r4, #2
 8012198:	1d1a      	adds	r2, r3, #4
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121a0:	9203      	str	r2, [sp, #12]
 80121a2:	9305      	str	r3, [sp, #20]
 80121a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012268 <_svfiprintf_r+0x1f4>
 80121a8:	2203      	movs	r2, #3
 80121aa:	7821      	ldrb	r1, [r4, #0]
 80121ac:	4650      	mov	r0, sl
 80121ae:	f7fd fcff 	bl	800fbb0 <memchr>
 80121b2:	b138      	cbz	r0, 80121c4 <_svfiprintf_r+0x150>
 80121b4:	eba0 000a 	sub.w	r0, r0, sl
 80121b8:	2240      	movs	r2, #64	@ 0x40
 80121ba:	9b04      	ldr	r3, [sp, #16]
 80121bc:	3401      	adds	r4, #1
 80121be:	4082      	lsls	r2, r0
 80121c0:	4313      	orrs	r3, r2
 80121c2:	9304      	str	r3, [sp, #16]
 80121c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c8:	2206      	movs	r2, #6
 80121ca:	4824      	ldr	r0, [pc, #144]	@ (801225c <_svfiprintf_r+0x1e8>)
 80121cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121d0:	f7fd fcee 	bl	800fbb0 <memchr>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	d036      	beq.n	8012246 <_svfiprintf_r+0x1d2>
 80121d8:	4b21      	ldr	r3, [pc, #132]	@ (8012260 <_svfiprintf_r+0x1ec>)
 80121da:	bb1b      	cbnz	r3, 8012224 <_svfiprintf_r+0x1b0>
 80121dc:	9b03      	ldr	r3, [sp, #12]
 80121de:	3307      	adds	r3, #7
 80121e0:	f023 0307 	bic.w	r3, r3, #7
 80121e4:	3308      	adds	r3, #8
 80121e6:	9303      	str	r3, [sp, #12]
 80121e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ea:	4433      	add	r3, r6
 80121ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ee:	e76a      	b.n	80120c6 <_svfiprintf_r+0x52>
 80121f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80121f4:	460c      	mov	r4, r1
 80121f6:	2001      	movs	r0, #1
 80121f8:	e7a8      	b.n	801214c <_svfiprintf_r+0xd8>
 80121fa:	2300      	movs	r3, #0
 80121fc:	3401      	adds	r4, #1
 80121fe:	f04f 0c0a 	mov.w	ip, #10
 8012202:	4619      	mov	r1, r3
 8012204:	9305      	str	r3, [sp, #20]
 8012206:	4620      	mov	r0, r4
 8012208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801220c:	3a30      	subs	r2, #48	@ 0x30
 801220e:	2a09      	cmp	r2, #9
 8012210:	d903      	bls.n	801221a <_svfiprintf_r+0x1a6>
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0c6      	beq.n	80121a4 <_svfiprintf_r+0x130>
 8012216:	9105      	str	r1, [sp, #20]
 8012218:	e7c4      	b.n	80121a4 <_svfiprintf_r+0x130>
 801221a:	fb0c 2101 	mla	r1, ip, r1, r2
 801221e:	4604      	mov	r4, r0
 8012220:	2301      	movs	r3, #1
 8012222:	e7f0      	b.n	8012206 <_svfiprintf_r+0x192>
 8012224:	ab03      	add	r3, sp, #12
 8012226:	462a      	mov	r2, r5
 8012228:	a904      	add	r1, sp, #16
 801222a:	4638      	mov	r0, r7
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	4b0d      	ldr	r3, [pc, #52]	@ (8012264 <_svfiprintf_r+0x1f0>)
 8012230:	f7fc fc3e 	bl	800eab0 <_printf_float>
 8012234:	1c42      	adds	r2, r0, #1
 8012236:	4606      	mov	r6, r0
 8012238:	d1d6      	bne.n	80121e8 <_svfiprintf_r+0x174>
 801223a:	89ab      	ldrh	r3, [r5, #12]
 801223c:	065b      	lsls	r3, r3, #25
 801223e:	f53f af2d 	bmi.w	801209c <_svfiprintf_r+0x28>
 8012242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012244:	e72c      	b.n	80120a0 <_svfiprintf_r+0x2c>
 8012246:	ab03      	add	r3, sp, #12
 8012248:	462a      	mov	r2, r5
 801224a:	a904      	add	r1, sp, #16
 801224c:	4638      	mov	r0, r7
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	4b04      	ldr	r3, [pc, #16]	@ (8012264 <_svfiprintf_r+0x1f0>)
 8012252:	f7fc fec9 	bl	800efe8 <_printf_i>
 8012256:	e7ed      	b.n	8012234 <_svfiprintf_r+0x1c0>
 8012258:	08030ac1 	.word	0x08030ac1
 801225c:	08030acb 	.word	0x08030acb
 8012260:	0800eab1 	.word	0x0800eab1
 8012264:	08011fbd 	.word	0x08011fbd
 8012268:	08030ac7 	.word	0x08030ac7

0801226c <__sfputc_r>:
 801226c:	6893      	ldr	r3, [r2, #8]
 801226e:	3b01      	subs	r3, #1
 8012270:	2b00      	cmp	r3, #0
 8012272:	b410      	push	{r4}
 8012274:	6093      	str	r3, [r2, #8]
 8012276:	da08      	bge.n	801228a <__sfputc_r+0x1e>
 8012278:	6994      	ldr	r4, [r2, #24]
 801227a:	42a3      	cmp	r3, r4
 801227c:	db01      	blt.n	8012282 <__sfputc_r+0x16>
 801227e:	290a      	cmp	r1, #10
 8012280:	d103      	bne.n	801228a <__sfputc_r+0x1e>
 8012282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012286:	f7fd bb72 	b.w	800f96e <__swbuf_r>
 801228a:	6813      	ldr	r3, [r2, #0]
 801228c:	1c58      	adds	r0, r3, #1
 801228e:	6010      	str	r0, [r2, #0]
 8012290:	4608      	mov	r0, r1
 8012292:	7019      	strb	r1, [r3, #0]
 8012294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012298:	4770      	bx	lr

0801229a <__sfputs_r>:
 801229a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229c:	4606      	mov	r6, r0
 801229e:	460f      	mov	r7, r1
 80122a0:	4614      	mov	r4, r2
 80122a2:	18d5      	adds	r5, r2, r3
 80122a4:	42ac      	cmp	r4, r5
 80122a6:	d101      	bne.n	80122ac <__sfputs_r+0x12>
 80122a8:	2000      	movs	r0, #0
 80122aa:	e007      	b.n	80122bc <__sfputs_r+0x22>
 80122ac:	463a      	mov	r2, r7
 80122ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b2:	4630      	mov	r0, r6
 80122b4:	f7ff ffda 	bl	801226c <__sfputc_r>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d1f3      	bne.n	80122a4 <__sfputs_r+0xa>
 80122bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080122c0 <_vfiprintf_r>:
 80122c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c4:	460d      	mov	r5, r1
 80122c6:	b09d      	sub	sp, #116	@ 0x74
 80122c8:	4614      	mov	r4, r2
 80122ca:	4698      	mov	r8, r3
 80122cc:	4606      	mov	r6, r0
 80122ce:	b118      	cbz	r0, 80122d8 <_vfiprintf_r+0x18>
 80122d0:	6a03      	ldr	r3, [r0, #32]
 80122d2:	b90b      	cbnz	r3, 80122d8 <_vfiprintf_r+0x18>
 80122d4:	f7fd fa40 	bl	800f758 <__sinit>
 80122d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122da:	07d9      	lsls	r1, r3, #31
 80122dc:	d405      	bmi.n	80122ea <_vfiprintf_r+0x2a>
 80122de:	89ab      	ldrh	r3, [r5, #12]
 80122e0:	059a      	lsls	r2, r3, #22
 80122e2:	d402      	bmi.n	80122ea <_vfiprintf_r+0x2a>
 80122e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122e6:	f7f0 fa46 	bl	8002776 <__retarget_lock_acquire_recursive>
 80122ea:	89ab      	ldrh	r3, [r5, #12]
 80122ec:	071b      	lsls	r3, r3, #28
 80122ee:	d501      	bpl.n	80122f4 <_vfiprintf_r+0x34>
 80122f0:	692b      	ldr	r3, [r5, #16]
 80122f2:	b99b      	cbnz	r3, 801231c <_vfiprintf_r+0x5c>
 80122f4:	4629      	mov	r1, r5
 80122f6:	4630      	mov	r0, r6
 80122f8:	f7fd fb78 	bl	800f9ec <__swsetup_r>
 80122fc:	b170      	cbz	r0, 801231c <_vfiprintf_r+0x5c>
 80122fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012300:	07dc      	lsls	r4, r3, #31
 8012302:	d504      	bpl.n	801230e <_vfiprintf_r+0x4e>
 8012304:	f04f 30ff 	mov.w	r0, #4294967295
 8012308:	b01d      	add	sp, #116	@ 0x74
 801230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801230e:	89ab      	ldrh	r3, [r5, #12]
 8012310:	0598      	lsls	r0, r3, #22
 8012312:	d4f7      	bmi.n	8012304 <_vfiprintf_r+0x44>
 8012314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012316:	f7f0 fa43 	bl	80027a0 <__retarget_lock_release_recursive>
 801231a:	e7f3      	b.n	8012304 <_vfiprintf_r+0x44>
 801231c:	2300      	movs	r3, #0
 801231e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012322:	f04f 0901 	mov.w	r9, #1
 8012326:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80124dc <_vfiprintf_r+0x21c>
 801232a:	9309      	str	r3, [sp, #36]	@ 0x24
 801232c:	2320      	movs	r3, #32
 801232e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012332:	2330      	movs	r3, #48	@ 0x30
 8012334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012338:	4623      	mov	r3, r4
 801233a:	469a      	mov	sl, r3
 801233c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012340:	b10a      	cbz	r2, 8012346 <_vfiprintf_r+0x86>
 8012342:	2a25      	cmp	r2, #37	@ 0x25
 8012344:	d1f9      	bne.n	801233a <_vfiprintf_r+0x7a>
 8012346:	ebba 0b04 	subs.w	fp, sl, r4
 801234a:	d00b      	beq.n	8012364 <_vfiprintf_r+0xa4>
 801234c:	465b      	mov	r3, fp
 801234e:	4622      	mov	r2, r4
 8012350:	4629      	mov	r1, r5
 8012352:	4630      	mov	r0, r6
 8012354:	f7ff ffa1 	bl	801229a <__sfputs_r>
 8012358:	3001      	adds	r0, #1
 801235a:	f000 80a7 	beq.w	80124ac <_vfiprintf_r+0x1ec>
 801235e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012360:	445a      	add	r2, fp
 8012362:	9209      	str	r2, [sp, #36]	@ 0x24
 8012364:	f89a 3000 	ldrb.w	r3, [sl]
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 809f 	beq.w	80124ac <_vfiprintf_r+0x1ec>
 801236e:	2300      	movs	r3, #0
 8012370:	f04f 32ff 	mov.w	r2, #4294967295
 8012374:	f10a 0a01 	add.w	sl, sl, #1
 8012378:	9304      	str	r3, [sp, #16]
 801237a:	9307      	str	r3, [sp, #28]
 801237c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012380:	931a      	str	r3, [sp, #104]	@ 0x68
 8012382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012386:	4654      	mov	r4, sl
 8012388:	2205      	movs	r2, #5
 801238a:	4854      	ldr	r0, [pc, #336]	@ (80124dc <_vfiprintf_r+0x21c>)
 801238c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012390:	f7fd fc0e 	bl	800fbb0 <memchr>
 8012394:	9a04      	ldr	r2, [sp, #16]
 8012396:	b9d8      	cbnz	r0, 80123d0 <_vfiprintf_r+0x110>
 8012398:	06d1      	lsls	r1, r2, #27
 801239a:	bf44      	itt	mi
 801239c:	2320      	movmi	r3, #32
 801239e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123a2:	0713      	lsls	r3, r2, #28
 80123a4:	bf44      	itt	mi
 80123a6:	232b      	movmi	r3, #43	@ 0x2b
 80123a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123ac:	f89a 3000 	ldrb.w	r3, [sl]
 80123b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80123b2:	d015      	beq.n	80123e0 <_vfiprintf_r+0x120>
 80123b4:	9a07      	ldr	r2, [sp, #28]
 80123b6:	4654      	mov	r4, sl
 80123b8:	2000      	movs	r0, #0
 80123ba:	f04f 0c0a 	mov.w	ip, #10
 80123be:	4621      	mov	r1, r4
 80123c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123c4:	3b30      	subs	r3, #48	@ 0x30
 80123c6:	2b09      	cmp	r3, #9
 80123c8:	d94b      	bls.n	8012462 <_vfiprintf_r+0x1a2>
 80123ca:	b1b0      	cbz	r0, 80123fa <_vfiprintf_r+0x13a>
 80123cc:	9207      	str	r2, [sp, #28]
 80123ce:	e014      	b.n	80123fa <_vfiprintf_r+0x13a>
 80123d0:	eba0 0308 	sub.w	r3, r0, r8
 80123d4:	46a2      	mov	sl, r4
 80123d6:	fa09 f303 	lsl.w	r3, r9, r3
 80123da:	4313      	orrs	r3, r2
 80123dc:	9304      	str	r3, [sp, #16]
 80123de:	e7d2      	b.n	8012386 <_vfiprintf_r+0xc6>
 80123e0:	9b03      	ldr	r3, [sp, #12]
 80123e2:	1d19      	adds	r1, r3, #4
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	9103      	str	r1, [sp, #12]
 80123ea:	bfbb      	ittet	lt
 80123ec:	425b      	neglt	r3, r3
 80123ee:	f042 0202 	orrlt.w	r2, r2, #2
 80123f2:	9307      	strge	r3, [sp, #28]
 80123f4:	9307      	strlt	r3, [sp, #28]
 80123f6:	bfb8      	it	lt
 80123f8:	9204      	strlt	r2, [sp, #16]
 80123fa:	7823      	ldrb	r3, [r4, #0]
 80123fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80123fe:	d10a      	bne.n	8012416 <_vfiprintf_r+0x156>
 8012400:	7863      	ldrb	r3, [r4, #1]
 8012402:	2b2a      	cmp	r3, #42	@ 0x2a
 8012404:	d132      	bne.n	801246c <_vfiprintf_r+0x1ac>
 8012406:	9b03      	ldr	r3, [sp, #12]
 8012408:	3402      	adds	r4, #2
 801240a:	1d1a      	adds	r2, r3, #4
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012412:	9203      	str	r2, [sp, #12]
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80124ec <_vfiprintf_r+0x22c>
 801241a:	2203      	movs	r2, #3
 801241c:	7821      	ldrb	r1, [r4, #0]
 801241e:	4650      	mov	r0, sl
 8012420:	f7fd fbc6 	bl	800fbb0 <memchr>
 8012424:	b138      	cbz	r0, 8012436 <_vfiprintf_r+0x176>
 8012426:	eba0 000a 	sub.w	r0, r0, sl
 801242a:	2240      	movs	r2, #64	@ 0x40
 801242c:	9b04      	ldr	r3, [sp, #16]
 801242e:	3401      	adds	r4, #1
 8012430:	4082      	lsls	r2, r0
 8012432:	4313      	orrs	r3, r2
 8012434:	9304      	str	r3, [sp, #16]
 8012436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801243a:	2206      	movs	r2, #6
 801243c:	4828      	ldr	r0, [pc, #160]	@ (80124e0 <_vfiprintf_r+0x220>)
 801243e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012442:	f7fd fbb5 	bl	800fbb0 <memchr>
 8012446:	2800      	cmp	r0, #0
 8012448:	d03f      	beq.n	80124ca <_vfiprintf_r+0x20a>
 801244a:	4b26      	ldr	r3, [pc, #152]	@ (80124e4 <_vfiprintf_r+0x224>)
 801244c:	bb1b      	cbnz	r3, 8012496 <_vfiprintf_r+0x1d6>
 801244e:	9b03      	ldr	r3, [sp, #12]
 8012450:	3307      	adds	r3, #7
 8012452:	f023 0307 	bic.w	r3, r3, #7
 8012456:	3308      	adds	r3, #8
 8012458:	9303      	str	r3, [sp, #12]
 801245a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801245c:	443b      	add	r3, r7
 801245e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012460:	e76a      	b.n	8012338 <_vfiprintf_r+0x78>
 8012462:	fb0c 3202 	mla	r2, ip, r2, r3
 8012466:	460c      	mov	r4, r1
 8012468:	2001      	movs	r0, #1
 801246a:	e7a8      	b.n	80123be <_vfiprintf_r+0xfe>
 801246c:	2300      	movs	r3, #0
 801246e:	3401      	adds	r4, #1
 8012470:	f04f 0c0a 	mov.w	ip, #10
 8012474:	4619      	mov	r1, r3
 8012476:	9305      	str	r3, [sp, #20]
 8012478:	4620      	mov	r0, r4
 801247a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801247e:	3a30      	subs	r2, #48	@ 0x30
 8012480:	2a09      	cmp	r2, #9
 8012482:	d903      	bls.n	801248c <_vfiprintf_r+0x1cc>
 8012484:	2b00      	cmp	r3, #0
 8012486:	d0c6      	beq.n	8012416 <_vfiprintf_r+0x156>
 8012488:	9105      	str	r1, [sp, #20]
 801248a:	e7c4      	b.n	8012416 <_vfiprintf_r+0x156>
 801248c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012490:	4604      	mov	r4, r0
 8012492:	2301      	movs	r3, #1
 8012494:	e7f0      	b.n	8012478 <_vfiprintf_r+0x1b8>
 8012496:	ab03      	add	r3, sp, #12
 8012498:	462a      	mov	r2, r5
 801249a:	a904      	add	r1, sp, #16
 801249c:	4630      	mov	r0, r6
 801249e:	9300      	str	r3, [sp, #0]
 80124a0:	4b11      	ldr	r3, [pc, #68]	@ (80124e8 <_vfiprintf_r+0x228>)
 80124a2:	f7fc fb05 	bl	800eab0 <_printf_float>
 80124a6:	4607      	mov	r7, r0
 80124a8:	1c78      	adds	r0, r7, #1
 80124aa:	d1d6      	bne.n	801245a <_vfiprintf_r+0x19a>
 80124ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124ae:	07d9      	lsls	r1, r3, #31
 80124b0:	d405      	bmi.n	80124be <_vfiprintf_r+0x1fe>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	059a      	lsls	r2, r3, #22
 80124b6:	d402      	bmi.n	80124be <_vfiprintf_r+0x1fe>
 80124b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124ba:	f7f0 f971 	bl	80027a0 <__retarget_lock_release_recursive>
 80124be:	89ab      	ldrh	r3, [r5, #12]
 80124c0:	065b      	lsls	r3, r3, #25
 80124c2:	f53f af1f 	bmi.w	8012304 <_vfiprintf_r+0x44>
 80124c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124c8:	e71e      	b.n	8012308 <_vfiprintf_r+0x48>
 80124ca:	ab03      	add	r3, sp, #12
 80124cc:	462a      	mov	r2, r5
 80124ce:	a904      	add	r1, sp, #16
 80124d0:	4630      	mov	r0, r6
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	4b04      	ldr	r3, [pc, #16]	@ (80124e8 <_vfiprintf_r+0x228>)
 80124d6:	f7fc fd87 	bl	800efe8 <_printf_i>
 80124da:	e7e4      	b.n	80124a6 <_vfiprintf_r+0x1e6>
 80124dc:	08030ac1 	.word	0x08030ac1
 80124e0:	08030acb 	.word	0x08030acb
 80124e4:	0800eab1 	.word	0x0800eab1
 80124e8:	0801229b 	.word	0x0801229b
 80124ec:	08030ac7 	.word	0x08030ac7

080124f0 <__sflush_r>:
 80124f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	0716      	lsls	r6, r2, #28
 80124fa:	4605      	mov	r5, r0
 80124fc:	460c      	mov	r4, r1
 80124fe:	d454      	bmi.n	80125aa <__sflush_r+0xba>
 8012500:	684b      	ldr	r3, [r1, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	dc02      	bgt.n	801250c <__sflush_r+0x1c>
 8012506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012508:	2b00      	cmp	r3, #0
 801250a:	dd48      	ble.n	801259e <__sflush_r+0xae>
 801250c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801250e:	2e00      	cmp	r6, #0
 8012510:	d045      	beq.n	801259e <__sflush_r+0xae>
 8012512:	2300      	movs	r3, #0
 8012514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012518:	682f      	ldr	r7, [r5, #0]
 801251a:	6a21      	ldr	r1, [r4, #32]
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	d030      	beq.n	8012582 <__sflush_r+0x92>
 8012520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012522:	89a3      	ldrh	r3, [r4, #12]
 8012524:	0759      	lsls	r1, r3, #29
 8012526:	d505      	bpl.n	8012534 <__sflush_r+0x44>
 8012528:	6863      	ldr	r3, [r4, #4]
 801252a:	1ad2      	subs	r2, r2, r3
 801252c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801252e:	b10b      	cbz	r3, 8012534 <__sflush_r+0x44>
 8012530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012532:	1ad2      	subs	r2, r2, r3
 8012534:	2300      	movs	r3, #0
 8012536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012538:	6a21      	ldr	r1, [r4, #32]
 801253a:	4628      	mov	r0, r5
 801253c:	47b0      	blx	r6
 801253e:	1c43      	adds	r3, r0, #1
 8012540:	89a3      	ldrh	r3, [r4, #12]
 8012542:	d106      	bne.n	8012552 <__sflush_r+0x62>
 8012544:	6829      	ldr	r1, [r5, #0]
 8012546:	291d      	cmp	r1, #29
 8012548:	d82b      	bhi.n	80125a2 <__sflush_r+0xb2>
 801254a:	4a2a      	ldr	r2, [pc, #168]	@ (80125f4 <__sflush_r+0x104>)
 801254c:	40ca      	lsrs	r2, r1
 801254e:	07d6      	lsls	r6, r2, #31
 8012550:	d527      	bpl.n	80125a2 <__sflush_r+0xb2>
 8012552:	2200      	movs	r2, #0
 8012554:	04d9      	lsls	r1, r3, #19
 8012556:	6062      	str	r2, [r4, #4]
 8012558:	6922      	ldr	r2, [r4, #16]
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	d504      	bpl.n	8012568 <__sflush_r+0x78>
 801255e:	1c42      	adds	r2, r0, #1
 8012560:	d101      	bne.n	8012566 <__sflush_r+0x76>
 8012562:	682b      	ldr	r3, [r5, #0]
 8012564:	b903      	cbnz	r3, 8012568 <__sflush_r+0x78>
 8012566:	6560      	str	r0, [r4, #84]	@ 0x54
 8012568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801256a:	602f      	str	r7, [r5, #0]
 801256c:	b1b9      	cbz	r1, 801259e <__sflush_r+0xae>
 801256e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012572:	4299      	cmp	r1, r3
 8012574:	d002      	beq.n	801257c <__sflush_r+0x8c>
 8012576:	4628      	mov	r0, r5
 8012578:	f7fe f99c 	bl	80108b4 <_free_r>
 801257c:	2300      	movs	r3, #0
 801257e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012580:	e00d      	b.n	801259e <__sflush_r+0xae>
 8012582:	2301      	movs	r3, #1
 8012584:	4628      	mov	r0, r5
 8012586:	47b0      	blx	r6
 8012588:	4602      	mov	r2, r0
 801258a:	1c50      	adds	r0, r2, #1
 801258c:	d1c9      	bne.n	8012522 <__sflush_r+0x32>
 801258e:	682b      	ldr	r3, [r5, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d0c6      	beq.n	8012522 <__sflush_r+0x32>
 8012594:	2b1d      	cmp	r3, #29
 8012596:	d001      	beq.n	801259c <__sflush_r+0xac>
 8012598:	2b16      	cmp	r3, #22
 801259a:	d11d      	bne.n	80125d8 <__sflush_r+0xe8>
 801259c:	602f      	str	r7, [r5, #0]
 801259e:	2000      	movs	r0, #0
 80125a0:	e021      	b.n	80125e6 <__sflush_r+0xf6>
 80125a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125a6:	b21b      	sxth	r3, r3
 80125a8:	e01a      	b.n	80125e0 <__sflush_r+0xf0>
 80125aa:	690f      	ldr	r7, [r1, #16]
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	d0f6      	beq.n	801259e <__sflush_r+0xae>
 80125b0:	0793      	lsls	r3, r2, #30
 80125b2:	680e      	ldr	r6, [r1, #0]
 80125b4:	600f      	str	r7, [r1, #0]
 80125b6:	bf0c      	ite	eq
 80125b8:	694b      	ldreq	r3, [r1, #20]
 80125ba:	2300      	movne	r3, #0
 80125bc:	eba6 0807 	sub.w	r8, r6, r7
 80125c0:	608b      	str	r3, [r1, #8]
 80125c2:	f1b8 0f00 	cmp.w	r8, #0
 80125c6:	ddea      	ble.n	801259e <__sflush_r+0xae>
 80125c8:	4643      	mov	r3, r8
 80125ca:	463a      	mov	r2, r7
 80125cc:	6a21      	ldr	r1, [r4, #32]
 80125ce:	4628      	mov	r0, r5
 80125d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80125d2:	47b0      	blx	r6
 80125d4:	2800      	cmp	r0, #0
 80125d6:	dc08      	bgt.n	80125ea <__sflush_r+0xfa>
 80125d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295
 80125e4:	81a3      	strh	r3, [r4, #12]
 80125e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ea:	4407      	add	r7, r0
 80125ec:	eba8 0800 	sub.w	r8, r8, r0
 80125f0:	e7e7      	b.n	80125c2 <__sflush_r+0xd2>
 80125f2:	bf00      	nop
 80125f4:	20400001 	.word	0x20400001

080125f8 <_fflush_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	690b      	ldr	r3, [r1, #16]
 80125fc:	4605      	mov	r5, r0
 80125fe:	460c      	mov	r4, r1
 8012600:	b913      	cbnz	r3, 8012608 <_fflush_r+0x10>
 8012602:	2500      	movs	r5, #0
 8012604:	4628      	mov	r0, r5
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	b118      	cbz	r0, 8012612 <_fflush_r+0x1a>
 801260a:	6a03      	ldr	r3, [r0, #32]
 801260c:	b90b      	cbnz	r3, 8012612 <_fflush_r+0x1a>
 801260e:	f7fd f8a3 	bl	800f758 <__sinit>
 8012612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d0f3      	beq.n	8012602 <_fflush_r+0xa>
 801261a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801261c:	07d0      	lsls	r0, r2, #31
 801261e:	d404      	bmi.n	801262a <_fflush_r+0x32>
 8012620:	0599      	lsls	r1, r3, #22
 8012622:	d402      	bmi.n	801262a <_fflush_r+0x32>
 8012624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012626:	f7f0 f8a6 	bl	8002776 <__retarget_lock_acquire_recursive>
 801262a:	4628      	mov	r0, r5
 801262c:	4621      	mov	r1, r4
 801262e:	f7ff ff5f 	bl	80124f0 <__sflush_r>
 8012632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012634:	4605      	mov	r5, r0
 8012636:	07da      	lsls	r2, r3, #31
 8012638:	d4e4      	bmi.n	8012604 <_fflush_r+0xc>
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	059b      	lsls	r3, r3, #22
 801263e:	d4e1      	bmi.n	8012604 <_fflush_r+0xc>
 8012640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012642:	f7f0 f8ad 	bl	80027a0 <__retarget_lock_release_recursive>
 8012646:	e7dd      	b.n	8012604 <_fflush_r+0xc>

08012648 <__swhatbuf_r>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	460c      	mov	r4, r1
 801264c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012650:	b096      	sub	sp, #88	@ 0x58
 8012652:	4615      	mov	r5, r2
 8012654:	2900      	cmp	r1, #0
 8012656:	461e      	mov	r6, r3
 8012658:	da0c      	bge.n	8012674 <__swhatbuf_r+0x2c>
 801265a:	89a3      	ldrh	r3, [r4, #12]
 801265c:	2100      	movs	r1, #0
 801265e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012662:	bf14      	ite	ne
 8012664:	2340      	movne	r3, #64	@ 0x40
 8012666:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801266a:	2000      	movs	r0, #0
 801266c:	6031      	str	r1, [r6, #0]
 801266e:	602b      	str	r3, [r5, #0]
 8012670:	b016      	add	sp, #88	@ 0x58
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	466a      	mov	r2, sp
 8012676:	f000 f875 	bl	8012764 <_fstat_r>
 801267a:	2800      	cmp	r0, #0
 801267c:	dbed      	blt.n	801265a <__swhatbuf_r+0x12>
 801267e:	9901      	ldr	r1, [sp, #4]
 8012680:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012684:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012688:	4259      	negs	r1, r3
 801268a:	4159      	adcs	r1, r3
 801268c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012690:	e7eb      	b.n	801266a <__swhatbuf_r+0x22>

08012692 <__smakebuf_r>:
 8012692:	898b      	ldrh	r3, [r1, #12]
 8012694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012696:	079d      	lsls	r5, r3, #30
 8012698:	4606      	mov	r6, r0
 801269a:	460c      	mov	r4, r1
 801269c:	d507      	bpl.n	80126ae <__smakebuf_r+0x1c>
 801269e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126a2:	6023      	str	r3, [r4, #0]
 80126a4:	6123      	str	r3, [r4, #16]
 80126a6:	2301      	movs	r3, #1
 80126a8:	6163      	str	r3, [r4, #20]
 80126aa:	b003      	add	sp, #12
 80126ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ae:	ab01      	add	r3, sp, #4
 80126b0:	466a      	mov	r2, sp
 80126b2:	f7ff ffc9 	bl	8012648 <__swhatbuf_r>
 80126b6:	9f00      	ldr	r7, [sp, #0]
 80126b8:	4605      	mov	r5, r0
 80126ba:	4630      	mov	r0, r6
 80126bc:	4639      	mov	r1, r7
 80126be:	f7fc f8cd 	bl	800e85c <_malloc_r>
 80126c2:	b948      	cbnz	r0, 80126d8 <__smakebuf_r+0x46>
 80126c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c8:	059a      	lsls	r2, r3, #22
 80126ca:	d4ee      	bmi.n	80126aa <__smakebuf_r+0x18>
 80126cc:	f023 0303 	bic.w	r3, r3, #3
 80126d0:	f043 0302 	orr.w	r3, r3, #2
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	e7e2      	b.n	801269e <__smakebuf_r+0xc>
 80126d8:	89a3      	ldrh	r3, [r4, #12]
 80126da:	6020      	str	r0, [r4, #0]
 80126dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126e0:	81a3      	strh	r3, [r4, #12]
 80126e2:	9b01      	ldr	r3, [sp, #4]
 80126e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126e8:	b15b      	cbz	r3, 8012702 <__smakebuf_r+0x70>
 80126ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126ee:	4630      	mov	r0, r6
 80126f0:	f000 f84a 	bl	8012788 <_isatty_r>
 80126f4:	b128      	cbz	r0, 8012702 <__smakebuf_r+0x70>
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	f023 0303 	bic.w	r3, r3, #3
 80126fc:	f043 0301 	orr.w	r3, r3, #1
 8012700:	81a3      	strh	r3, [r4, #12]
 8012702:	89a3      	ldrh	r3, [r4, #12]
 8012704:	431d      	orrs	r5, r3
 8012706:	81a5      	strh	r5, [r4, #12]
 8012708:	e7cf      	b.n	80126aa <__smakebuf_r+0x18>

0801270a <memmove>:
 801270a:	4288      	cmp	r0, r1
 801270c:	b510      	push	{r4, lr}
 801270e:	eb01 0402 	add.w	r4, r1, r2
 8012712:	d902      	bls.n	801271a <memmove+0x10>
 8012714:	4284      	cmp	r4, r0
 8012716:	4623      	mov	r3, r4
 8012718:	d807      	bhi.n	801272a <memmove+0x20>
 801271a:	1e43      	subs	r3, r0, #1
 801271c:	42a1      	cmp	r1, r4
 801271e:	d008      	beq.n	8012732 <memmove+0x28>
 8012720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012724:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012728:	e7f8      	b.n	801271c <memmove+0x12>
 801272a:	4402      	add	r2, r0
 801272c:	4601      	mov	r1, r0
 801272e:	428a      	cmp	r2, r1
 8012730:	d100      	bne.n	8012734 <memmove+0x2a>
 8012732:	bd10      	pop	{r4, pc}
 8012734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801273c:	e7f7      	b.n	801272e <memmove+0x24>

0801273e <strncmp>:
 801273e:	b510      	push	{r4, lr}
 8012740:	b16a      	cbz	r2, 801275e <strncmp+0x20>
 8012742:	3901      	subs	r1, #1
 8012744:	1884      	adds	r4, r0, r2
 8012746:	f810 2b01 	ldrb.w	r2, [r0], #1
 801274a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801274e:	429a      	cmp	r2, r3
 8012750:	d103      	bne.n	801275a <strncmp+0x1c>
 8012752:	42a0      	cmp	r0, r4
 8012754:	d001      	beq.n	801275a <strncmp+0x1c>
 8012756:	2a00      	cmp	r2, #0
 8012758:	d1f5      	bne.n	8012746 <strncmp+0x8>
 801275a:	1ad0      	subs	r0, r2, r3
 801275c:	bd10      	pop	{r4, pc}
 801275e:	4610      	mov	r0, r2
 8012760:	e7fc      	b.n	801275c <strncmp+0x1e>
	...

08012764 <_fstat_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	2300      	movs	r3, #0
 8012768:	4d06      	ldr	r5, [pc, #24]	@ (8012784 <_fstat_r+0x20>)
 801276a:	4604      	mov	r4, r0
 801276c:	4608      	mov	r0, r1
 801276e:	4611      	mov	r1, r2
 8012770:	602b      	str	r3, [r5, #0]
 8012772:	f7ef fd15 	bl	80021a0 <_fstat>
 8012776:	1c43      	adds	r3, r0, #1
 8012778:	d102      	bne.n	8012780 <_fstat_r+0x1c>
 801277a:	682b      	ldr	r3, [r5, #0]
 801277c:	b103      	cbz	r3, 8012780 <_fstat_r+0x1c>
 801277e:	6023      	str	r3, [r4, #0]
 8012780:	bd38      	pop	{r3, r4, r5, pc}
 8012782:	bf00      	nop
 8012784:	2000c720 	.word	0x2000c720

08012788 <_isatty_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	2300      	movs	r3, #0
 801278c:	4d05      	ldr	r5, [pc, #20]	@ (80127a4 <_isatty_r+0x1c>)
 801278e:	4604      	mov	r4, r0
 8012790:	4608      	mov	r0, r1
 8012792:	602b      	str	r3, [r5, #0]
 8012794:	f7ef fd14 	bl	80021c0 <_isatty>
 8012798:	1c43      	adds	r3, r0, #1
 801279a:	d102      	bne.n	80127a2 <_isatty_r+0x1a>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	b103      	cbz	r3, 80127a2 <_isatty_r+0x1a>
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	2000c720 	.word	0x2000c720

080127a8 <nan>:
 80127a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80127b0 <nan+0x8>
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	00000000 	.word	0x00000000
 80127b4:	7ff80000 	.word	0x7ff80000

080127b8 <__assert_func>:
 80127b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ba:	4614      	mov	r4, r2
 80127bc:	461a      	mov	r2, r3
 80127be:	4b09      	ldr	r3, [pc, #36]	@ (80127e4 <__assert_func+0x2c>)
 80127c0:	4605      	mov	r5, r0
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68d8      	ldr	r0, [r3, #12]
 80127c6:	b14c      	cbz	r4, 80127dc <__assert_func+0x24>
 80127c8:	4b07      	ldr	r3, [pc, #28]	@ (80127e8 <__assert_func+0x30>)
 80127ca:	9100      	str	r1, [sp, #0]
 80127cc:	4907      	ldr	r1, [pc, #28]	@ (80127ec <__assert_func+0x34>)
 80127ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80127d2:	462b      	mov	r3, r5
 80127d4:	f000 fba4 	bl	8012f20 <fiprintf>
 80127d8:	f000 fbb4 	bl	8012f44 <abort>
 80127dc:	4b04      	ldr	r3, [pc, #16]	@ (80127f0 <__assert_func+0x38>)
 80127de:	461c      	mov	r4, r3
 80127e0:	e7f3      	b.n	80127ca <__assert_func+0x12>
 80127e2:	bf00      	nop
 80127e4:	20000018 	.word	0x20000018
 80127e8:	08030ada 	.word	0x08030ada
 80127ec:	08030ae7 	.word	0x08030ae7
 80127f0:	08030b15 	.word	0x08030b15

080127f4 <_calloc_r>:
 80127f4:	b570      	push	{r4, r5, r6, lr}
 80127f6:	fba1 5402 	umull	r5, r4, r1, r2
 80127fa:	b934      	cbnz	r4, 801280a <_calloc_r+0x16>
 80127fc:	4629      	mov	r1, r5
 80127fe:	f7fc f82d 	bl	800e85c <_malloc_r>
 8012802:	4606      	mov	r6, r0
 8012804:	b928      	cbnz	r0, 8012812 <_calloc_r+0x1e>
 8012806:	4630      	mov	r0, r6
 8012808:	bd70      	pop	{r4, r5, r6, pc}
 801280a:	220c      	movs	r2, #12
 801280c:	2600      	movs	r6, #0
 801280e:	6002      	str	r2, [r0, #0]
 8012810:	e7f9      	b.n	8012806 <_calloc_r+0x12>
 8012812:	462a      	mov	r2, r5
 8012814:	4621      	mov	r1, r4
 8012816:	f7fd f93f 	bl	800fa98 <memset>
 801281a:	e7f4      	b.n	8012806 <_calloc_r+0x12>

0801281c <rshift>:
 801281c:	6903      	ldr	r3, [r0, #16]
 801281e:	114a      	asrs	r2, r1, #5
 8012820:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012828:	f100 0414 	add.w	r4, r0, #20
 801282c:	dd45      	ble.n	80128ba <rshift+0x9e>
 801282e:	f011 011f 	ands.w	r1, r1, #31
 8012832:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012836:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801283a:	d10c      	bne.n	8012856 <rshift+0x3a>
 801283c:	f100 0710 	add.w	r7, r0, #16
 8012840:	4629      	mov	r1, r5
 8012842:	42b1      	cmp	r1, r6
 8012844:	d334      	bcc.n	80128b0 <rshift+0x94>
 8012846:	1a9b      	subs	r3, r3, r2
 8012848:	1eea      	subs	r2, r5, #3
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	4296      	cmp	r6, r2
 801284e:	bf38      	it	cc
 8012850:	2300      	movcc	r3, #0
 8012852:	4423      	add	r3, r4
 8012854:	e015      	b.n	8012882 <rshift+0x66>
 8012856:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801285a:	f1c1 0820 	rsb	r8, r1, #32
 801285e:	f105 0e04 	add.w	lr, r5, #4
 8012862:	46a1      	mov	r9, r4
 8012864:	40cf      	lsrs	r7, r1
 8012866:	4576      	cmp	r6, lr
 8012868:	46f4      	mov	ip, lr
 801286a:	d815      	bhi.n	8012898 <rshift+0x7c>
 801286c:	1a9a      	subs	r2, r3, r2
 801286e:	3501      	adds	r5, #1
 8012870:	0092      	lsls	r2, r2, #2
 8012872:	3a04      	subs	r2, #4
 8012874:	42ae      	cmp	r6, r5
 8012876:	bf38      	it	cc
 8012878:	2200      	movcc	r2, #0
 801287a:	18a3      	adds	r3, r4, r2
 801287c:	50a7      	str	r7, [r4, r2]
 801287e:	b107      	cbz	r7, 8012882 <rshift+0x66>
 8012880:	3304      	adds	r3, #4
 8012882:	1b1a      	subs	r2, r3, r4
 8012884:	42a3      	cmp	r3, r4
 8012886:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801288a:	bf08      	it	eq
 801288c:	2300      	moveq	r3, #0
 801288e:	6102      	str	r2, [r0, #16]
 8012890:	bf08      	it	eq
 8012892:	6143      	streq	r3, [r0, #20]
 8012894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012898:	f8dc c000 	ldr.w	ip, [ip]
 801289c:	fa0c fc08 	lsl.w	ip, ip, r8
 80128a0:	ea4c 0707 	orr.w	r7, ip, r7
 80128a4:	f849 7b04 	str.w	r7, [r9], #4
 80128a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128ac:	40cf      	lsrs	r7, r1
 80128ae:	e7da      	b.n	8012866 <rshift+0x4a>
 80128b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80128b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80128b8:	e7c3      	b.n	8012842 <rshift+0x26>
 80128ba:	4623      	mov	r3, r4
 80128bc:	e7e1      	b.n	8012882 <rshift+0x66>

080128be <__hexdig_fun>:
 80128be:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80128c2:	2b09      	cmp	r3, #9
 80128c4:	d802      	bhi.n	80128cc <__hexdig_fun+0xe>
 80128c6:	3820      	subs	r0, #32
 80128c8:	b2c0      	uxtb	r0, r0
 80128ca:	4770      	bx	lr
 80128cc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80128d0:	2b05      	cmp	r3, #5
 80128d2:	d801      	bhi.n	80128d8 <__hexdig_fun+0x1a>
 80128d4:	3847      	subs	r0, #71	@ 0x47
 80128d6:	e7f7      	b.n	80128c8 <__hexdig_fun+0xa>
 80128d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80128dc:	2b05      	cmp	r3, #5
 80128de:	d801      	bhi.n	80128e4 <__hexdig_fun+0x26>
 80128e0:	3827      	subs	r0, #39	@ 0x27
 80128e2:	e7f1      	b.n	80128c8 <__hexdig_fun+0xa>
 80128e4:	2000      	movs	r0, #0
 80128e6:	4770      	bx	lr

080128e8 <__gethex>:
 80128e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ec:	b085      	sub	sp, #20
 80128ee:	468a      	mov	sl, r1
 80128f0:	4690      	mov	r8, r2
 80128f2:	9302      	str	r3, [sp, #8]
 80128f4:	680b      	ldr	r3, [r1, #0]
 80128f6:	9001      	str	r0, [sp, #4]
 80128f8:	1c9c      	adds	r4, r3, #2
 80128fa:	46a1      	mov	r9, r4
 80128fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012900:	2830      	cmp	r0, #48	@ 0x30
 8012902:	d0fa      	beq.n	80128fa <__gethex+0x12>
 8012904:	eba9 0303 	sub.w	r3, r9, r3
 8012908:	f1a3 0b02 	sub.w	fp, r3, #2
 801290c:	f7ff ffd7 	bl	80128be <__hexdig_fun>
 8012910:	4605      	mov	r5, r0
 8012912:	2800      	cmp	r0, #0
 8012914:	d166      	bne.n	80129e4 <__gethex+0xfc>
 8012916:	2201      	movs	r2, #1
 8012918:	499e      	ldr	r1, [pc, #632]	@ (8012b94 <__gethex+0x2ac>)
 801291a:	4648      	mov	r0, r9
 801291c:	f7ff ff0f 	bl	801273e <strncmp>
 8012920:	4607      	mov	r7, r0
 8012922:	2800      	cmp	r0, #0
 8012924:	d165      	bne.n	80129f2 <__gethex+0x10a>
 8012926:	f899 0001 	ldrb.w	r0, [r9, #1]
 801292a:	4626      	mov	r6, r4
 801292c:	f7ff ffc7 	bl	80128be <__hexdig_fun>
 8012930:	2800      	cmp	r0, #0
 8012932:	d060      	beq.n	80129f6 <__gethex+0x10e>
 8012934:	4623      	mov	r3, r4
 8012936:	7818      	ldrb	r0, [r3, #0]
 8012938:	4699      	mov	r9, r3
 801293a:	3301      	adds	r3, #1
 801293c:	2830      	cmp	r0, #48	@ 0x30
 801293e:	d0fa      	beq.n	8012936 <__gethex+0x4e>
 8012940:	f7ff ffbd 	bl	80128be <__hexdig_fun>
 8012944:	fab0 f580 	clz	r5, r0
 8012948:	f04f 0b01 	mov.w	fp, #1
 801294c:	096d      	lsrs	r5, r5, #5
 801294e:	464a      	mov	r2, r9
 8012950:	4616      	mov	r6, r2
 8012952:	3201      	adds	r2, #1
 8012954:	7830      	ldrb	r0, [r6, #0]
 8012956:	f7ff ffb2 	bl	80128be <__hexdig_fun>
 801295a:	2800      	cmp	r0, #0
 801295c:	d1f8      	bne.n	8012950 <__gethex+0x68>
 801295e:	2201      	movs	r2, #1
 8012960:	498c      	ldr	r1, [pc, #560]	@ (8012b94 <__gethex+0x2ac>)
 8012962:	4630      	mov	r0, r6
 8012964:	f7ff feeb 	bl	801273e <strncmp>
 8012968:	2800      	cmp	r0, #0
 801296a:	d13e      	bne.n	80129ea <__gethex+0x102>
 801296c:	b944      	cbnz	r4, 8012980 <__gethex+0x98>
 801296e:	1c74      	adds	r4, r6, #1
 8012970:	4622      	mov	r2, r4
 8012972:	4616      	mov	r6, r2
 8012974:	3201      	adds	r2, #1
 8012976:	7830      	ldrb	r0, [r6, #0]
 8012978:	f7ff ffa1 	bl	80128be <__hexdig_fun>
 801297c:	2800      	cmp	r0, #0
 801297e:	d1f8      	bne.n	8012972 <__gethex+0x8a>
 8012980:	1ba4      	subs	r4, r4, r6
 8012982:	00a7      	lsls	r7, r4, #2
 8012984:	7833      	ldrb	r3, [r6, #0]
 8012986:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801298a:	2b50      	cmp	r3, #80	@ 0x50
 801298c:	d13d      	bne.n	8012a0a <__gethex+0x122>
 801298e:	7873      	ldrb	r3, [r6, #1]
 8012990:	2b2b      	cmp	r3, #43	@ 0x2b
 8012992:	d032      	beq.n	80129fa <__gethex+0x112>
 8012994:	2b2d      	cmp	r3, #45	@ 0x2d
 8012996:	d033      	beq.n	8012a00 <__gethex+0x118>
 8012998:	1c71      	adds	r1, r6, #1
 801299a:	2400      	movs	r4, #0
 801299c:	7808      	ldrb	r0, [r1, #0]
 801299e:	f7ff ff8e 	bl	80128be <__hexdig_fun>
 80129a2:	1e43      	subs	r3, r0, #1
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b18      	cmp	r3, #24
 80129a8:	d82f      	bhi.n	8012a0a <__gethex+0x122>
 80129aa:	f1a0 0210 	sub.w	r2, r0, #16
 80129ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80129b2:	f7ff ff84 	bl	80128be <__hexdig_fun>
 80129b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80129ba:	230a      	movs	r3, #10
 80129bc:	fa5f fc8c 	uxtb.w	ip, ip
 80129c0:	f1bc 0f18 	cmp.w	ip, #24
 80129c4:	d91e      	bls.n	8012a04 <__gethex+0x11c>
 80129c6:	b104      	cbz	r4, 80129ca <__gethex+0xe2>
 80129c8:	4252      	negs	r2, r2
 80129ca:	4417      	add	r7, r2
 80129cc:	f8ca 1000 	str.w	r1, [sl]
 80129d0:	b1ed      	cbz	r5, 8012a0e <__gethex+0x126>
 80129d2:	f1bb 0f00 	cmp.w	fp, #0
 80129d6:	bf0c      	ite	eq
 80129d8:	2506      	moveq	r5, #6
 80129da:	2500      	movne	r5, #0
 80129dc:	4628      	mov	r0, r5
 80129de:	b005      	add	sp, #20
 80129e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e4:	2500      	movs	r5, #0
 80129e6:	462c      	mov	r4, r5
 80129e8:	e7b1      	b.n	801294e <__gethex+0x66>
 80129ea:	2c00      	cmp	r4, #0
 80129ec:	d1c8      	bne.n	8012980 <__gethex+0x98>
 80129ee:	4627      	mov	r7, r4
 80129f0:	e7c8      	b.n	8012984 <__gethex+0x9c>
 80129f2:	464e      	mov	r6, r9
 80129f4:	462f      	mov	r7, r5
 80129f6:	2501      	movs	r5, #1
 80129f8:	e7c4      	b.n	8012984 <__gethex+0x9c>
 80129fa:	2400      	movs	r4, #0
 80129fc:	1cb1      	adds	r1, r6, #2
 80129fe:	e7cd      	b.n	801299c <__gethex+0xb4>
 8012a00:	2401      	movs	r4, #1
 8012a02:	e7fb      	b.n	80129fc <__gethex+0x114>
 8012a04:	fb03 0002 	mla	r0, r3, r2, r0
 8012a08:	e7cf      	b.n	80129aa <__gethex+0xc2>
 8012a0a:	4631      	mov	r1, r6
 8012a0c:	e7de      	b.n	80129cc <__gethex+0xe4>
 8012a0e:	eba6 0309 	sub.w	r3, r6, r9
 8012a12:	4629      	mov	r1, r5
 8012a14:	3b01      	subs	r3, #1
 8012a16:	2b07      	cmp	r3, #7
 8012a18:	dc0a      	bgt.n	8012a30 <__gethex+0x148>
 8012a1a:	9801      	ldr	r0, [sp, #4]
 8012a1c:	f7fd ff94 	bl	8010948 <_Balloc>
 8012a20:	4604      	mov	r4, r0
 8012a22:	b940      	cbnz	r0, 8012a36 <__gethex+0x14e>
 8012a24:	4b5c      	ldr	r3, [pc, #368]	@ (8012b98 <__gethex+0x2b0>)
 8012a26:	4602      	mov	r2, r0
 8012a28:	21e4      	movs	r1, #228	@ 0xe4
 8012a2a:	485c      	ldr	r0, [pc, #368]	@ (8012b9c <__gethex+0x2b4>)
 8012a2c:	f7ff fec4 	bl	80127b8 <__assert_func>
 8012a30:	3101      	adds	r1, #1
 8012a32:	105b      	asrs	r3, r3, #1
 8012a34:	e7ef      	b.n	8012a16 <__gethex+0x12e>
 8012a36:	f100 0a14 	add.w	sl, r0, #20
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	4655      	mov	r5, sl
 8012a3e:	469b      	mov	fp, r3
 8012a40:	45b1      	cmp	r9, r6
 8012a42:	d337      	bcc.n	8012ab4 <__gethex+0x1cc>
 8012a44:	f845 bb04 	str.w	fp, [r5], #4
 8012a48:	eba5 050a 	sub.w	r5, r5, sl
 8012a4c:	4658      	mov	r0, fp
 8012a4e:	10ad      	asrs	r5, r5, #2
 8012a50:	6125      	str	r5, [r4, #16]
 8012a52:	016d      	lsls	r5, r5, #5
 8012a54:	f7fe f86c 	bl	8010b30 <__hi0bits>
 8012a58:	f8d8 6000 	ldr.w	r6, [r8]
 8012a5c:	1a2d      	subs	r5, r5, r0
 8012a5e:	42b5      	cmp	r5, r6
 8012a60:	dd54      	ble.n	8012b0c <__gethex+0x224>
 8012a62:	1bad      	subs	r5, r5, r6
 8012a64:	4620      	mov	r0, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	f7fe fc03 	bl	8011272 <__any_on>
 8012a6c:	4681      	mov	r9, r0
 8012a6e:	b178      	cbz	r0, 8012a90 <__gethex+0x1a8>
 8012a70:	1e6b      	subs	r3, r5, #1
 8012a72:	f04f 0901 	mov.w	r9, #1
 8012a76:	1159      	asrs	r1, r3, #5
 8012a78:	f003 021f 	and.w	r2, r3, #31
 8012a7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012a80:	fa09 f202 	lsl.w	r2, r9, r2
 8012a84:	420a      	tst	r2, r1
 8012a86:	d003      	beq.n	8012a90 <__gethex+0x1a8>
 8012a88:	454b      	cmp	r3, r9
 8012a8a:	dc36      	bgt.n	8012afa <__gethex+0x212>
 8012a8c:	f04f 0902 	mov.w	r9, #2
 8012a90:	442f      	add	r7, r5
 8012a92:	4629      	mov	r1, r5
 8012a94:	4620      	mov	r0, r4
 8012a96:	f7ff fec1 	bl	801281c <rshift>
 8012a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a9e:	42bb      	cmp	r3, r7
 8012aa0:	da42      	bge.n	8012b28 <__gethex+0x240>
 8012aa2:	4621      	mov	r1, r4
 8012aa4:	9801      	ldr	r0, [sp, #4]
 8012aa6:	f7fd ff8f 	bl	80109c8 <_Bfree>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012aae:	25a3      	movs	r5, #163	@ 0xa3
 8012ab0:	6013      	str	r3, [r2, #0]
 8012ab2:	e793      	b.n	80129dc <__gethex+0xf4>
 8012ab4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012ab8:	2a2e      	cmp	r2, #46	@ 0x2e
 8012aba:	d012      	beq.n	8012ae2 <__gethex+0x1fa>
 8012abc:	2b20      	cmp	r3, #32
 8012abe:	d104      	bne.n	8012aca <__gethex+0x1e2>
 8012ac0:	f845 bb04 	str.w	fp, [r5], #4
 8012ac4:	f04f 0b00 	mov.w	fp, #0
 8012ac8:	465b      	mov	r3, fp
 8012aca:	7830      	ldrb	r0, [r6, #0]
 8012acc:	9303      	str	r3, [sp, #12]
 8012ace:	f7ff fef6 	bl	80128be <__hexdig_fun>
 8012ad2:	9b03      	ldr	r3, [sp, #12]
 8012ad4:	f000 000f 	and.w	r0, r0, #15
 8012ad8:	4098      	lsls	r0, r3
 8012ada:	3304      	adds	r3, #4
 8012adc:	ea4b 0b00 	orr.w	fp, fp, r0
 8012ae0:	e7ae      	b.n	8012a40 <__gethex+0x158>
 8012ae2:	45b1      	cmp	r9, r6
 8012ae4:	d8ea      	bhi.n	8012abc <__gethex+0x1d4>
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	492a      	ldr	r1, [pc, #168]	@ (8012b94 <__gethex+0x2ac>)
 8012aea:	4630      	mov	r0, r6
 8012aec:	9303      	str	r3, [sp, #12]
 8012aee:	f7ff fe26 	bl	801273e <strncmp>
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	2800      	cmp	r0, #0
 8012af6:	d1e1      	bne.n	8012abc <__gethex+0x1d4>
 8012af8:	e7a2      	b.n	8012a40 <__gethex+0x158>
 8012afa:	1ea9      	subs	r1, r5, #2
 8012afc:	4620      	mov	r0, r4
 8012afe:	f7fe fbb8 	bl	8011272 <__any_on>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d0c2      	beq.n	8012a8c <__gethex+0x1a4>
 8012b06:	f04f 0903 	mov.w	r9, #3
 8012b0a:	e7c1      	b.n	8012a90 <__gethex+0x1a8>
 8012b0c:	da09      	bge.n	8012b22 <__gethex+0x23a>
 8012b0e:	1b75      	subs	r5, r6, r5
 8012b10:	4621      	mov	r1, r4
 8012b12:	9801      	ldr	r0, [sp, #4]
 8012b14:	462a      	mov	r2, r5
 8012b16:	1b7f      	subs	r7, r7, r5
 8012b18:	f7fe f96a 	bl	8010df0 <__lshift>
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	f100 0a14 	add.w	sl, r0, #20
 8012b22:	f04f 0900 	mov.w	r9, #0
 8012b26:	e7b8      	b.n	8012a9a <__gethex+0x1b2>
 8012b28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b2c:	42bd      	cmp	r5, r7
 8012b2e:	dd6f      	ble.n	8012c10 <__gethex+0x328>
 8012b30:	1bed      	subs	r5, r5, r7
 8012b32:	42ae      	cmp	r6, r5
 8012b34:	dc34      	bgt.n	8012ba0 <__gethex+0x2b8>
 8012b36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d022      	beq.n	8012b84 <__gethex+0x29c>
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d024      	beq.n	8012b8c <__gethex+0x2a4>
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d115      	bne.n	8012b72 <__gethex+0x28a>
 8012b46:	42ae      	cmp	r6, r5
 8012b48:	d113      	bne.n	8012b72 <__gethex+0x28a>
 8012b4a:	2e01      	cmp	r6, #1
 8012b4c:	d10b      	bne.n	8012b66 <__gethex+0x27e>
 8012b4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012b52:	2562      	movs	r5, #98	@ 0x62
 8012b54:	9a02      	ldr	r2, [sp, #8]
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	2301      	movs	r3, #1
 8012b5a:	6123      	str	r3, [r4, #16]
 8012b5c:	f8ca 3000 	str.w	r3, [sl]
 8012b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b62:	601c      	str	r4, [r3, #0]
 8012b64:	e73a      	b.n	80129dc <__gethex+0xf4>
 8012b66:	1e71      	subs	r1, r6, #1
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7fe fb82 	bl	8011272 <__any_on>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d1ed      	bne.n	8012b4e <__gethex+0x266>
 8012b72:	4621      	mov	r1, r4
 8012b74:	9801      	ldr	r0, [sp, #4]
 8012b76:	f7fd ff27 	bl	80109c8 <_Bfree>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b7e:	2550      	movs	r5, #80	@ 0x50
 8012b80:	6013      	str	r3, [r2, #0]
 8012b82:	e72b      	b.n	80129dc <__gethex+0xf4>
 8012b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1f3      	bne.n	8012b72 <__gethex+0x28a>
 8012b8a:	e7e0      	b.n	8012b4e <__gethex+0x266>
 8012b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1dd      	bne.n	8012b4e <__gethex+0x266>
 8012b92:	e7ee      	b.n	8012b72 <__gethex+0x28a>
 8012b94:	08030abf 	.word	0x08030abf
 8012b98:	08030a55 	.word	0x08030a55
 8012b9c:	08030b16 	.word	0x08030b16
 8012ba0:	1e6f      	subs	r7, r5, #1
 8012ba2:	f1b9 0f00 	cmp.w	r9, #0
 8012ba6:	d130      	bne.n	8012c0a <__gethex+0x322>
 8012ba8:	b127      	cbz	r7, 8012bb4 <__gethex+0x2cc>
 8012baa:	4639      	mov	r1, r7
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7fe fb60 	bl	8011272 <__any_on>
 8012bb2:	4681      	mov	r9, r0
 8012bb4:	117a      	asrs	r2, r7, #5
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	f007 071f 	and.w	r7, r7, #31
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	40bb      	lsls	r3, r7
 8012bc6:	1b76      	subs	r6, r6, r5
 8012bc8:	2502      	movs	r5, #2
 8012bca:	4213      	tst	r3, r2
 8012bcc:	bf18      	it	ne
 8012bce:	f049 0902 	orrne.w	r9, r9, #2
 8012bd2:	f7ff fe23 	bl	801281c <rshift>
 8012bd6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012bda:	f1b9 0f00 	cmp.w	r9, #0
 8012bde:	d047      	beq.n	8012c70 <__gethex+0x388>
 8012be0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d015      	beq.n	8012c14 <__gethex+0x32c>
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d017      	beq.n	8012c1c <__gethex+0x334>
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d109      	bne.n	8012c04 <__gethex+0x31c>
 8012bf0:	f019 0f02 	tst.w	r9, #2
 8012bf4:	d006      	beq.n	8012c04 <__gethex+0x31c>
 8012bf6:	f8da 3000 	ldr.w	r3, [sl]
 8012bfa:	ea49 0903 	orr.w	r9, r9, r3
 8012bfe:	f019 0f01 	tst.w	r9, #1
 8012c02:	d10e      	bne.n	8012c22 <__gethex+0x33a>
 8012c04:	f045 0510 	orr.w	r5, r5, #16
 8012c08:	e032      	b.n	8012c70 <__gethex+0x388>
 8012c0a:	f04f 0901 	mov.w	r9, #1
 8012c0e:	e7d1      	b.n	8012bb4 <__gethex+0x2cc>
 8012c10:	2501      	movs	r5, #1
 8012c12:	e7e2      	b.n	8012bda <__gethex+0x2f2>
 8012c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c16:	f1c3 0301 	rsb	r3, r3, #1
 8012c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d0f0      	beq.n	8012c04 <__gethex+0x31c>
 8012c22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012c26:	f104 0314 	add.w	r3, r4, #20
 8012c2a:	f04f 0c00 	mov.w	ip, #0
 8012c2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012c32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012c36:	4618      	mov	r0, r3
 8012c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012c40:	d01b      	beq.n	8012c7a <__gethex+0x392>
 8012c42:	3201      	adds	r2, #1
 8012c44:	6002      	str	r2, [r0, #0]
 8012c46:	2d02      	cmp	r5, #2
 8012c48:	f104 0314 	add.w	r3, r4, #20
 8012c4c:	d13c      	bne.n	8012cc8 <__gethex+0x3e0>
 8012c4e:	f8d8 2000 	ldr.w	r2, [r8]
 8012c52:	3a01      	subs	r2, #1
 8012c54:	42b2      	cmp	r2, r6
 8012c56:	d109      	bne.n	8012c6c <__gethex+0x384>
 8012c58:	1171      	asrs	r1, r6, #5
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	f006 061f 	and.w	r6, r6, #31
 8012c60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c64:	fa02 f606 	lsl.w	r6, r2, r6
 8012c68:	421e      	tst	r6, r3
 8012c6a:	d13a      	bne.n	8012ce2 <__gethex+0x3fa>
 8012c6c:	f045 0520 	orr.w	r5, r5, #32
 8012c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c72:	601c      	str	r4, [r3, #0]
 8012c74:	9b02      	ldr	r3, [sp, #8]
 8012c76:	601f      	str	r7, [r3, #0]
 8012c78:	e6b0      	b.n	80129dc <__gethex+0xf4>
 8012c7a:	4299      	cmp	r1, r3
 8012c7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012c80:	d8d9      	bhi.n	8012c36 <__gethex+0x34e>
 8012c82:	68a3      	ldr	r3, [r4, #8]
 8012c84:	459b      	cmp	fp, r3
 8012c86:	db17      	blt.n	8012cb8 <__gethex+0x3d0>
 8012c88:	6861      	ldr	r1, [r4, #4]
 8012c8a:	9801      	ldr	r0, [sp, #4]
 8012c8c:	3101      	adds	r1, #1
 8012c8e:	f7fd fe5b 	bl	8010948 <_Balloc>
 8012c92:	4681      	mov	r9, r0
 8012c94:	b918      	cbnz	r0, 8012c9e <__gethex+0x3b6>
 8012c96:	4b1a      	ldr	r3, [pc, #104]	@ (8012d00 <__gethex+0x418>)
 8012c98:	4602      	mov	r2, r0
 8012c9a:	2184      	movs	r1, #132	@ 0x84
 8012c9c:	e6c5      	b.n	8012a2a <__gethex+0x142>
 8012c9e:	6922      	ldr	r2, [r4, #16]
 8012ca0:	f104 010c 	add.w	r1, r4, #12
 8012ca4:	300c      	adds	r0, #12
 8012ca6:	3202      	adds	r2, #2
 8012ca8:	0092      	lsls	r2, r2, #2
 8012caa:	f7fc ff8f 	bl	800fbcc <memcpy>
 8012cae:	4621      	mov	r1, r4
 8012cb0:	464c      	mov	r4, r9
 8012cb2:	9801      	ldr	r0, [sp, #4]
 8012cb4:	f7fd fe88 	bl	80109c8 <_Bfree>
 8012cb8:	6923      	ldr	r3, [r4, #16]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012cc0:	6122      	str	r2, [r4, #16]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	615a      	str	r2, [r3, #20]
 8012cc6:	e7be      	b.n	8012c46 <__gethex+0x35e>
 8012cc8:	6922      	ldr	r2, [r4, #16]
 8012cca:	455a      	cmp	r2, fp
 8012ccc:	dd0b      	ble.n	8012ce6 <__gethex+0x3fe>
 8012cce:	2101      	movs	r1, #1
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f7ff fda3 	bl	801281c <rshift>
 8012cd6:	3701      	adds	r7, #1
 8012cd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012cdc:	42bb      	cmp	r3, r7
 8012cde:	f6ff aee0 	blt.w	8012aa2 <__gethex+0x1ba>
 8012ce2:	2501      	movs	r5, #1
 8012ce4:	e7c2      	b.n	8012c6c <__gethex+0x384>
 8012ce6:	f016 061f 	ands.w	r6, r6, #31
 8012cea:	d0fa      	beq.n	8012ce2 <__gethex+0x3fa>
 8012cec:	4453      	add	r3, sl
 8012cee:	f1c6 0620 	rsb	r6, r6, #32
 8012cf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012cf6:	f7fd ff1b 	bl	8010b30 <__hi0bits>
 8012cfa:	42b0      	cmp	r0, r6
 8012cfc:	dbe7      	blt.n	8012cce <__gethex+0x3e6>
 8012cfe:	e7f0      	b.n	8012ce2 <__gethex+0x3fa>
 8012d00:	08030a55 	.word	0x08030a55

08012d04 <L_shift>:
 8012d04:	f1c2 0208 	rsb	r2, r2, #8
 8012d08:	0092      	lsls	r2, r2, #2
 8012d0a:	b570      	push	{r4, r5, r6, lr}
 8012d0c:	f1c2 0620 	rsb	r6, r2, #32
 8012d10:	6843      	ldr	r3, [r0, #4]
 8012d12:	6804      	ldr	r4, [r0, #0]
 8012d14:	fa03 f506 	lsl.w	r5, r3, r6
 8012d18:	40d3      	lsrs	r3, r2
 8012d1a:	432c      	orrs	r4, r5
 8012d1c:	6004      	str	r4, [r0, #0]
 8012d1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012d22:	4288      	cmp	r0, r1
 8012d24:	d3f4      	bcc.n	8012d10 <L_shift+0xc>
 8012d26:	bd70      	pop	{r4, r5, r6, pc}

08012d28 <__match>:
 8012d28:	6803      	ldr	r3, [r0, #0]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	b530      	push	{r4, r5, lr}
 8012d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d32:	b914      	cbnz	r4, 8012d3a <__match+0x12>
 8012d34:	6003      	str	r3, [r0, #0]
 8012d36:	2001      	movs	r0, #1
 8012d38:	bd30      	pop	{r4, r5, pc}
 8012d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012d42:	2d19      	cmp	r5, #25
 8012d44:	bf98      	it	ls
 8012d46:	3220      	addls	r2, #32
 8012d48:	42a2      	cmp	r2, r4
 8012d4a:	d0f0      	beq.n	8012d2e <__match+0x6>
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	e7f3      	b.n	8012d38 <__match+0x10>

08012d50 <__hexnan>:
 8012d50:	680b      	ldr	r3, [r1, #0]
 8012d52:	6801      	ldr	r1, [r0, #0]
 8012d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d58:	115e      	asrs	r6, r3, #5
 8012d5a:	f013 031f 	ands.w	r3, r3, #31
 8012d5e:	f04f 0500 	mov.w	r5, #0
 8012d62:	b087      	sub	sp, #28
 8012d64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012d68:	4682      	mov	sl, r0
 8012d6a:	4690      	mov	r8, r2
 8012d6c:	46ab      	mov	fp, r5
 8012d6e:	bf18      	it	ne
 8012d70:	3604      	addne	r6, #4
 8012d72:	9301      	str	r3, [sp, #4]
 8012d74:	9502      	str	r5, [sp, #8]
 8012d76:	1f37      	subs	r7, r6, #4
 8012d78:	f846 5c04 	str.w	r5, [r6, #-4]
 8012d7c:	46b9      	mov	r9, r7
 8012d7e:	463c      	mov	r4, r7
 8012d80:	1c4b      	adds	r3, r1, #1
 8012d82:	784a      	ldrb	r2, [r1, #1]
 8012d84:	9303      	str	r3, [sp, #12]
 8012d86:	b342      	cbz	r2, 8012dda <__hexnan+0x8a>
 8012d88:	4610      	mov	r0, r2
 8012d8a:	9105      	str	r1, [sp, #20]
 8012d8c:	9204      	str	r2, [sp, #16]
 8012d8e:	f7ff fd96 	bl	80128be <__hexdig_fun>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d151      	bne.n	8012e3a <__hexnan+0xea>
 8012d96:	9a04      	ldr	r2, [sp, #16]
 8012d98:	9905      	ldr	r1, [sp, #20]
 8012d9a:	2a20      	cmp	r2, #32
 8012d9c:	d818      	bhi.n	8012dd0 <__hexnan+0x80>
 8012d9e:	9b02      	ldr	r3, [sp, #8]
 8012da0:	459b      	cmp	fp, r3
 8012da2:	dd13      	ble.n	8012dcc <__hexnan+0x7c>
 8012da4:	454c      	cmp	r4, r9
 8012da6:	d206      	bcs.n	8012db6 <__hexnan+0x66>
 8012da8:	2d07      	cmp	r5, #7
 8012daa:	dc04      	bgt.n	8012db6 <__hexnan+0x66>
 8012dac:	462a      	mov	r2, r5
 8012dae:	4649      	mov	r1, r9
 8012db0:	4620      	mov	r0, r4
 8012db2:	f7ff ffa7 	bl	8012d04 <L_shift>
 8012db6:	4544      	cmp	r4, r8
 8012db8:	d951      	bls.n	8012e5e <__hexnan+0x10e>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f1a4 0904 	sub.w	r9, r4, #4
 8012dc0:	f8cd b008 	str.w	fp, [sp, #8]
 8012dc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8012dc8:	461d      	mov	r5, r3
 8012dca:	464c      	mov	r4, r9
 8012dcc:	9903      	ldr	r1, [sp, #12]
 8012dce:	e7d7      	b.n	8012d80 <__hexnan+0x30>
 8012dd0:	2a29      	cmp	r2, #41	@ 0x29
 8012dd2:	d156      	bne.n	8012e82 <__hexnan+0x132>
 8012dd4:	3102      	adds	r1, #2
 8012dd6:	f8ca 1000 	str.w	r1, [sl]
 8012dda:	f1bb 0f00 	cmp.w	fp, #0
 8012dde:	d050      	beq.n	8012e82 <__hexnan+0x132>
 8012de0:	454c      	cmp	r4, r9
 8012de2:	d206      	bcs.n	8012df2 <__hexnan+0xa2>
 8012de4:	2d07      	cmp	r5, #7
 8012de6:	dc04      	bgt.n	8012df2 <__hexnan+0xa2>
 8012de8:	462a      	mov	r2, r5
 8012dea:	4649      	mov	r1, r9
 8012dec:	4620      	mov	r0, r4
 8012dee:	f7ff ff89 	bl	8012d04 <L_shift>
 8012df2:	4544      	cmp	r4, r8
 8012df4:	d935      	bls.n	8012e62 <__hexnan+0x112>
 8012df6:	f1a8 0204 	sub.w	r2, r8, #4
 8012dfa:	4623      	mov	r3, r4
 8012dfc:	f853 1b04 	ldr.w	r1, [r3], #4
 8012e00:	429f      	cmp	r7, r3
 8012e02:	f842 1f04 	str.w	r1, [r2, #4]!
 8012e06:	d2f9      	bcs.n	8012dfc <__hexnan+0xac>
 8012e08:	1b3b      	subs	r3, r7, r4
 8012e0a:	3e03      	subs	r6, #3
 8012e0c:	3401      	adds	r4, #1
 8012e0e:	2200      	movs	r2, #0
 8012e10:	f023 0303 	bic.w	r3, r3, #3
 8012e14:	3304      	adds	r3, #4
 8012e16:	42b4      	cmp	r4, r6
 8012e18:	bf88      	it	hi
 8012e1a:	2304      	movhi	r3, #4
 8012e1c:	4443      	add	r3, r8
 8012e1e:	f843 2b04 	str.w	r2, [r3], #4
 8012e22:	429f      	cmp	r7, r3
 8012e24:	d2fb      	bcs.n	8012e1e <__hexnan+0xce>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	b91b      	cbnz	r3, 8012e32 <__hexnan+0xe2>
 8012e2a:	4547      	cmp	r7, r8
 8012e2c:	d127      	bne.n	8012e7e <__hexnan+0x12e>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	603b      	str	r3, [r7, #0]
 8012e32:	2005      	movs	r0, #5
 8012e34:	b007      	add	sp, #28
 8012e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3a:	3501      	adds	r5, #1
 8012e3c:	f10b 0b01 	add.w	fp, fp, #1
 8012e40:	2d08      	cmp	r5, #8
 8012e42:	dd05      	ble.n	8012e50 <__hexnan+0x100>
 8012e44:	4544      	cmp	r4, r8
 8012e46:	d9c1      	bls.n	8012dcc <__hexnan+0x7c>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	3c04      	subs	r4, #4
 8012e4c:	2501      	movs	r5, #1
 8012e4e:	6023      	str	r3, [r4, #0]
 8012e50:	6822      	ldr	r2, [r4, #0]
 8012e52:	f000 000f 	and.w	r0, r0, #15
 8012e56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012e5a:	6020      	str	r0, [r4, #0]
 8012e5c:	e7b6      	b.n	8012dcc <__hexnan+0x7c>
 8012e5e:	2508      	movs	r5, #8
 8012e60:	e7b4      	b.n	8012dcc <__hexnan+0x7c>
 8012e62:	9b01      	ldr	r3, [sp, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d0de      	beq.n	8012e26 <__hexnan+0xd6>
 8012e68:	f1c3 0320 	rsb	r3, r3, #32
 8012e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e70:	40da      	lsrs	r2, r3
 8012e72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012e76:	4013      	ands	r3, r2
 8012e78:	f846 3c04 	str.w	r3, [r6, #-4]
 8012e7c:	e7d3      	b.n	8012e26 <__hexnan+0xd6>
 8012e7e:	3f04      	subs	r7, #4
 8012e80:	e7d1      	b.n	8012e26 <__hexnan+0xd6>
 8012e82:	2004      	movs	r0, #4
 8012e84:	e7d6      	b.n	8012e34 <__hexnan+0xe4>

08012e86 <__ascii_mbtowc>:
 8012e86:	b082      	sub	sp, #8
 8012e88:	b901      	cbnz	r1, 8012e8c <__ascii_mbtowc+0x6>
 8012e8a:	a901      	add	r1, sp, #4
 8012e8c:	b142      	cbz	r2, 8012ea0 <__ascii_mbtowc+0x1a>
 8012e8e:	b14b      	cbz	r3, 8012ea4 <__ascii_mbtowc+0x1e>
 8012e90:	7813      	ldrb	r3, [r2, #0]
 8012e92:	600b      	str	r3, [r1, #0]
 8012e94:	7812      	ldrb	r2, [r2, #0]
 8012e96:	1e10      	subs	r0, r2, #0
 8012e98:	bf18      	it	ne
 8012e9a:	2001      	movne	r0, #1
 8012e9c:	b002      	add	sp, #8
 8012e9e:	4770      	bx	lr
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	e7fb      	b.n	8012e9c <__ascii_mbtowc+0x16>
 8012ea4:	f06f 0001 	mvn.w	r0, #1
 8012ea8:	e7f8      	b.n	8012e9c <__ascii_mbtowc+0x16>

08012eaa <_realloc_r>:
 8012eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eae:	4607      	mov	r7, r0
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	460d      	mov	r5, r1
 8012eb4:	b921      	cbnz	r1, 8012ec0 <_realloc_r+0x16>
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebc:	f7fb bcce 	b.w	800e85c <_malloc_r>
 8012ec0:	b92a      	cbnz	r2, 8012ece <_realloc_r+0x24>
 8012ec2:	4625      	mov	r5, r4
 8012ec4:	f7fd fcf6 	bl	80108b4 <_free_r>
 8012ec8:	4628      	mov	r0, r5
 8012eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ece:	f000 f840 	bl	8012f52 <_malloc_usable_size_r>
 8012ed2:	4284      	cmp	r4, r0
 8012ed4:	4606      	mov	r6, r0
 8012ed6:	d802      	bhi.n	8012ede <_realloc_r+0x34>
 8012ed8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012edc:	d8f4      	bhi.n	8012ec8 <_realloc_r+0x1e>
 8012ede:	4621      	mov	r1, r4
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	f7fb fcbb 	bl	800e85c <_malloc_r>
 8012ee6:	4680      	mov	r8, r0
 8012ee8:	b908      	cbnz	r0, 8012eee <_realloc_r+0x44>
 8012eea:	4645      	mov	r5, r8
 8012eec:	e7ec      	b.n	8012ec8 <_realloc_r+0x1e>
 8012eee:	42b4      	cmp	r4, r6
 8012ef0:	4622      	mov	r2, r4
 8012ef2:	4629      	mov	r1, r5
 8012ef4:	bf28      	it	cs
 8012ef6:	4632      	movcs	r2, r6
 8012ef8:	f7fc fe68 	bl	800fbcc <memcpy>
 8012efc:	4629      	mov	r1, r5
 8012efe:	4638      	mov	r0, r7
 8012f00:	f7fd fcd8 	bl	80108b4 <_free_r>
 8012f04:	e7f1      	b.n	8012eea <_realloc_r+0x40>

08012f06 <__ascii_wctomb>:
 8012f06:	4603      	mov	r3, r0
 8012f08:	4608      	mov	r0, r1
 8012f0a:	b141      	cbz	r1, 8012f1e <__ascii_wctomb+0x18>
 8012f0c:	2aff      	cmp	r2, #255	@ 0xff
 8012f0e:	d904      	bls.n	8012f1a <__ascii_wctomb+0x14>
 8012f10:	228a      	movs	r2, #138	@ 0x8a
 8012f12:	f04f 30ff 	mov.w	r0, #4294967295
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	4770      	bx	lr
 8012f1a:	2001      	movs	r0, #1
 8012f1c:	700a      	strb	r2, [r1, #0]
 8012f1e:	4770      	bx	lr

08012f20 <fiprintf>:
 8012f20:	b40e      	push	{r1, r2, r3}
 8012f22:	b503      	push	{r0, r1, lr}
 8012f24:	ab03      	add	r3, sp, #12
 8012f26:	4601      	mov	r1, r0
 8012f28:	4805      	ldr	r0, [pc, #20]	@ (8012f40 <fiprintf+0x20>)
 8012f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f2e:	6800      	ldr	r0, [r0, #0]
 8012f30:	9301      	str	r3, [sp, #4]
 8012f32:	f7ff f9c5 	bl	80122c0 <_vfiprintf_r>
 8012f36:	b002      	add	sp, #8
 8012f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f3c:	b003      	add	sp, #12
 8012f3e:	4770      	bx	lr
 8012f40:	20000018 	.word	0x20000018

08012f44 <abort>:
 8012f44:	2006      	movs	r0, #6
 8012f46:	b508      	push	{r3, lr}
 8012f48:	f000 f834 	bl	8012fb4 <raise>
 8012f4c:	2001      	movs	r0, #1
 8012f4e:	f7ef f8f3 	bl	8002138 <_exit>

08012f52 <_malloc_usable_size_r>:
 8012f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f56:	1f18      	subs	r0, r3, #4
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	bfbc      	itt	lt
 8012f5c:	580b      	ldrlt	r3, [r1, r0]
 8012f5e:	18c0      	addlt	r0, r0, r3
 8012f60:	4770      	bx	lr

08012f62 <_raise_r>:
 8012f62:	291f      	cmp	r1, #31
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4605      	mov	r5, r0
 8012f68:	460c      	mov	r4, r1
 8012f6a:	d904      	bls.n	8012f76 <_raise_r+0x14>
 8012f6c:	2316      	movs	r3, #22
 8012f6e:	6003      	str	r3, [r0, #0]
 8012f70:	f04f 30ff 	mov.w	r0, #4294967295
 8012f74:	bd38      	pop	{r3, r4, r5, pc}
 8012f76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f78:	b112      	cbz	r2, 8012f80 <_raise_r+0x1e>
 8012f7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f7e:	b94b      	cbnz	r3, 8012f94 <_raise_r+0x32>
 8012f80:	4628      	mov	r0, r5
 8012f82:	f000 f831 	bl	8012fe8 <_getpid_r>
 8012f86:	4622      	mov	r2, r4
 8012f88:	4601      	mov	r1, r0
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f90:	f000 b818 	b.w	8012fc4 <_kill_r>
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	d00a      	beq.n	8012fae <_raise_r+0x4c>
 8012f98:	1c59      	adds	r1, r3, #1
 8012f9a:	d103      	bne.n	8012fa4 <_raise_r+0x42>
 8012f9c:	2316      	movs	r3, #22
 8012f9e:	6003      	str	r3, [r0, #0]
 8012fa0:	2001      	movs	r0, #1
 8012fa2:	e7e7      	b.n	8012f74 <_raise_r+0x12>
 8012fa4:	2100      	movs	r1, #0
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fac:	4798      	blx	r3
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e7e0      	b.n	8012f74 <_raise_r+0x12>
	...

08012fb4 <raise>:
 8012fb4:	4b02      	ldr	r3, [pc, #8]	@ (8012fc0 <raise+0xc>)
 8012fb6:	4601      	mov	r1, r0
 8012fb8:	6818      	ldr	r0, [r3, #0]
 8012fba:	f7ff bfd2 	b.w	8012f62 <_raise_r>
 8012fbe:	bf00      	nop
 8012fc0:	20000018 	.word	0x20000018

08012fc4 <_kill_r>:
 8012fc4:	b538      	push	{r3, r4, r5, lr}
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	4d06      	ldr	r5, [pc, #24]	@ (8012fe4 <_kill_r+0x20>)
 8012fca:	4604      	mov	r4, r0
 8012fcc:	4608      	mov	r0, r1
 8012fce:	4611      	mov	r1, r2
 8012fd0:	602b      	str	r3, [r5, #0]
 8012fd2:	f7ef f8a1 	bl	8002118 <_kill>
 8012fd6:	1c43      	adds	r3, r0, #1
 8012fd8:	d102      	bne.n	8012fe0 <_kill_r+0x1c>
 8012fda:	682b      	ldr	r3, [r5, #0]
 8012fdc:	b103      	cbz	r3, 8012fe0 <_kill_r+0x1c>
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	bd38      	pop	{r3, r4, r5, pc}
 8012fe2:	bf00      	nop
 8012fe4:	2000c720 	.word	0x2000c720

08012fe8 <_getpid_r>:
 8012fe8:	f7ef b88e 	b.w	8002108 <_getpid>

08012fec <_init>:
 8012fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fee:	bf00      	nop
 8012ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ff2:	bc08      	pop	{r3}
 8012ff4:	469e      	mov	lr, r3
 8012ff6:	4770      	bx	lr

08012ff8 <_fini>:
 8012ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffa:	bf00      	nop
 8012ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ffe:	bc08      	pop	{r3}
 8013000:	469e      	mov	lr, r3
 8013002:	4770      	bx	lr
